<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vim详解</title>
      <link href="/2019/07/10/linux/Vim%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/07/10/linux/Vim%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>一直觉得linux相比于windows系统不知好用了多少倍，第一是linux的<code>terminal</code>终端，第二是linux安装软件太方便了，所以我个人对于linux简直是爱不释手。不过现在Windows10好像也引入了终端吧。而且德国等好几个国家也在从Windows系统切换到linux系统，足以说明了linux的强大。毕竟我们在用git等工具的时候可不想在去安装什么git工具。直接几个命令搞定的事情不是很好嘛。</p><a id="more"></a><p>对于会linux的同学来说，vim的使用更是家常便饭了，所以提高vim的编辑效率是很有必要的。比较如果一篇文章很长我们不可能通过上下左右去移动光标到我们想要的位置，对吧。</p><h1 id="2-Vim介绍及快捷键"><a href="#2-Vim介绍及快捷键" class="headerlink" title="2.Vim介绍及快捷键"></a>2.Vim介绍及快捷键</h1><h2 id="2-1-vim的几种模式"><a href="#2-1-vim的几种模式" class="headerlink" title="2.1 vim的几种模式"></a>2.1 vim的几种模式</h2><p>vim总共有四种模式，首次打开处于正常模式中。</p><ul><li><p>正常模式(Normal-mode)<br>启动vim后默认处于正常模式。不论位于什么模式，按下<code>esc</code>键(有时需要按两下）都会进入正常模式。</p></li><li><p>插入模式(Insert-mode)<br>在正常模式中按下<code>i</code>,<code>I</code>,<code>a</code>,<code>A</code>等键，会进入插入模式。现在只用记住按<code>i</code>键会进行插入模式。在插入模式中，击键时会写入相应的字符。</p></li><li><p>命令模式(Command-mode)<br>在正常模式中，按下<code>:</code>（英文冒号）键，会进入命令模式。在命令模式中可以执行一些输入并执行一些vim或插件提供的指令，就像在shell里一样。这些指令包括设置环境、文件操作、调用某个功能等等。</p></li></ul><p>常用的命令有：<code>:q</code>（退出）、<code>:q!</code>（强制退出不保存）、<code>:w</code>（保存）、<code>:wq</code>（保存并退出）。</p><ul><li>可视模式(Visual-mode)<br>在正常模式中按下<code>v</code>, <code>V</code>, <code>Ctrl</code>+<code>v</code>，可以进入可视模式。可视模式中的操作有点像拿鼠标进行操作，选择文本的时候有一种鼠标选择的即视感，有时候会很方便。</li></ul><p>我们比较常用的一般是在正常模式，插入模式，命令模式中切换，可视模式其实用到的比较少的。</p><h2 id="2-2-Vim快捷键"><a href="#2-2-Vim快捷键" class="headerlink" title="2.2 Vim快捷键"></a>2.2 Vim快捷键</h2><h3 id="2-2-1-启动vim命令（test为文件）"><a href="#2-2-1-启动vim命令（test为文件）" class="headerlink" title="2.2.1 启动vim命令（test为文件）"></a>2.2.1 启动vim命令（test为文件）</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left"><code>vim -r file</code></td><td align="left">恢复上次异常退出的文件</td><td align="left"><code>vim -r test</code></td></tr><tr><td align="left"><code>vim -R file</code></td><td align="left">以只读的方式打开文件，但可以强制保存</td><td align="left"><code>vim -R test</code></td></tr><tr><td align="left"><code>vim -M file</code></td><td align="left">以只读的方式打开文件，不可以强制保存</td><td align="left"><code>vim -M test</code></td></tr><tr><td align="left"><code>vim + file</code></td><td align="left">从文件的末尾开始</td><td align="left"><code>vim + test</code></td></tr><tr><td align="left"><code>vim +num file</code></td><td align="left">从第num行开始</td><td align="left"><code>vim +4 test</code></td></tr><tr><td align="left"><code>vim +/string file</code></td><td align="left">打开file，并将光标停留在第一个找到的string的行首</td><td align="left"><code>vim +/string file</code></td></tr></tbody></table><h3 id="2-2-2-文档操作命令"><a href="#2-2-2-文档操作命令" class="headerlink" title="2.2.2 文档操作命令"></a>2.2.2 文档操作命令</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>:set nu</code></td><td align="left">显示行号</td></tr><tr><td align="left"><code>:set nonu</code></td><td align="left">不显示行号</td></tr><tr><td align="left"><code>:q</code></td><td align="left">退出，如果有修改不能退出</td></tr><tr><td align="left"><code>:q!</code></td><td align="left">强制退出，但不保存</td></tr><tr><td align="left"><code>:w</code></td><td align="left">保存</td></tr><tr><td align="left"><code>:wq</code> 或 <code>ZZ</code> 或 <code>:x</code></td><td align="left">保存并退出</td></tr><tr><td align="left"><code>:saveas newfile.txt</code></td><td align="left">另存为新的文件newfile.txt</td></tr><tr><td align="left"><code>:f</code> 或 <code>control</code> +<code>g</code></td><td align="left">显示文档名，是否修改，和光标处于第几行</td></tr><tr><td align="left"><code>:e</code></td><td align="left">重新加载当前文档，如果有修改则失败，必须保存或丢弃</td></tr><tr><td align="left"><code>:e!</code></td><td align="left">重新加载当前文档，并丢弃已做的改动</td></tr></tbody></table><h3 id="2-2-3-光标移动-所有操作命令都是在正常模式下"><a href="#2-2-3-光标移动-所有操作命令都是在正常模式下" class="headerlink" title="2.2.3 光标移动(所有操作命令都是在正常模式下)"></a>2.2.3 光标移动(所有操作命令都是在正常模式下)</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>h</code> 或 <code>Backspace</code>键</td><td align="left">左移一个字符 可配合数字使用 如: <code>2h</code></td></tr><tr><td align="left"><code>l</code> 或 <code>space</code></td><td align="left">右移一个字符 可配合数字使用 如: <code>3l</code></td></tr><tr><td align="left"><code>j</code></td><td align="left">下移一行</td></tr><tr><td align="left"><code>k</code></td><td align="left">上移一行</td></tr><tr><td align="left"><code>gj</code></td><td align="left">移动到一段内的下一行</td></tr><tr><td align="left"><code>gk</code></td><td align="left">移动到一段内的上一行</td></tr><tr><td align="left"><code>+</code> 或 <code>Enter</code></td><td align="left">把光标移至下一行第一个非空白字符</td></tr><tr><td align="left"><code>-</code></td><td align="left">把光标移至上一行第一个非空白字符</td></tr><tr><td align="left"><code>w</code></td><td align="left">前移一个单词，光标停在下一个单词开头</td></tr><tr><td align="left"><code>e</code></td><td align="left">前移一个单词，光标停在下一个单词末尾</td></tr><tr><td align="left"><code>W</code></td><td align="left">移动下一个单词开头，但忽略一些标点</td></tr><tr><td align="left"><code>E</code></td><td align="left">移动到下一个单词末尾，如果词尾有标点，则移动到标点</td></tr><tr><td align="left"><code>b</code></td><td align="left">后移一个单词，光标停在上一个单词开头</td></tr><tr><td align="left"><code>B</code></td><td align="left">移动到上一个单词开头，忽略一些标点</td></tr><tr><td align="left"><code>ge</code></td><td align="left">后移一个单词，光标停在上一个单词末尾</td></tr><tr><td align="left"><code>gE</code></td><td align="left">同<code>ge</code> ，不过单词包含单词相邻的标点</td></tr><tr><td align="left"><code>(</code> 或 <code>{</code></td><td align="left">向前移动到段落开头</td></tr><tr><td align="left"><code>)</code> 或 <code>}</code></td><td align="left">向后移动到段落末尾</td></tr><tr><td align="left"><code>0</code></td><td align="left">移动到行首</td></tr><tr><td align="left"><code>g0</code></td><td align="left">移到光标所在屏幕行行首，针对一行太长的情况</td></tr><tr><td align="left"><code>^</code></td><td align="left">移动到本行第一个非空白字符</td></tr><tr><td align="left"><code>g^</code></td><td align="left">移动到当前屏幕行第一个非空字符处，针对一行太长的情况</td></tr><tr><td align="left"><code>$</code></td><td align="left">移动到行尾</td></tr><tr><td align="left"><code>g$</code></td><td align="left">移动光标所在屏幕行行尾</td></tr><tr><td align="left"><code>H</code></td><td align="left">把光标移到屏幕最顶端一行</td></tr><tr><td align="left"><code>M</code></td><td align="left">把光标移到屏幕中间一行</td></tr><tr><td align="left"><code>L</code></td><td align="left">把光标移到屏幕最底端一行</td></tr><tr><td align="left"><code>gg</code></td><td align="left">移动到文件头部</td></tr><tr><td align="left"><code>G</code></td><td align="left">移动到文件尾部</td></tr><tr><td align="left"><code>nG</code></td><td align="left">移动到文件第n行</td></tr></tbody></table><h3 id="2-2-4-翻屏"><a href="#2-2-4-翻屏" class="headerlink" title="2.2.4 翻屏"></a>2.2.4 翻屏</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>ctrl</code> + <code>f</code></td><td align="left">下翻一屏</td></tr><tr><td align="left"><code>ctrl</code> + <code>b</code></td><td align="left">上翻一屏</td></tr><tr><td align="left"><code>ctrl</code> + <code>d</code></td><td align="left">下翻半屏</td></tr><tr><td align="left"><code>ctrl</code> + <code>u</code></td><td align="left">上翻半屏</td></tr><tr><td align="left"><code>ctrl</code> + <code>e</code></td><td align="left">向下滚动一行</td></tr><tr><td align="left"><code>ctrl</code> + <code>y</code></td><td align="left">向上滚动一行</td></tr><tr><td align="left"><code>n%</code></td><td align="left">到文件n%的位置</td></tr><tr><td align="left"><code>zz</code></td><td align="left">将当前行移动到屏幕中央</td></tr><tr><td align="left"><code>zt</code></td><td align="left">将当前行移动到屏幕顶端</td></tr><tr><td align="left"><code>zb</code></td><td align="left">将当前行移动到屏幕底端</td></tr></tbody></table><h3 id="2-2-5-查找"><a href="#2-2-5-查找" class="headerlink" title="2.2.5 查找"></a>2.2.5 查找</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>/内容</code></td><td align="left">在后面的文本中查找<code>内容</code>，<code>n</code>向后查找下一个，<code>N</code>向前查找下一个</td></tr><tr><td align="left"><code>?内容</code></td><td align="left">在前面的文本中查找<code>内容</code>，<code>n</code>向后查找下一个，<code>N</code>向前查找下一个</td></tr><tr><td align="left"><code>/内容/+number</code></td><td align="left">将光标停在包含<code>内容</code>的行后面第number行上，<code>n</code>向后查找下一个，<code>N</code>向前查找下一个</td></tr><tr><td align="left"><code>/内容/-number</code></td><td align="left">将光标停在包含<code>内容</code>的行前面第number行上，<code>n</code>向后查找下一个，<code>N</code>向前查找下一个</td></tr></tbody></table><h3 id="2-2-6-替换"><a href="#2-2-6-替换" class="headerlink" title="2.2.6 替换"></a>2.2.6 替换</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>:s/old/new</code></td><td align="left">用new替换当前行第一个old</td></tr><tr><td align="left"><code>:s/old/new/g</code></td><td align="left">用new替换当前行所有的old</td></tr><tr><td align="left"><code>:n1,n2s/old/new/g</code></td><td align="left">用new替换文件n1行到n2行所有的old</td></tr><tr><td align="left"><code>:%s/old/new/g</code></td><td align="left">用new替换文件中所有的old</td></tr><tr><td align="left"><code>:%s/^/xxx/g</code></td><td align="left">在每一行的行首插入xxx，^表示行首</td></tr><tr><td align="left"><code>:%s/$/xxx/g</code></td><td align="left">在每一行的行尾插入xxx，$表示行尾</td></tr></tbody></table><p>所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。</p><h3 id="2-2-7-撤销与重做"><a href="#2-2-7-撤销与重做" class="headerlink" title="2.2.7 撤销与重做"></a>2.2.7 撤销与重做</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>[n] u</code></td><td align="left">取消一(n)个改动</td></tr><tr><td align="left"><code>:undo 5</code></td><td align="left">撤销5个改变</td></tr><tr><td align="left"><code>:undolist</code></td><td align="left">你的撤销历史</td></tr><tr><td align="left"><code>ctrl + r</code></td><td align="left">重做最后的改动</td></tr><tr><td align="left"><code>U</code></td><td align="left">取消当前行中所有的改动</td></tr><tr><td align="left"><code>:earlier 5m</code></td><td align="left">回到5分钟前</td></tr><tr><td align="left"><code>:later 30s</code></td><td align="left">前进30秒</td></tr></tbody></table><h3 id="2-2-8-剪切，复制和粘贴"><a href="#2-2-8-剪切，复制和粘贴" class="headerlink" title="2.2.8 剪切，复制和粘贴"></a>2.2.8 剪切，复制和粘贴</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>[n]x</code></td><td align="left">剪切光标右边n个字符，相当于d[n]l</td></tr><tr><td align="left"><code>[n]X</code></td><td align="left">剪切光标左边n个字符，相当于d[n]h</td></tr><tr><td align="left"><code>yy</code> 或 <code>Y</code></td><td align="left">复制整行文本</td></tr><tr><td align="left"><code>y[n]w</code></td><td align="left">复制一(n)个词</td></tr><tr><td align="left"><code>y[n]l</code></td><td align="left">复制光标右边1(n)个字符</td></tr><tr><td align="left"><code>y[n]h</code></td><td align="left">复制光标左边1(n)个字符</td></tr><tr><td align="left"><code>y$</code></td><td align="left">从光标当前位置复制到行尾</td></tr><tr><td align="left"><code>y0</code></td><td align="left">从光标当前位置复制到行首</td></tr><tr><td align="left"><code>y1G</code> 或 <code>ygg</code></td><td align="left">复制光标以上的所有行</td></tr><tr><td align="left"><code>yG</code></td><td align="left">复制光标以下的所有行</td></tr><tr><td align="left"><code>yaw</code> 或 <code>yas</code></td><td align="left">复制一个词和复制一个句子，即使光标不在词首和句首也没关系</td></tr><tr><td align="left"><code>d</code></td><td align="left">删除（剪切）在可视模式下选中的文本。</td></tr><tr><td align="left"><code>d$</code> 或 <code>D</code></td><td align="left">删除（剪切）当前位置到行尾的内容。</td></tr><tr><td align="left"><code>d[n]w</code></td><td align="left">删除（剪切）1(n)个单词</td></tr><tr><td align="left"><code>d[n]l</code></td><td align="left">删除（剪切）光标右边1(n)个字符。</td></tr><tr><td align="left"><code>d[n]h</code></td><td align="left">删除（剪切）光标左边1(n)个字符。</td></tr><tr><td align="left"><code>d0</code></td><td align="left">删除（剪切）当前位置到行首的内容</td></tr><tr><td align="left"><code>[n] dd</code></td><td align="left">删除（剪切）1(n)行。</td></tr><tr><td align="left"><code>d1G</code> 或 <code>dgg</code></td><td align="left">剪切光标以上的所有行。</td></tr><tr><td align="left"><code>dG</code></td><td align="left">剪切光标以下的所有行。</td></tr><tr><td align="left"><code>daw</code> 或 <code>das</code></td><td align="left">剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。</td></tr><tr><td align="left"><code>p</code></td><td align="left">在光标之后粘贴。</td></tr><tr><td align="left"><code>P</code></td><td align="left">在光标之前粘贴</td></tr></tbody></table><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>如果能够熟练掌握以上命令，那么在使用vim编辑文件时的效率至少能提升5倍以上。真的不是夸大其词。如果是常用linux那么vim基本命令将是不可或缺的。等你熟练运用的时候就会知道我所言非虚。</p><p>加油吧。</p><blockquote><p>天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git回滚到分支指定版本</title>
      <link href="/2019/07/08/git/Git%E5%9B%9E%E6%BB%9A%E5%88%B0%E5%88%86%E6%94%AF%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/"/>
      <url>/2019/07/08/git/Git%E5%9B%9E%E6%BB%9A%E5%88%B0%E5%88%86%E6%94%AF%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>在合并代码的时候，我们会尽量保证不会出现错误，但是这种情况是不能避免的，这一次我就遇到了一个问题，在合并代码的是后将其他的将其他人的代码合并没有了，想回到合并前的某一个commit,我是借助sourcetree操作的，但是发现操作的过程其实是相当麻烦，也许是我永不习惯吧，还是用回我擅长的命令行操作。</p><a id="more"></a><h1 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2.操作步骤"></a>2.操作步骤</h1><p>操作步骤其实很简单，首先获取到commit ID 然后回滚到这个版本，最后提交到远程分支，仅此三步，用命令还是很简单的。</p><ul><li>获取commit ID<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>通过上面的命令可以获取到commit ID，通过<code>空格键</code>翻页，如果想退出直接按键盘<code>q</code>键即可。</li></ul><ul><li><p>回滚到知道的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;commit ID号&gt;</span><br></pre></td></tr></table></figure><p>尖括号中的就是上面查询到的ID，例如: <code>git reset --hard af3b5661f84da994dc29790ce838ebec5e6c5f0e</code></p></li><li><p>提交到远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -f origin &lt;branch name&gt;</span><br></pre></td></tr></table></figure><p>尖括号中填写要推倒的远程分支名即可，例如：<code>git push -f origin develop</code></p></li></ul><h1 id="3-结语"><a href="#3-结语" class="headerlink" title="3.结语"></a>3.结语</h1><p>会滚到指定的分支这个操作其实在很多情况下还是需要的，所以知道如何操作还会大量节省我们再去查阅相关资料的时间。</p><blockquote><p>天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker搭建ES和kibana环境</title>
      <link href="/2019/07/05/docker/Docker-%E6%90%AD%E5%BB%BAes%E5%92%8Ckibana%E7%8E%AF%E5%A2%83/"/>
      <url>/2019/07/05/docker/Docker-%E6%90%AD%E5%BB%BAes%E5%92%8Ckibana%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>现在elasticsearch是比较火的，很多公司都在用，所以如果说还不知道es可能就会被人鄙视了。所以这里我就下决心来学习es，我比较钟爱于docker所有也就使用了docker来安装es，这里会详细介绍下安装的细节以及需要注意的地方。这里我使用的电脑是MacBook Pro 如果是linux的话其实基本相同，如果是Windows的话，可能就不太一样了，这里我也没有实际操作过，感兴趣的也可以自己去尝试一下。</p><a id="more"></a><h1 id="2-es安装"><a href="#2-es安装" class="headerlink" title="2.es安装"></a>2.es安装</h1><h2 id="2-1-docker安装es"><a href="#2-1-docker安装es" class="headerlink" title="2.1 docker安装es"></a>2.1 docker安装es</h2><p>要使用es肯定是需要安装的，由于用惯了docker，所以也想在docker上尝试一下，主要是因为我的好多软件都以及选择了docker。docker安装其实是很简单的，至于要一行命令即可。这里我选择的是es的7.2.0版本镜像镜像安装，具体安装命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull elasticsearch:7.2.0</span><br></pre></td></tr></table></figure><p>敲完命令以后回车，只需要等带镜像下载完成就可以了。</p><h2 id="2-2-启动es"><a href="#2-2-启动es" class="headerlink" title="2.2 启动es"></a>2.2 启动es</h2><p>安装完成以后当然需要去启动我们的es了，这里启动也是很方便的只需要一行命令即可。如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">"discovery.type=single-node"</span> -d elasticsearch:7.2.0</span><br></pre></td></tr></table></figure><p>这样es就启动好了。我们可以去检查es是否安装完成，可以输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:9200</span><br></pre></td></tr></table></figure><p>或者在浏览器中打开<a href="http://localhost:9200" target="_blank" rel="noopener">http://localhost:9200</a>这个网址，如果能看到以下信息则说明我们的es是已经安装好了的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"530dd7820315"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"docker-cluster"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"7O0fjpBJTkmn_axwmZX0RQ"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.2.0"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"508c38a"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2019-06-20T15:54:18.811730Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.0.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你是在服务器上安装，想要对外访问还必须打开你服务器的9200端口，然后将localhost换成你服务器的ip地址即可。</p><h2 id="2-3-修改配置，解决跨域访问问题"><a href="#2-3-修改配置，解决跨域访问问题" class="headerlink" title="2.3 修改配置，解决跨域访问问题"></a>2.3 修改配置，解决跨域访问问题</h2><p>首先进入到容器中，然后进入到指定目录修改<code>elasticsearch.yml</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it elasticsearch /bin/bash</span><br><span class="line">$ <span class="built_in">cd</span> /usr/share/elasticsearch/config/</span><br><span class="line">$ vi elasticsearch.yml</span><br></pre></td></tr></table></figure><p>在elasticsearch.yml的文件末尾加上:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>修改配置后重启容器即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker restart elasticsearch</span><br></pre></td></tr></table></figure><h2 id="2-4-安装ik分词器"><a href="#2-4-安装ik分词器" class="headerlink" title="2.4 安装ik分词器"></a>2.4 安装ik分词器</h2><p>es自带的分词器对中文分词不是很友好，所以我们下载开源的IK分词器来解决这个问题。首先进入到plugins目录中下载分词器，下载完成后然后解压，再重启es即可。具体步骤如下:<br><strong>注意：</strong>elasticsearch的版本和ik分词器的版本需要保持一致，不然在重启的时候会失败。可以在这查看所有版本，选择合适自己版本的右键复制链接地址即可。<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">点击这里</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/share/elasticsearch/plugins/</span><br><span class="line">$ elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.2.0/elasticsearch-analysis-ik-7.2.0.zip</span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">$ docker restart elasticsearch</span><br></pre></td></tr></table></figure><p>然后可以在kibana界面的<code>dev tools</code>中验证是否安装成功；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="built_in">test</span>/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"你好我是东邪Jiafly"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不添加<code>&quot;analyzer&quot;: &quot;ik_max_word&quot;,</code>则是每个字分词，可以在下面kibana安装完成以后尝试一下。</p><h1 id="3-kibana安装"><a href="#3-kibana安装" class="headerlink" title="3.kibana安装"></a>3.kibana安装</h1><h2 id="3-1-docker安装kibana"><a href="#3-1-docker安装kibana" class="headerlink" title="3.1 docker安装kibana"></a>3.1 docker安装kibana</h2><p>同样适用docker安装kibana命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull kibana:7.2.0</span><br></pre></td></tr></table></figure><p>等待所有镜像下载完成即可。</p><h2 id="3-2-启动kibana"><a href="#3-2-启动kibana" class="headerlink" title="3.2 启动kibana"></a>3.2 启动kibana</h2><p>安装完成以后需要启动kibana容器，使用<code>--link</code>连接到elasticsearch容器，命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name kibana --link=elasticsearch:<span class="built_in">test</span>  -p 5601:5601 -d kibana:7.2.0</span><br><span class="line">$ docker start kibana</span><br></pre></td></tr></table></figure><p>启动以后可以打开浏览器输入<a href="http://localhost:5601" target="_blank" rel="noopener">http://localhost:5601</a>就可以打开kibana的界面了。</p><h1 id="4-结语"><a href="#4-结语" class="headerlink" title="4.结语"></a>4.结语</h1><p>经过以上步骤就安装好了es和kibana，是不是很简单？这就是docker的好用处之一，也是我比较钟爱docker的原因之一。当然docker远不止这些功能，更多的我们以后慢慢写到，总之肯定是都能用上的。哈哈</p><blockquote><p>天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次Spring Security造成的内存泄露</title>
      <link href="/2019/06/28/jvm/%E4%B8%80%E6%AC%A1Spring%20Security%E9%80%A0%E6%88%90%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
      <url>/2019/06/28/jvm/%E4%B8%80%E6%AC%A1Spring%20Security%E9%80%A0%E6%88%90%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>前段时间项目采用Spring Security作为权限框架应用到现有项目中，一切就那么正常的上线了，然而在上线一段时间后，服务监控就在报警，JVM内存泄露了。如是就是接下来的一段异常处理之旅。</p><a id="more"></a><h1 id="2-内存泄露解决流程"><a href="#2-内存泄露解决流程" class="headerlink" title="2.内存泄露解决流程"></a>2.内存泄露解决流程</h1><h2 id="2-1-生成线上最新的堆dump文件"><a href="#2-1-生成线上最新的堆dump文件" class="headerlink" title="2.1 生成线上最新的堆dump文件"></a>2.1 生成线上最新的堆dump文件</h2><p>使用命令jmap生成线上java程序的dump文件，我们都知道在这个文件中可以查看堆内对象示例的统计信息、查看ClassLoader的信息以及finalizer队列。</p><h2 id="2-2-使用MAT-Memory-Analyzer-Tool-打开生成的dump文件"><a href="#2-2-使用MAT-Memory-Analyzer-Tool-打开生成的dump文件" class="headerlink" title="2.2 使用MAT(Memory Analyzer Tool)打开生成的dump文件"></a>2.2 使用MAT(Memory Analyzer Tool)打开生成的dump文件</h2><p>打开后入图所示:<br><img src="/image/jvm/mat-1.jpeg" alt="MAT"></p><h2 id="2-3-MAT分析"><a href="#2-3-MAT分析" class="headerlink" title="2.3 MAT分析"></a>2.3 MAT分析</h2><p>在Histogram中会列出每个类的实例，可通过分析查出是由于Spring Security造成的问题。</p><h1 id="3-解决"><a href="#3-解决" class="headerlink" title="3.解决"></a>3.解决</h1><p>出现内存溢出的原因是因为Spring Security在用户登录的时候默认创建了session，但是用户在登录的时候又不传session，这就导致每个用户每次进入都会重新创建session，session的有效时间是30分钟，这就导致了内存泄露。最后的解决方案是在Security的配置中增加一句:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br></pre></td></tr></table></figure><p>就可以了。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h1><p>这个问题其实是归结于自己对于Spring Security不熟悉的原因导致的，解决只需一行代码，但是在问题的发现过程还是值得自己思考的。以及在解决问题时候遇到的一些问题和自己解决这些问题时候的一些经验都是有利于自己的提升，毕竟是实际遇到的问题，自己的理解方面也会大有不同。</p><blockquote><p>天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 内存泄露 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Nexus搭建Maven私服(Nexus Repository Manager 3.X)</title>
      <link href="/2019/06/27/java/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D/"/>
      <url>/2019/06/27/java/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>关于Java项目，一般的公司都会有一个自己的私服来管理各种jar包，其中可能有这么几个原因:</p><ul><li>1、不能访问外网，只能通过私服来管理jar包和插件；</li><li>2、网速比较慢，通过公司的私服来获取jar包比较快(内网)；</li><li>3、内部的的一些jar包放在私服上，比较方便的大家使用。<a id="more"></a><h1 id="2-下载与安装"><a href="#2-下载与安装" class="headerlink" title="2.下载与安装"></a>2.下载与安装</h1><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h2>这里我会选择nexus最新的3.X的版本去进行搭建。<br><a href="https://help.sonatype.com/repomanager3/download" target="_blank" rel="noopener">下载地址</a>，<br>下载可以选择对应的版本有macOS，Windows，unix等不同版本，可以根据自己需要选择。unix版本是支持linux系统的，所以这也是没有linux版本的原因。这里我选择的是unix版本3.17.0-01。</li></ul><p><strong>注意</strong>: Nexus Repository Manager 3.X是一个Java服务器应用程序，安装需要 jdk1.8以上的版本。</p><h2 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h2><p>这里我是因为从本机下载，nexus需要安装在服务器上，所以我会多出一步将本地下载文件上传至服务器的步骤。</p><h3 id="2-2-1-上传tar-gz文件至服务器-文件已在服务器可忽略"><a href="#2-2-1-上传tar-gz文件至服务器-文件已在服务器可忽略" class="headerlink" title="2.2.1 上传tar.gz文件至服务器(文件已在服务器可忽略)"></a>2.2.1 上传tar.gz文件至服务器(文件已在服务器可忽略)</h3><p>以下命令中<code>xxx.xxx.xxx.xxx</code>修改为自己服务器的ip地址即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> scp ./nexus-3.17.0-01-unix.tar.gz root@xxx.xxx.xxx.xxx:/data/nexus/</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-解压文件"><a href="#2-2-2-解压文件" class="headerlink" title="2.2.2 解压文件"></a>2.2.2 解压文件</h3><p>首先登陆进入服务器进入刚刚上传的目录，然后开始解压文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /data/nexus;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar zxvf nexus-3.17.0-01-unix.tar.gz</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-启动nexus"><a href="#2-2-3-启动nexus" class="headerlink" title="2.2.3 启动nexus"></a>2.2.3 启动nexus</h3><p>进入到解压文件的bin目录下，执行<code>./nexus run</code>命令即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp; cd /data/nexus/nexus-3.17.0-01/bin;</span><br><span class="line">&amp; nohup ./nexus run &amp;</span><br></pre></td></tr></table></figure><p>注意: 在启动时可能出现内存不足的问题，可根据一下方式解决:<br>bin目录下有一个nexus.vmoptions文件，编辑它，修改内存的参数适合你的服务器即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-访问Nexus管理后台"><a href="#3-访问Nexus管理后台" class="headerlink" title="3. 访问Nexus管理后台"></a>3. 访问Nexus管理后台</h1><p>Nexus管理后台地址的默认地址是:<a href="http://localhost:8081/" target="_blank" rel="noopener">http://localhost:8081/</a>,点击右上角Sign in登录，默认账号和密码为：admin/admin123。</p><p>在Repositories仓库管理界面中有多种默认的仓库，也可以添加新的仓库，本实例直接使用默认的仓库：<br>maven-central，Type为proxy，表示代理仓库。代理仓库用来代理远程仓库（maven-central代理的是超级POM中配置的Maven中央仓库），当在下载组件时，如果代理仓库搜索不到，则会把请求转发到远程仓库从远程仓库下载。从远程仓库下载后会缓存到代理仓库，下次还有该组件的请求则会直接到代理仓库下载，不会再次请求远程仓库。</p><p>maven-releases/maven-snapshots，Type为hosted，表示为宿主仓库。宿主仓库主要用来部署团队内部使用的内部组件，默认的maven-releases和maven-snapshots分别用来部署团队内部的发布版本组件和快照版本组件。</p><h1 id="4-配置使用"><a href="#4-配置使用" class="headerlink" title="4. 配置使用"></a>4. 配置使用</h1><h2 id="4-1-配置settings-xml"><a href="#4-1-配置settings-xml" class="headerlink" title="4.1 配置settings.xml"></a>4.1 配置settings.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 配置镜像，此处拦截所有远程仓库的请求到代理仓库--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置远程库和远程插件库--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Maven用于填充构建系统本地存储库的远程仓库集合--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 类似于repositories元素，指定Maven可以在哪里找到Maven插件的远程仓库位置--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 激活profiles配置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-创建Maven项目配置pom-xml"><a href="#4-2-创建Maven项目配置pom-xml" class="headerlink" title="4.2 创建Maven项目配置pom.xml"></a>4.2 创建Maven项目配置pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jiafly<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>libra-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>libra-api<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，执行mvn clean，执行mvn clean需要下载maven-clean-plugin插件，通过Browse界面可以看到因为执行mvn clean而下载的maven-clean-plugin.jar：</p><h2 id="4-3-配置宿主仓库"><a href="#4-3-配置宿主仓库" class="headerlink" title="4.3 配置宿主仓库"></a>4.3 配置宿主仓库</h2><p>在setting.xml文件中增加如下配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再配置pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jiafly<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>libra-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>libra-api<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行mvn clean deploy将项目打包并发布到宿主仓库，构建成功后到Browse中maven-snapshots库查看（因为项目版本为0.0.1-SNAPSHOT，是带SNAPSHOT的快照版本）。</p><p><strong>注意</strong>：maven-releases库默认不能重新发布，需要可重新发布则需要修改该仓库配置或者删除已经发布的版本。</p><p><strong>修改配置重新发布</strong>：将maven-releases库中Deployment pollcy改为Allow redeploy既可。</p><h1 id="5-结语"><a href="#5-结语" class="headerlink" title="5.结语"></a>5.结语</h1><p>Maven对于Javaer说，几乎是天天与其打交道，所以很有必要去了解如果搭建自己的Maven私服仓库。平时多培养自己的动手实践能力，才能在用到的时候不慌。</p><blockquote><p>天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Nexus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM系列-自带故障处理工具</title>
      <link href="/2019/06/27/jvm/JVM%E7%B3%BB%E5%88%97-JVM%E8%87%AA%E5%B8%A6%E5%B7%A5%E5%85%B7/"/>
      <url>/2019/06/27/jvm/JVM%E7%B3%BB%E5%88%97-JVM%E8%87%AA%E5%B8%A6%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。</p><p>我们在定位JVM的问题是往往会借助各种工具去定位JVM异常，Sun公司就提供了一些工具，这些工具的功能都十分强大，能帮助我们定位故障问题，解决程序性能等问题。</p><a id="more"></a><h1 id="2-JVM自带命令行工具"><a href="#2-JVM自带命令行工具" class="headerlink" title="2.JVM自带命令行工具"></a>2.JVM自带命令行工具</h1><p>Sum公司提供提供的JVM监控和故障处理工具主要是下表列出的几个，我们在了解了它们的使用之后能为我们带来极大的便利，当然现在很多公司也为我们提供了很多图形化的工具，如：JProfile等，但是我还是觉得了解JDK自带的工具还是很有必要的，毕竟JProfile也是收费的，我在使用JProfile的时候就因为激活码的问题而折腾了好久，最终好像只有JProfile 9版本的才能使用网上的激活码免费使用。</p><table><thead><tr><th align="center"><strong>名称</strong></th><th align="left"><strong>主要作用</strong></th></tr></thead><tbody><tr><td align="center">jps</td><td align="left">JVM process Status Tool，显示系统内所有的HotSpot虚拟机进程</td></tr><tr><td align="center">jstat</td><td align="left">JVM Statistics Monitoring Tool，用于手机HotSpot虚拟机各方面的运行数据</td></tr><tr><td align="center">jinfo</td><td align="left">Configuration Info for Java，显示虚拟机配置信息</td></tr><tr><td align="center">jmap</td><td align="left">Memory Map for Java，生成虚拟机内存转储快照（heapdump文件）</td></tr><tr><td align="center">jhat</td><td align="left">JVM Heap Dump Browser，用户分析heapdump文件，它会建立一个HTTP/HTML服务器，让用户可以在浏览器上查看分析结果</td></tr><tr><td align="center">jstack</td><td align="left">Stack Trace for Java，显示虚拟机线程快照</td></tr></tbody></table><h2 id="2-1-jps命令"><a href="#2-1-jps命令" class="headerlink" title="2.1 jps命令"></a>2.1 <strong>jps</strong>命令</h2><p>用与获取java进程的LVMID，对于本地虚拟机来说LVMID和PID是相同的。这个命令是基础，许多命令都是依赖这个命令输出的PID才能操作。所以比较重要。</p><ul><li>命令格式<blockquote><p>jps [options] <pid></p></blockquote></li><li>命令参数</li></ul><table><thead><tr><th align="center"><strong>参数</strong></th><th align="left"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center">-q</td><td align="left">只输出pid 省略主类名称</td></tr><tr><td align="center">-m</td><td align="left">输出JVM进程启动是传递给主类main()函数的参数</td></tr><tr><td align="center">-l</td><td align="left">输出主类的全名，如果是Jar包，则输出Jar路径</td></tr><tr><td align="center">-v</td><td align="left">输出JVM进程启动是的参数</td></tr></tbody></table><ul><li>执行样例<br>jps -l <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">liuyi@liuyideMacBook-Pro:~$ jps -l</span><br><span class="line">568</span><br><span class="line">26985 sun.tools.jps.Jps</span><br><span class="line">26732 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">26588 org.jetbrains.idea.maven.server.RemoteMavenServer</span><br><span class="line">26733 com.jiafly.libra.LibraPayApplication</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-jstat命令"><a href="#2-2-jstat命令" class="headerlink" title="2.2 jstat命令"></a>2.2 <strong>jstat</strong>命令</h2><p>用于见识虚拟机各种运行状态信息的命令行工具。可以显示本地或者远程虚拟机进程中的类装载，内存，垃圾收集，JIT编译等运行数据。但是他没有图形界面，只能纯文本展示。</p><ul><li>命令格式<blockquote><p>jstat [option vmid [interval[s|ms] [count]]]</p></blockquote></li><li>命令参数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">liuyi@liuyideMacBook-Pro:~$ jstat -options</span><br><span class="line">-class 监视类装载，卸载数量，总空间以及类装载所消耗的时间</span><br><span class="line">-compiler 输出JIT编译器编译过的方法，耗时信息</span><br><span class="line">-gc 监视Java堆，Eden区 S0,S1 元空间等容量信息</span><br><span class="line">-gccapacity 与-gc基本相同，但主要关注Java堆各个区域使用到的最大 最小空间</span><br><span class="line">-gccause 与-gcutil功能一样，但是会输出导致上一次GC产生的原因</span><br><span class="line">-gcmetacapacity 元空间使用到的最大 最小空间</span><br><span class="line">-gcnew 监视新生代GC状况</span><br><span class="line">-gcnewcapacity 新生代使用到的最大 最小空间</span><br><span class="line">-gcold 监视老年代GC状况</span><br><span class="line">-gcoldcapacity 老年代使用到的最大 最小空间</span><br><span class="line">-gcutil 监视内容与-gc基本相同，但输出主要管制已使用空间占总空间占比</span><br><span class="line">-printcompilation 输出已经被JIT编译的方法</span><br></pre></td></tr></table></figure></li><li>执行样例<br>jstat -gcutil 26733<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">liuyi@liuyideMacBook-Pro:~$ jstat -gcutil 26733</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">  0.00   0.00  15.73  26.29  96.45  94.00     10    0.109     3    0.249    0.358</span><br></pre></td></tr></table></figure><ul><li>0：幸存1区当前使用比例</li><li>S1：幸存2区当前使用比例</li><li>E：伊甸园区使用比例</li><li>O：老年代使用比例</li><li>M：元数据区使用比例</li><li>CCS：压缩使用比例</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul></li></ul><h2 id="2-3-jinfo命令"><a href="#2-3-jinfo命令" class="headerlink" title="2.3 jinfo命令"></a>2.3 <strong>jinfo</strong>命令</h2><ul><li><p>命令格式</p><blockquote><p>jinfo [option] <pid></p></blockquote></li><li><p>命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">liuyi@liuyideMacBook-Pro:~$ jinfo -h</span><br><span class="line">Usage:</span><br><span class="line">    jinfo [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jinfo [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    -flag &lt;name&gt;         to print the value of the named VM flag</span><br><span class="line">    -flag [+|-]&lt;name&gt;    to enable or disable the named VM flag</span><br><span class="line">    -flag &lt;name&gt;=&lt;value&gt; to set the named VM flag to the given value</span><br><span class="line">    -flags               to print VM flags</span><br><span class="line">    -sysprops            to print Java system properties</span><br><span class="line">    &lt;no option&gt;          to print both of the above</span><br><span class="line">    -h | -help           to print this help message</span><br></pre></td></tr></table></figure></li><li><p>执行样例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">liuyi@liuyideMacBook-Pro:~$ jinfo -flag ReservedCodeCacheSize 27043</span><br><span class="line">-XX:ReservedCodeCacheSize=251658240</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-4-jmap命令"><a href="#2-4-jmap命令" class="headerlink" title="2.4 jmap命令"></a>2.4 <strong>jmap</strong>命令</h2><ul><li><p>命令格式</p><blockquote><p>jmap [option] <pid></p></blockquote></li><li><p>命令参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">liuyi@liuyideMacBook-Pro:~$ jmap -h</span><br><span class="line">Usage:</span><br><span class="line">    jmap [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jmap [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    &lt;none&gt;               to print same info as Solaris pmap</span><br><span class="line">    -heap                to print java heap summary</span><br><span class="line">    -histo[:live]        to print histogram of java object heap; if the "live"</span><br><span class="line">                         suboption is specified, only count live objects</span><br><span class="line">    -clstats             to print class loader statistics</span><br><span class="line">    -finalizerinfo       to print information on objects awaiting finalization</span><br><span class="line">    -dump:&lt;dump-options&gt; to dump java heap in hprof binary format</span><br><span class="line">                         dump-options:</span><br><span class="line">                           live         dump only live objects; if not specified,</span><br><span class="line">                                        all objects in the heap are dumped.</span><br><span class="line">                           format=b     binary format</span><br><span class="line">                           file=&lt;file&gt;  dump heap to &lt;file&gt;</span><br><span class="line">                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;</span><br><span class="line">    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo</span><br><span class="line">                         to force a heap dump or histogram when &lt;pid&gt; does not</span><br><span class="line">                         respond. The "live" suboption is not supported</span><br><span class="line">                         in this mode.</span><br><span class="line">    -h | -help           to print this help message</span><br><span class="line">    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system</span><br></pre></td></tr></table></figure></li><li><p>执行样例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=eclipse.bin 3500</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-5-jhat命令"><a href="#2-5-jhat命令" class="headerlink" title="2.5 jhat命令"></a>2.5 <strong>jhat</strong>命令</h2><p>与jmap搭配使用，用来分析jmap生成的dump文件。内置了HTTP/HTML服务器，可以在浏览器中查看。</p><ul><li>执行样例<br>jhat eclipse.bin<br>执行后屏幕显示“Server is ready.”然后再浏览器输入<a href="http://localhost:7000" target="_blank" rel="noopener">http://localhost:7000</a>就可以看到分析结果。</li></ul><h2 id="2-6-jstack命令"><a href="#2-6-jstack命令" class="headerlink" title="2.6 jstack命令"></a>2.6 <strong>jstack</strong>命令</h2><p>Java堆栈跟踪工具，用于生成虚拟机当前时刻的线程快照。用于定位线程出现长时间停顿的原因，如：线程间死锁，死循环，请求外部资源导致长时间等待等。</p><ul><li>命令格式<br>jstack [option] pid</li><li>命令参数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">liuyi@liuyideMacBook-Pro:~$ jstack -h</span><br><span class="line">Usage:</span><br><span class="line">    jstack [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to a hung process)</span><br><span class="line">    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to a remote debug server)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -F  to force a thread dump. Use when jstack &lt;pid&gt; does not respond (process is hung)</span><br><span class="line">    -m  to print both java and native frames (mixed mode)</span><br><span class="line">    -l  long listing. Prints additional information about locks</span><br><span class="line">    -h or -help to print this help message</span><br></pre></td></tr></table></figure></li><li>执行样例<br>jstack -l 27043</li></ul><h1 id="3-JVM自带可视化工具"><a href="#3-JVM自带可视化工具" class="headerlink" title="3.JVM自带可视化工具"></a>3.JVM自带可视化工具</h1><p>JVM自带的可视化工具在分析JVM问题的时候还是很有用处的，能够直观的从图形界面看出变化。方便我们能快速定位到JVM的问题。</p><h2 id="3-1-JConsole-Java监视与管理控制台"><a href="#3-1-JConsole-Java监视与管理控制台" class="headerlink" title="3.1 JConsole: Java监视与管理控制台"></a>3.1 JConsole: Java监视与管理控制台</h2><h2 id="3-2-VisualVM-多合一故障处理工具"><a href="#3-2-VisualVM-多合一故障处理工具" class="headerlink" title="3.2 VisualVM: 多合一故障处理工具"></a>3.2 VisualVM: 多合一故障处理工具</h2>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMeter基础使用指南</title>
      <link href="/2019/06/21/test/JMeter%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2019/06/21/test/JMeter%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>最近开发完项目需要对接口进行压力测试，于是就想到了JMeter,正好借此机会对JMeter的安装使用流程记录一下，既可以加深自己的记忆，也能在之后别人咨询的时候有文章可供其参考。</p><a id="more"></a><h1 id="2-JMeter安装"><a href="#2-JMeter安装" class="headerlink" title="2.JMeter安装"></a>2.JMeter安装</h1><h2 id="2-1-下载JMeter"><a href="#2-1-下载JMeter" class="headerlink" title="2.1 下载JMeter"></a>2.1 下载JMeter</h2><p>使用工具之前肯定是需要安装的。这里提供<a href="http://jmeter.apache.org/" target="_blank" rel="noopener">JMeter的官网</a>，可以在<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">这里</a>下载JMeter。</p><h2 id="2-2-安装JMeter"><a href="#2-2-安装JMeter" class="headerlink" title="2.2 安装JMeter"></a>2.2 安装JMeter</h2><blockquote><p>JMeter的运行必须依赖Java环境，所以必须确保你的机器已经安装了JDK。在这里就不介绍JDK的安装了，默认你机器的JDK已经安装可以使用。</p></blockquote><p>下载JMeter以后解压到你指定的目录，我的是保存在<code>/data/utils/apache-jmeter-5.0</code>这个目录。然后进入到<code>bin</code>目录，如果是在linux或者macOS系统上直接运行<code>jmeter.sh</code>文件或者<code>jmeter</code>，但如果是在Windows系统则直接运行<code>jmeter.bat</code>文件。运行以后你可以看到JMeter就启动了。<br><img src="/image/jmeter/jmeter-main.jpg" alt="JMeter主界面"></p><p>对于英语不好的同学可以切换一下语言，如下图:<br><img src="/image/jmeter/jmeter-language.jpg" alt="JMeter切换语言"></p><p>这样JMeter就安装完成了，接下来就是使用JMeter的具体功能了。</p><h1 id="3-JMeter使用"><a href="#3-JMeter使用" class="headerlink" title="3.JMeter使用"></a>3.JMeter使用</h1><h2 id="3-1-添加线程组-用户"><a href="#3-1-添加线程组-用户" class="headerlink" title="3.1 添加线程组(用户)"></a>3.1 添加线程组(用户)</h2><p>如图右键点击Test Plan 就会弹出选择框根据选择框，如图操作添加即可。创建需要保存成jmx文件，选择文件要保存的位置即可。<br><img src="/image/jmeter/jmeter-create.jpg" alt="创建线程组"></p><h2 id="3-2-添加测试接口"><a href="#3-2-添加测试接口" class="headerlink" title="3.2 添加测试接口"></a>3.2 添加测试接口</h2><p>如下图：添加http接口<br><img src="/image/jmeter/jmeter-http.jpg" alt="添加测试接口"></p><p>在测试接口中添加接口请求信息 包括请求方式，请求地址，端口，以及参数等。<br><img src="/image/jmeter/jmeter-interface.jpg" alt="测试接口数据"></p><h2 id="3-3-添加监视器"><a href="#3-3-添加监视器" class="headerlink" title="3.3 添加监视器"></a>3.3 添加监视器</h2><p>执行完成以后我们需要知道执行结果数据，这里JMeter也提供了监视器供我们去直观的查看接口执行信息。<br><img src="/image/jmeter/jmeter-listen.jpg" alt="添加监听器"></p><h2 id="3-4-启动测试用例"><a href="#3-4-启动测试用例" class="headerlink" title="3.4 启动测试用例"></a>3.4 启动测试用例</h2><p>在JMeter最上方有一个绿色的按钮启动即可，我们也可在线程组页面修改线程数，是否一直执行等数据。</p><h1 id="4-查看执行后的数据"><a href="#4-查看执行后的数据" class="headerlink" title="4.查看执行后的数据"></a>4.查看执行后的数据</h1><p>我们在上面添加了监视器，在执行的时候我们可以切换到监视器的视图中查看执行的情况，接口的响应时间，响应状态等情况，以方便我们对程序作出合适的修改，提高效率。</p><ul><li>结果树:<br><img src="/image/jmeter/jmeter-resulttree.jpg" alt="结果树"></li><li>汇总报告:<br><img src="/image/jmeter/jmeter-result.jpg" alt="汇总报告"></li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>通过以上操作就完成了一个接口的测试了，上面演示的只是get请求，post请求的参是body，使用的格式是Json。</p><p>以上只是初步的使用了JMeter工具，在不会使用JMeter的时候我也只能自己使用脚本语言(Ruby)开启多线程去调用。相比之下，JMeter还是非常简单的，即使没有编程基础一样可以做压测，是不是很棒？</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMeter </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Orika实现Java Bean映射</title>
      <link href="/2019/05/29/java/%E4%BD%BF%E7%94%A8Orika%E5%AE%9E%E7%8E%B0Java%20Bean%E6%98%A0%E5%B0%84/"/>
      <url>/2019/05/29/java/%E4%BD%BF%E7%94%A8Orika%E5%AE%9E%E7%8E%B0Java%20Bean%E6%98%A0%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>Orika是Java Bean映射框架，可以实现从一个对象递归拷贝数据至另一个对象。这样我们可以将数据在实体，DTO，VO之间切换。关于Bean映射，其实BeanUtil中的copyProperties()方法也可以实现，但是如果名字相同类型不同的的是不能直接复制的，而orika却可以解决这个问题。</p><a id="more"></a><h1 id="1-引入orika的jar包"><a href="#1-引入orika的jar包" class="headerlink" title="1.引入orika的jar包"></a>1.引入orika的jar包</h1><p>现在用的大部分都是使用的maven文件，可以在pom.xml文件中引入下列配置即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ma.glasnost.orika<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>orika-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-创建映射工具类"><a href="#2-创建映射工具类" class="headerlink" title="2.创建映射工具类"></a>2.创建映射工具类</h1><p>之前创建没有使用单例，造成了内存溢出的情况，后来采用单例的模式，解决了这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.libra.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ma.glasnost.orika.MapperFacade;</span><br><span class="line"><span class="keyword">import</span> ma.glasnost.orika.MapperFactory;</span><br><span class="line"><span class="keyword">import</span> ma.glasnost.orika.impl.DefaultMapperFactory;</span><br><span class="line"><span class="keyword">import</span> ma.glasnost.orika.metadata.ClassMapBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 映射工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 东邪Jiafly</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MapperUtils &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认字段工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MapperFactory MAPPER_FACTORY = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认字段实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MapperFacade MAPPER_FACADE = MAPPER_FACTORY.getMapperFacade();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认字段实例集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, MapperFacade&gt; CACHE_MAPPER_FACADE_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射实体（默认字段）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toClass 映射类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    数据（对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E, T&gt; <span class="function">E <span class="title">map</span><span class="params">(Class&lt;E&gt; toClass, T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER_FACADE.map(data, toClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射实体（自定义配置）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toClass   映射类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据（对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configMap 自定义配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E, T&gt; <span class="function">E <span class="title">map</span><span class="params">(Class&lt;E&gt; toClass, T data, Map&lt;String, String&gt; configMap)</span> </span>&#123;</span><br><span class="line">        MapperFacade mapperFacade = <span class="keyword">this</span>.getMapperFacade(toClass, data.getClass(), configMap);</span><br><span class="line">        <span class="keyword">return</span> mapperFacade.map(data, toClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射集合（默认字段）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toClass 映射类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    数据（集合）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E, T&gt; <span class="function">List&lt;E&gt; <span class="title">mapAsList</span><span class="params">(Class&lt;E&gt; toClass, Collection&lt;T&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MAPPER_FACADE.mapAsList(data, toClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射集合（自定义配置）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toClass   映射类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据（集合）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configMap 自定义配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E, T&gt; <span class="function">List&lt;E&gt; <span class="title">mapAsList</span><span class="params">(Class&lt;E&gt; toClass, Collection&lt;T&gt; data, Map&lt;String, String&gt; configMap)</span> </span>&#123;</span><br><span class="line">        T t = data.stream().findFirst().orElseThrow(() -&gt; <span class="keyword">new</span> ResourceNotExistException(<span class="string">"映射集合，数据集合为空"</span>));</span><br><span class="line">        MapperFacade mapperFacade = <span class="keyword">this</span>.getMapperFacade(toClass, t.getClass(), configMap);</span><br><span class="line">        <span class="keyword">return</span> mapperFacade.mapAsList(data, toClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取自定义映射</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toClass   映射类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataClass 数据映射类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configMap 自定义配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 映射类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> &lt;E, T&gt; <span class="function">MapperFacade <span class="title">getMapperFacade</span><span class="params">(Class&lt;E&gt; toClass, Class&lt;T&gt; dataClass, Map&lt;String, String&gt; configMap)</span> </span>&#123;</span><br><span class="line">        String mapKey = dataClass.getCanonicalName() + <span class="string">"_"</span> + toClass.getCanonicalName();</span><br><span class="line">        MapperFacade mapperFacade = CACHE_MAPPER_FACADE_MAP.get(mapKey);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(mapperFacade)) &#123;</span><br><span class="line">            MapperFactory factory = <span class="keyword">new</span> DefaultMapperFactory.Builder().build();</span><br><span class="line">            ClassMapBuilder classMapBuilder = factory.classMap(dataClass, toClass);</span><br><span class="line">            configMap.forEach(classMapBuilder::field);</span><br><span class="line">            classMapBuilder.byDefault().register();</span><br><span class="line">            mapperFacade = factory.getMapperFacade();</span><br><span class="line">            CACHE_MAPPER_FACADE_MAP.put(mapKey, mapperFacade);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapperFacade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-使用映射工具类"><a href="#3-使用映射工具类" class="headerlink" title="3.使用映射工具类"></a>3.使用映射工具类</h1><p>这个工具列中主要有四个方法来根据不同需求去映射对象。</p><ul><li><p><strong>map(Class<E> toClass, T data)</strong><br>这个是普通的映射实体，主要映射命名相同的默认字段。</p></li><li><p><strong>map(Class<E> toClass, T data, Map&lt;String, String&gt; configMap)</strong><br>这是个自定义配置的映射集合，当name</p></li><li><p><strong>mapAsList(Class<E> toClass, Collection<T> data)</strong><br>这个是针对集合的映射</p></li><li><p><strong>mapAsList(Class<E> toClass, Collection<T> data, Map&lt;String, String&gt; configMap)</strong><br>这是针对集合配置并且自定义配置</p></li></ul><h1 id="4-结语"><a href="#4-结语" class="headerlink" title="4.结语"></a>4.结语</h1><p>这篇主要是针对使用Orika的使用写了一个工具类，以方便我们在需要的时候直接使用，当然如果想对Orika有一些更高级的使用，可以继续阅读Orika的源码，分析它具体的实现原理。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bean映射 </tag>
            
            <tag> Orika </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-内存结构</title>
      <link href="/2019/05/28/jvm/JVM-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
      <url>/2019/05/28/jvm/JVM-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p>对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像 C/C++程序开发程序员这样为每一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将会是一个非常艰巨的任务。</p><h1 id="2-运行时数据区域"><a href="#2-运行时数据区域" class="headerlink" title="2.运行时数据区域"></a>2.运行时数据区域</h1><p>Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。JDK 1.8 和之前的版本略有不同，下面会介绍到。</p><a id="more"></a><p><img src="/image/jvm/jvm-memory-structure.jpg" alt="jvm-memory-structure"></p><p><code>JDK 1.8</code> 同 <code>JDK 1.7</code> 相比，最大的差别就是：元数据区取代了永久代。元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：<code>元数据空间并不在 JVM 中了，而是使用本地内存</code>。</p><p><strong>线程私有的：</strong></p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li></ul><p><strong>线程共享的：</strong></p><ul><li>堆</li><li>方法区(JDK 1.8被元空间取代)</li><li>直接内存 (非运行时数据区的一部分)</li></ul><h1 id="1-程序计数器（PC-寄存器）"><a href="#1-程序计数器（PC-寄存器）" class="headerlink" title="1 程序计数器（PC 寄存器）"></a>1 程序计数器（PC 寄存器）</h1><h2 id="1-1-程序计数器的定义"><a href="#1-1-程序计数器的定义" class="headerlink" title="1.1 程序计数器的定义"></a>1.1 程序计数器的定义</h2><p>程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为<code>Undefined</code>。</p><h2 id="1-2-程序计数器的作用"><a href="#1-2-程序计数器的作用" class="headerlink" title="1.2 程序计数器的作用"></a>1.2 程序计数器的作用</h2><ul><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制。</li><li>在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。</li></ul><h2 id="1-3-程序计数器的特点"><a href="#1-3-程序计数器的特点" class="headerlink" title="1.3 程序计数器的特点"></a>1.3 程序计数器的特点</h2><ul><li>是一块较小的内存空间。</li><li>线程私有，每条线程都有自己的程序计数器。</li><li>生命周期：随着线程的创建而创建，随着线程的结束而销毁。</li><li>是唯一一个不会出现<code>OutOfMemoryError</code>的内存区域。</li></ul><h1 id="2-Java-虚拟机栈（Java-栈）"><a href="#2-Java-虚拟机栈（Java-栈）" class="headerlink" title="2 Java 虚拟机栈（Java 栈）"></a>2 Java 虚拟机栈（Java 栈）</h1><h2 id="2-1-Java-虚拟机栈的定义"><a href="#2-1-Java-虚拟机栈的定义" class="headerlink" title="2.1 Java 虚拟机栈的定义"></a>2.1 Java 虚拟机栈的定义</h2><p>Java 虚拟机栈是描述 Java 方法运行过程的内存模型。</p><p>Java 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做“栈帧”的区域，用于存放该方法运行过程中的一些信息，如：</p><ul><li>局部变量表</li><li>操作数栈</li><li>动态链接</li><li>方法出口信息</li></ul><p><img src="/image/jvm/jvm-stack.jpg" alt="jvm-stack"></p><h2 id="2-2-压栈出栈过程"><a href="#2-2-压栈出栈过程" class="headerlink" title="2.2 压栈出栈过程"></a>2.2 压栈出栈过程</h2><p>当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。</p><p>Java 虚拟机栈的栈顶的栈帧是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。</p><p>方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。</p><blockquote><p>由于Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。</p></blockquote><h2 id="2-3-Java-虚拟机栈的特点"><a href="#2-3-Java-虚拟机栈的特点" class="headerlink" title="2.3 Java 虚拟机栈的特点"></a>2.3 Java 虚拟机栈的特点</h2><ul><li>局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可。在方法运行过程中，局部变量表的大小不会发生改变。</li><li>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。<ul><li>StackOverFlowError  若 Java 虚拟机栈的大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。</li><li>OutOfMemoryError  若允许动态扩展，那么当线程请求栈时内存用完了，无法再动态扩展时，抛出 OutOfMemoryError 异常。</li></ul></li><li>Java 虚拟机栈也是线程私有，随着线程创建而创建，随着线程的结束而销毁。</li></ul><blockquote><p>出现 StackOverFlowError 时，内存空间可能还有很多。</p></blockquote><h1 id="3-本地方法栈（C-栈）"><a href="#3-本地方法栈（C-栈）" class="headerlink" title="3 本地方法栈（C 栈）"></a>3 本地方法栈（C 栈）</h1><h2 id="3-1-本地方法栈的定义"><a href="#3-1-本地方法栈的定义" class="headerlink" title="3.1 本地方法栈的定义"></a>3.1 本地方法栈的定义</h2><p>本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。</p><h2 id="3-2-栈帧变化过程"><a href="#3-2-栈帧变化过程" class="headerlink" title="3.2 栈帧变化过程"></a>3.2 栈帧变化过程</h2><p>本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、动态链接、方法出口信息等。</p><p>方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMemoryError 异常。</p><blockquote><p>如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。</p></blockquote><h1 id="4-堆"><a href="#4-堆" class="headerlink" title="4 堆"></a>4 堆</h1><h2 id="4-1-堆的定义"><a href="#4-1-堆的定义" class="headerlink" title="4.1 堆的定义"></a>4.1 堆的定义</h2><p>堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。</p><h2 id="4-2-堆的特点"><a href="#4-2-堆的特点" class="headerlink" title="4.2 堆的特点"></a>4.2 堆的特点</h2><ul><li>线程共享，整个 Java 虚拟机只有一个堆，所有的线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。</li><li>在虚拟机启动时创建。</li><li>是垃圾回收的主要场所。</li><li>进一步可分为：新生代(Eden区  From Survior  To Survivor)、老年代。</li></ul><p>不同的区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。</p><p>堆的大小既可以固定也可以扩展，但对于主流的虚拟机，堆的大小是可扩展的，因此当线程请求分配内存，但堆已满，且内存已无法再扩展时，就抛出 OutOfMemoryError 异常。</p><blockquote><p>Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。</p></blockquote><h1 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5 方法区"></a>5 方法区</h1><h2 id="5-1-方法区的定义"><a href="#5-1-方法区的定义" class="headerlink" title="5.1 方法区的定义"></a>5.1 方法区的定义</h2><p>Java 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放以下信息：  </p><ul><li>已经被虚拟机加载的类信息</li><li>常量</li><li>静态变量</li><li>即时编译器编译后的代码</li></ul><h2 id="5-2-方法区的特点"><a href="#5-2-方法区的特点" class="headerlink" title="5.2 方法区的特点"></a>5.2 方法区的特点</h2><ul><li>线程共享。  方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享的。整个虚拟机中只有一个方法区。</li><li>永久代。  方法区中的信息一般需要长期存在，而且它又是堆的逻辑分区，因此用堆的划分方法，把方法区称为“永久代”。</li><li>内存回收效率低。  方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。</li><li>Java 虚拟机规范对方法区的要求比较宽松。  和堆一样，允许固定大小，也允许动态扩展，还允许不实现垃圾回收。</li></ul><h2 id="5-3-运行时常量池"><a href="#5-3-运行时常量池" class="headerlink" title="5.3 运行时常量池"></a>5.3 运行时常量池</h2><p>方法区中存放：类信息、常量、静态变量、即时编译器编译后的代码。常量就存放在运行时常量池中。</p><p>当类被 Java 虚拟机加载后， .class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的 intern() 方法就能在运行期间向常量池中添加字符串常量。</p><h1 id="6-直接内存（堆外内存）"><a href="#6-直接内存（堆外内存）" class="headerlink" title="6 直接内存（堆外内存）"></a>6 直接内存（堆外内存）</h1><p>直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。</p><h2 id="6-1-操作直接内存"><a href="#6-1-操作直接内存" class="headerlink" title="6.1 操作直接内存"></a>6.1 操作直接内存</h2><p>在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的<code>DirectByteBuffer</code>对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提高了数据操作的效率。</p><p>直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。</p><h2 id="6-2-直接内存与堆内存比较"><a href="#6-2-直接内存与堆内存比较" class="headerlink" title="6.2 直接内存与堆内存比较"></a>6.2 直接内存与堆内存比较</h2><ul><li>直接内存申请空间耗费更高的性能</li><li>直接内存读取 IO 的性能要优于普通的堆内存。</li><li>直接内存作用链： 本地 IO -&gt; 直接内存 -&gt; 本地 IO</li><li>堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO</li></ul><blockquote><p>服务器管理员在配置虚拟机参数时，会根据实际内存设置<code>-Xmx</code>等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制，从而导致动态扩展时出现<code>OutOfMemoryError</code>异常。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JVM内存结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM系列-垃圾回收(GC)</title>
      <link href="/2019/05/27/jvm/JVM%E7%B3%BB%E5%88%97-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6(GC)/"/>
      <url>/2019/05/27/jvm/JVM%E7%B3%BB%E5%88%97-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6(GC)/</url>
      
        <content type="html"><![CDATA[<h1 id="1-GC概述"><a href="#1-GC概述" class="headerlink" title="1.GC概述"></a>1.GC概述</h1><p>一说到GC我们就很容易的联想到了Java，并把它当做是Java的附属。其实不然，GC的历史早在1960年的Lisp语言上就被使用，所以它的产生比Java还早，只能说Java借鉴了这种技术，并且有更多的实现算法。</p><a id="more"></a><h2 id="1-1-什么是GC"><a href="#1-1-什么是GC" class="headerlink" title="1.1 什么是GC"></a>1.1 什么是GC</h2><p><strong>GC</strong>(Garbage Collection) 从字面意思上看就是<code>垃圾收集</code>的意思。这里的垃圾也就是在系统运行过程中所产生的一些已经无用的对象，而这些无用的对象是占据着一点的内存空间的，如果这些对象不及时被释放掉，长此以往，就会导致内存用完，也就是内存溢出。垃圾回收就是保证这些无用的对象能够及时的被回收，保证系统的正常运行。在Java中GC的作用的对象主要是堆和永久区的无用对象。</p><h2 id="1-2-GC的优点"><a href="#1-2-GC的优点" class="headerlink" title="1.2 GC的优点"></a>1.2 GC的优点</h2><p>在C和C++语言中主要是由程序员手动去管理内存释放垃圾的回收，但是在Java语言则实现了许多垃圾回收算法，JVM能够自动回收无用对象，而不需要有Javaer手动去操作。这样大大提升了我们在写代码时候的效率，因为不需要过多的去考虑内存的使用情况了，注意：这里是<code>不需要过多</code>而不是不需要考虑，对于Java进阶者来说JVM的调优也是相当重要的。</p><h1 id="2-对象已死？"><a href="#2-对象已死？" class="headerlink" title="2.对象已死？"></a>2.对象已死？</h1><p>我们都知道无用的对象将会被GC，但是如何确定一个对象是无用对象呢，在这里Java主要有三种方法。</p><ul><li><strong>引用计数法</strong></li><li><strong>可达性分析算法</strong></li><li><strong>回收方法区</strong></li></ul><h2 id="2-1-引用计数法"><a href="#2-1-引用计数法" class="headerlink" title="2.1 引用计数法"></a>2.1 引用计数法</h2><p>引用计数法是垃圾回收器的早期策略。在这个方法中堆中的每个对象都有一个计数，当被引用时计数+1 当失去一个引用时就+1。任何一个引用计数为0的对象都会被垃圾回收。</p><p>这种算法也存在两个问题:</p><ul><li>频繁的对对象计数+1或者-1操作，影响性能</li><li>循环引用问题<br>  例如:当一个对象A被根节点R引用，然后A又被B引用，B被C引用，C又被A引用，这样ABC三个对象就是循环引用，A的引用计数为2 当根节点不再引用A的时候 A对象其实在内存中也没什么作用了，但是此时A的引用计数还是1，不可能被回收，所以内存就得不到释放。</li></ul><h2 id="2-2-可达性分析法"><a href="#2-2-可达性分析法" class="headerlink" title="2.2 可达性分析法"></a>2.2 可达性分析法</h2><p>可达性分析算法是从离散数学中的图论引入的，程序把所有的引用关系看作一张图，从一个节点GC ROOT开始，寻找对应的引用节点，找到这个节点以后，继续寻找这个节点的引用节点，当所有的引用节点寻找完毕之后，剩余的节点则被认为是没有被引用到的节点，即无用的节点，无用的节点将会被判定为是可回收的对象。</p><p>在Java语言中，可作为GC Root的对象包括下面几种：</p><ul><li>a.虚拟机栈中引用的对象（栈帧中的本地变量表）</li><li>b.方法区中类静态属性引用的对象  </li><li>c.方法区中常量引用的对象 </li><li>d.本地方法栈中JNI（Native方法）引用的对象 </li></ul><p>即使在可达性分析算法中不可达的对象，也并非是“非死不可”，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程。</p><ul><li><strong>第一次标记</strong><br>如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记</li><li><strong>第二次标记</strong><br>第一次标记后接着会进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。在finalize()方法中没有重新与引用链建立关联关系的，将被进行第二次标记。</li></ul><p>第二次标记成功的对象将真的会被回收，如果对象在finalize()方法中重新与引用链建立了关联关系，那么将会逃离本次回收，继续存活。</p><h2 id="2-3-回收方法区"><a href="#2-3-回收方法区" class="headerlink" title="2.3 回收方法区"></a>2.3 回收方法区</h2><p>方法区存储内容是否需要回收的判断和上面介绍的两种方法是不一样的。</p><p>方法区主要回收的内容有：废弃<code>常量</code>和<code>无用的类</code>。对于废弃常量也可通过引用的可达性来判断，但是对于无用的类则需要同时满足下面3个条件：</p><ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例</li><li>加载该类的ClassLoader已经被回收</li><li>该类对应的java.lang.Class对象没有在任何地方被引用。即:无法在任何地方通过反射访问该类的方法</li></ul><h1 id="3-GC算法"><a href="#3-GC算法" class="headerlink" title="3.GC算法"></a>3.GC算法</h1><p>关于垃圾回收的算法在java中主要有一下四种，这四种也是各有优缺点，所以对于不同的对象收集也是采用了不同的算法实现。</p><ul><li><strong>标记-清除算法</strong></li><li><strong>标记-整理算法</strong></li><li><strong>复制算法</strong></li><li><strong>分代收集算法</strong></li></ul><h2 id="3-1-标记-清除算法"><a href="#3-1-标记-清除算法" class="headerlink" title="3.1 标记-清除算法"></a>3.1 标记-清除算法</h2><h3 id="3-1-1-介绍"><a href="#3-1-1-介绍" class="headerlink" title="3.1.1 介绍"></a>3.1.1 介绍</h3><p>标记-清除算法是现代垃圾回收算法的思想基础。</p><p>标记-清除算法的做法是在堆内存即将耗尽的时候，就会停止整个程序（也被成为stop the world），然后进行两个阶段的操作:标记阶段和清除阶段。</p><ul><li><strong>标记</strong><br>标记的过程其实就是，遍历所有的GC Roots，然后将所有GC Roots可达的对象标记为存活的对象。</li><li><strong>清除</strong><br>清除的过程将遍历堆中所有的对象，将没有标记的对象全部清除掉。</li></ul><h3 id="3-1-2-优缺点"><a href="#3-1-2-优缺点" class="headerlink" title="3.1.2 优缺点"></a>3.1.2 优缺点</h3><ul><li><strong>效率问题</strong><br>因为(<strong>标记</strong>)需要遍历堆中的所有对象，而且(<strong>清除</strong>)在GC的时候会暂停整个程序，所以效率比较低。</li><li><strong>空间问题</strong><br>标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li></ul><h2 id="3-2-复制算法"><a href="#3-2-复制算法" class="headerlink" title="3.2 复制算法"></a>3.2 复制算法</h2><h3 id="3-2-1-介绍"><a href="#3-2-1-介绍" class="headerlink" title="3.2.1 介绍"></a>3.2.1 介绍</h3><p>它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p><p>目前商用虚拟机大都使用这一算法回收新生代。将内存划分为一个较大的 Eden 区和两块较小的 Survivor。在HotSpot虚拟机中 Eden：Survivor = 8：1</p><h3 id="3-2-2-优缺点"><a href="#3-2-2-优缺点" class="headerlink" title="3.2.2 优缺点"></a>3.2.2 优缺点</h3><ul><li>优点<ul><li>该算法每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指<br>针，按顺序分配内存即可，实现简单，运行高效。</li></ul></li><li>缺点<ul><li>可用的内存空间仅仅只有原内存空间的一半，也就是说有一半的内存空间被浪费。  </li></ul></li></ul><h2 id="3-3-标记-整理算法"><a href="#3-3-标记-整理算法" class="headerlink" title="3.3 标记-整理算法"></a>3.3 标记-整理算法</h2><h3 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h3><p>在复制算法中如果该内存区域对象存活率较高的话，就需要频繁的复制操作，效率非常低下（比如老年代中的对内存区域）这时候<code>标记-整理算法</code>就适合用于这种存活对象较多的场合，如老年代。它在标记-清除算法的基础上做了一些优化，使得空闲空间连续。和标记-清除算法一样，标记-整理算法也分为两个阶段。</p><ul><li><strong>标记</strong><br>遍历所有的GC Roots，然后将所有GC Roots可达的对象标记为存活的对象。</li><li><strong>整理</strong><br>将所有的存活对象移动到内存的一端。之后，清理边界外所有的空间。</li></ul><h3 id="3-3-2-优缺点"><a href="#3-3-2-优缺点" class="headerlink" title="3.3.2 优缺点"></a>3.3.2 优缺点</h3><ul><li>优点<ul><li>堆利用效率高</li><li>无碎片</li><li>对象顺序未变</li></ul></li></ul><h2 id="3-4-分代收集算法"><a href="#3-4-分代收集算法" class="headerlink" title="3.4 分代收集算法"></a>3.4 分代收集算法</h2><h3 id="3-4-1-介绍"><a href="#3-4-1-介绍" class="headerlink" title="3.4.1 介绍"></a>3.4.1 介绍</h3><p>当前商业虚拟机的垃圾收集都采用“分代收集”（Generational Collection）算法，这种算法并没有什么新的思想，只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为<code>新生代</code>和<code>老年代</code>，这样就可以根据各个年代的特点采用最适合的收集算法。在<strong>新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法只需要付出少量存活对象的复制成本就可以完成</strong>。而<strong>老年代中因为对象存活率高、没有额外空间对他进行分配担保，就必须使用“标记-清理”或者“标记-整理”算法来进行回收</strong>。<code>方法区永久代</code>，回收方法和<code>老年代</code>相同。</p><h1 id="4-STW-stop-the-world"><a href="#4-STW-stop-the-world" class="headerlink" title="4.STW(stop-the-world)"></a>4.STW(stop-the-world)</h1><p>STW是Java中一种全局暂停的现象。<code>全局停顿</code>是指所有Java代码停止，native代码可以执行，但不能和JVM交互，STW多半由于GC引起的。例如:</p><ul><li>Dump线程</li><li>死锁检查</li><li>堆Dump</li></ul><h2 id="4-1-GC时为什么会有STW？"><a href="#4-1-GC时为什么会有STW？" class="headerlink" title="4.1 GC时为什么会有STW？"></a>4.1 GC时为什么会有STW？</h2><p>就像我们在聚会的时候，有个保洁进到房间里打扫卫生，刚打扫完又有新的垃圾会扔在地上，房间就永远都打扫不干净。除非我们聚会结束没有人了，这时候打扫才不会产生新的垃圾。同理JVM也是这样，如果想要GC所有的垃圾就会有全局的停顿，以保障所有的垃圾都会被回收。</p><h2 id="4-2-STW的危害"><a href="#4-2-STW的危害" class="headerlink" title="4.2 STW的危害"></a>4.2 STW的危害</h2><ul><li>长时间服务停止，没有响应</li><li>遇到HA系统(双机集群系统)，可能引起主备切换，严重危害生产环境。</li></ul><h1 id="5-结语"><a href="#5-结语" class="headerlink" title="5.结语"></a>5.结语</h1><p>JVM对于javaer进阶是有着非常重要的作用的，而GC可以说是JVM中比较重要的一块了，掌握GC也有利于我们能更加明确的了解JVM。从而在我们以后的工作中，能够考虑到关于内存回收，不在让内存成为我们程序运行的瓶颈。</p><p>一起加油吧。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8-Stream中的常用操作</title>
      <link href="/2019/05/16/java/Java8-Stream%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/16/java/Java8-Stream%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>Java8提供了很多新特性，其中有一个就是基于流Stream的操作。Stream是一组用来处理数组，集合的API</p><h2 id="1-1-特性"><a href="#1-1-特性" class="headerlink" title="1.1 特性"></a>1.1 特性</h2><a id="more"></a><ul><li>不是数据结构，没有内部存储。</li><li>不支持索引访问。</li><li>延迟计算</li><li>支持并行</li><li>很容易生成数据或集合</li><li>支持过滤，查找，转换，汇总，聚合等操作</li></ul><h2 id="1-2-运行机制"><a href="#1-2-运行机制" class="headerlink" title="1.2 运行机制"></a>1.2 运行机制</h2><p>Stream分为源source，中间操作，终止操作。</p><ul><li>流的源可以是一个数组，集合，生成器方法，I/O通道等等。</li><li>一个流可以有零个或多个中间操作，每一个中间操作都会返回一个新的流，供下一个操作使用，一个流只会有一个终止操作。</li><li>Stream只有遇到终止操作，它的源才会开始执行遍历操作。</li></ul><h2 id="1-3-Stream的创建"><a href="#1-3-Stream的创建" class="headerlink" title="1.3 Stream的创建"></a>1.3 Stream的创建</h2><p><code>Stream</code>的创建其实有很多方式，但是我们在平时用到最多的可能就是基于数组的Stream.of()和集合的stream()方法其实它还有很多种的创建方式，下面将一一列出，并且列举相关实例。</p><ul><li>1.通过数组,Stream.of()</li><li>2.通过集合</li><li>3.通过Stream.generate方法来创建</li><li>4.通过Stram.iterate方法</li><li>5.其他API<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.通过数组,Stream.of()</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String[] str = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; str1 = Stream.of(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.通过集合</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line">        Stream&lt;String&gt; stream = strings.stream();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.通过Stream.generate方法来创建</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//这是一个无限流，通过这种方法创建在操作的时候最好加上limit进行限制</span></span><br><span class="line">        Stream&lt;Integer&gt; generate = Stream.generate(() -&gt; <span class="number">1</span>);</span><br><span class="line">        generate.limit(<span class="number">10</span>).forEach(x -&gt; System.out.println(x));</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 4.通过Stram.iterate方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Stream&lt;Integer&gt; iterate = Stream.iterate(<span class="number">1</span>, x -&gt; x +<span class="number">1</span>);</span><br><span class="line">        iterate.forEach(x -&gt; System.out.println(x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.其他API</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"abc"</span>;</span><br><span class="line">        IntStream chars = str.chars();</span><br><span class="line">        chars.forEach(x -&gt; System.out.println(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-Stream的常用操作-API"><a href="#2-Stream的常用操作-API" class="headerlink" title="2.Stream的常用操作(API)"></a>2.Stream的常用操作(API)</h1><h2 id="2-1-中间操作"><a href="#2-1-中间操作" class="headerlink" title="2.1 中间操作"></a>2.1 中间操作</h2><h3 id="2-1-1-filter过滤"><a href="#2-1-1-filter过滤" class="headerlink" title="2.1.1 filter过滤"></a>2.1.1 filter过滤</h3><p>接受一个谓词（一个返回boolean的函数）作为参数，并返回一个包括所有符合谓词的元素的流。说白了就是给一个条件，filter会根据这个条件截取流中得数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//截取所有能被2整除得数据</span></span><br><span class="line">    List&lt;Integer&gt; collect = integers.stream().filter(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果: collect = [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-distinct去重"><a href="#2-1-2-distinct去重" class="headerlink" title="2.1.2 distinct去重"></a>2.1.2 distinct去重</h3><p>返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    List&lt;Integer&gt; collect = numbers.stream().distinct().collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果: collect = [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-sorted排序"><a href="#2-1-3-sorted排序" class="headerlink" title="2.1.3 sorted排序"></a>2.1.3 sorted排序</h3><p>对流中得数据进行排序，可以以自然序或着用Comparator接口定义的排序规则来排序一个流。Comparator能使用lambada表达式来初始化，还能够逆序一个已经排序的流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">41</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="comment">//排序默认为顺序  顺序 = [2, 5, 6, 8, 11, 41]</span></span><br><span class="line">    List&lt;Integer&gt; sorted = integers.stream().sorted().collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"顺序 = "</span> + sorted);</span><br><span class="line">    <span class="comment">//逆序    逆序 = [41, 11, 8, 6, 5, 2]</span></span><br><span class="line">    List&lt;Integer&gt; reverseOrder = integers.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"逆序 = "</span> + reverseOrder);</span><br><span class="line">    <span class="comment">//也可以接收一个lambda</span></span><br><span class="line">    List&lt;Integer&gt; ages = integers.stream().sorted(Comparator.comparing(User::getAge)).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-4-limit截取"><a href="#2-1-4-limit截取" class="headerlink" title="2.1.4 limit截取"></a>2.1.4 limit截取</h3><p>会返回一个不超过给定长度的流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    List&lt;Integer&gt; collect = integers.stream().limit(<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果: collect = [1, 2, 1]</span></span><br></pre></td></tr></table></figure><h3 id="2-1-5-skip舍弃"><a href="#2-1-5-skip舍弃" class="headerlink" title="2.1.5 skip舍弃"></a>2.1.5 skip舍弃</h3><p>会返回一个扔掉了前面n个元素的流。如果流中元素不足n个，则返回一个空流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSkip</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//丢掉流中得前三个元素  </span></span><br><span class="line">    List&lt;Integer&gt; collect = integers.stream().skip(<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果: collect = [3, 3, 2, 4]</span></span><br></pre></td></tr></table></figure><h3 id="2-1-6-map归纳"><a href="#2-1-6-map归纳" class="headerlink" title="2.1.6 map归纳"></a>2.1.6 map归纳</h3><p>接受一个函数作为参数，这个函数会被应用到每个元素上，并将其映射成一个新的元素。就是根据指定函数获取流中得每个元素得数据并重新组合成一个新的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自己建好得一个获取对象list得方法</span></span><br><span class="line">    List&lt;Dish&gt; dishList = Dish.getDishList();</span><br><span class="line">    <span class="comment">//获取每一道菜得名称  并放到一个list中</span></span><br><span class="line">    List&lt;String&gt; collect = dishList.stream().map(Dish::getName).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//collect = [pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon]</span></span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-7-flatMap扁平化"><a href="#2-1-7-flatMap扁平化" class="headerlink" title="2.1.7 flatMap扁平化"></a>2.1.7 flatMap扁平化</h3><p>该方法key可以让你把一个流中的每个值都换成另一个流，然后把所有的流都链接起来成为一个流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String[] words = &#123;<span class="string">"Hello"</span>, <span class="string">"World"</span>&#125;;</span><br><span class="line">    List&lt;String&gt; collect = Stream.of(words).        <span class="comment">//数组转换流</span></span><br><span class="line">            map(w -&gt; w.split(<span class="string">""</span>)).  <span class="comment">//去掉“”并获取到两个String[]</span></span><br><span class="line">            flatMap(Arrays::stream).        <span class="comment">//方法调用将两个String[]扁平化为一个stream</span></span><br><span class="line">            distinct().                     <span class="comment">//去重    </span></span><br><span class="line">            collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//collect = [H, e, l, o, W, r, d]</span></span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-8-peek"><a href="#2-1-8-peek" class="headerlink" title="2.1.8 peek"></a>2.1.8 peek</h3><p>peek的设计初衷就是在流的每个元素恢复运行之前，插入执行一个动作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    List&lt;Integer&gt; result =</span><br><span class="line">            numbers.stream()</span><br><span class="line">                    .peek(x -&gt; System.out.println(<span class="string">"from stream: "</span> + x))</span><br><span class="line">                    .map(x -&gt; x + <span class="number">17</span>)</span><br><span class="line">                    .peek(x -&gt; System.out.println(<span class="string">"after map: "</span> + x))</span><br><span class="line">                    .filter(x -&gt; x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                    .peek(x -&gt; System.out.println(<span class="string">"after filter: "</span> + x))</span><br><span class="line">                    .limit(<span class="number">3</span>)</span><br><span class="line">                    .peek(x -&gt; System.out.println(<span class="string">"after limit: "</span> + x))</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">//     from stream: 2</span></span><br><span class="line"><span class="comment">//     after map: 19</span></span><br><span class="line"><span class="comment">//     from stream: 3</span></span><br><span class="line"><span class="comment">//     after map: 20</span></span><br><span class="line"><span class="comment">//     after filter: 20</span></span><br><span class="line"><span class="comment">//     after limit: 20</span></span><br><span class="line"><span class="comment">//     from stream: 4</span></span><br><span class="line"><span class="comment">//     after map: 21</span></span><br><span class="line"><span class="comment">//     from stream: 5</span></span><br><span class="line"><span class="comment">//     after map: 22</span></span><br><span class="line"><span class="comment">//     after filter: 22</span></span><br><span class="line"><span class="comment">//     after limit: 22</span></span><br></pre></td></tr></table></figure><h3 id="2-1-9-collect收集"><a href="#2-1-9-collect收集" class="headerlink" title="2.1.9 collect收集"></a>2.1.9 collect收集</h3><p>从上面得代码已经可以看出来，collect是将最终stream中得数据收集起来，最终生成一个list，set，或者map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Dish&gt; dishList = Dish.getDishList();</span><br><span class="line">    <span class="comment">// list</span></span><br><span class="line">    List&lt;Dish&gt; collect = dishList.stream().limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// set</span></span><br><span class="line">    Set&lt;Dish&gt; collect1 = dishList.stream().limit(<span class="number">2</span>).collect(Collectors.toSet());</span><br><span class="line">    <span class="comment">// map</span></span><br><span class="line">    Map&lt;String, Dish.Type&gt; collect2 = dishList.stream().limit(<span class="number">2</span>).collect(Collectors.toMap(Dish::getName, Dish::getType));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-终止操作"><a href="#2-2-终止操作" class="headerlink" title="2.2 终止操作"></a>2.2 终止操作</h2><ul><li>循环 forEach</li><li>计算 min、max、count、average</li><li>匹配 anyMatch、allMatch、noneMatch、findFirst、findAny</li><li>汇聚 reduce</li><li>收集器 collect</li></ul><h2 id="2-3-查找和匹配"><a href="#2-3-查找和匹配" class="headerlink" title="2.3 查找和匹配"></a>2.3 查找和匹配</h2><p>常见的数据处理套路是看看数据集中的某些元素是否匹配一个给定的属性。Stream API通过allMatch，anyMatch，noneMatch，findFirst和findAny方法提供了这样的工具。<br>查找和匹配都是终端操作。</p><h3 id="2-3-1-anyMatch"><a href="#2-3-1-anyMatch" class="headerlink" title="2.3.1 anyMatch"></a>2.3.1 anyMatch</h3><p>anyMatch方法可以回答“流中是否有一个元素能匹配到给定的谓词”。会返回一个boolean值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnyMatch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">        <span class="keyword">boolean</span> b = dish.stream().anyMatch(Dish::isVegetarian);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-allMatch"><a href="#2-3-2-allMatch" class="headerlink" title="2.3.2 allMatch"></a>2.3.2 allMatch</h3><p>allMatch方法和anyMatch类似，校验流中是否都能匹配到给定的谓词。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllMatch</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">        <span class="comment">//是否所有菜的热量都小于1000</span></span><br><span class="line">        <span class="keyword">boolean</span> b = dish.stream().allMatch(d -&gt; d.getCalories() &lt; <span class="number">1000</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-noneMatch"><a href="#2-3-3-noneMatch" class="headerlink" title="2.3.3 noneMatch"></a>2.3.3 noneMatch</h3><p>noneMatch方法可以确保流中没有任何元素与给定的谓词匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoneMatch</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">        <span class="comment">//没有任何菜的热量大于等于1000</span></span><br><span class="line">        <span class="keyword">boolean</span> b = dish.stream().allMatch(d -&gt; d.getCalories() &gt;= <span class="number">1000</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>anyMatch</code>，<code>noneMatch</code>，<code>allMatch</code>这三个操作都用到了所谓的短路。</p><h3 id="2-3-4-findAny"><a href="#2-3-4-findAny" class="headerlink" title="2.3.4 findAny"></a>2.3.4 findAny</h3><p>findAny方法将返回当前流中的符合过滤条件的任意元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindAny</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">        Optional&lt;Dish&gt; any = dish.stream().filter(Dish::isVegetarian).findAny();</span><br><span class="line">        System.out.println(<span class="string">"any = "</span> + any);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-findFirst"><a href="#2-3-5-findFirst" class="headerlink" title="2.3.5 findFirst"></a>2.3.5 findFirst</h3><p>findFirst方法能找到你想要的第一个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindFirst</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">        Optional&lt;Dish&gt; any = dish.stream().filter(Dish::isVegetarian).findFirst();</span><br><span class="line">        System.out.println(<span class="string">"any = "</span> + any);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-reduce-归约"><a href="#2-4-reduce-归约" class="headerlink" title="2.4 reduce 归约"></a>2.4 reduce 归约</h2><p>此类查询需要将流中所有元素反复结合起来，得到一个值，比如一个 Integer 。这样的查询可以被归类为归约操作（将流归约成一个值）。用函数式编程语言的术语来说，这称为折叠（fold），因为你可以将这个操<br>作看成把一张长长的纸（你的流）反复折叠成一个小方块，而这就是折叠操作的结果。</p><h3 id="2-4-1-元素求和"><a href="#2-4-1-元素求和" class="headerlink" title="2.4.1 元素求和"></a>2.4.1 元素求和</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">//求list中的和，以0为基数</span></span><br><span class="line">    Integer reduce = integers.stream().reduce(<span class="number">0</span>, (a, b) -&gt; a + b);</span><br><span class="line">    <span class="comment">//Integer的静态方法</span></span><br><span class="line">    <span class="keyword">int</span> sum = integers.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">    System.out.println(<span class="string">"reduce = "</span> + reduce);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-2-最大值和最小值"><a href="#2-4-2-最大值和最小值" class="headerlink" title="2.4.2 最大值和最小值"></a>2.4.2 最大值和最小值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">    Optional&lt;Integer&gt; min = integers.stream().reduce(Integer::min);</span><br><span class="line">    System.out.println(<span class="string">"min = "</span> + min);</span><br><span class="line">    Optional&lt;Integer&gt; max = integers.stream().reduce(Integer::max);</span><br><span class="line">    System.out.println(<span class="string">"max = "</span> + max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-Collectors-收集器"><a href="#2-5-Collectors-收集器" class="headerlink" title="2.5 Collectors 收集器"></a>2.5 Collectors 收集器</h2><h3 id="2-5-1-查找流中的最大值和最小值-minBy-maxBy"><a href="#2-5-1-查找流中的最大值和最小值-minBy-maxBy" class="headerlink" title="2.5.1 查找流中的最大值和最小值 minBy maxBy"></a>2.5.1 查找流中的最大值和最小值 minBy maxBy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">    <span class="comment">//创建一个Comparator来进行比较  比较菜的卡路里</span></span><br><span class="line">    Comparator&lt;Dish&gt; dishComparator = Comparator.comparingInt(Dish::getCalories);</span><br><span class="line">    <span class="comment">//maxBy选出最大值</span></span><br><span class="line">    Optional&lt;Dish&gt; collect = dish.stream().collect(Collectors.maxBy(dishComparator));</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">    <span class="comment">//选出最小值</span></span><br><span class="line">    Optional&lt;Dish&gt; collect1 = dish.stream().collect(Collectors.minBy(dishComparator));</span><br><span class="line">    System.out.println(<span class="string">"collect1 = "</span> + collect1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-2-汇总-summingInt"><a href="#2-5-2-汇总-summingInt" class="headerlink" title="2.5.2 汇总 summingInt"></a>2.5.2 汇总 summingInt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">    <span class="comment">//计算总和</span></span><br><span class="line">    <span class="keyword">int</span> collect = dish.stream().collect(Collectors.summingInt(Dish::getCalories));</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-3-平均数-averagingInt"><a href="#2-5-3-平均数-averagingInt" class="headerlink" title="2.5.3 平均数 averagingInt"></a>2.5.3 平均数 averagingInt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">    <span class="comment">//计算平均数</span></span><br><span class="line">    Double collect = dish.stream().collect(Collectors.averagingInt(Dish::getCalories));</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-4-连接字符串-joining"><a href="#2-5-4-连接字符串-joining" class="headerlink" title="2.5.4 连接字符串 joining"></a>2.5.4 连接字符串 joining</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">    String collect = dish.stream().map(Dish::getName).collect(Collectors.joining());</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>joining 工厂方法有一个重载版本可以接受元素之间的分界符，这样你就可以得到一个逗号分隔的菜肴名称列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String collect = dish.stream().map(Dish::getName).collect(Collectors.joining(<span class="string">", "</span>));</span><br></pre></td></tr></table></figure><h3 id="2-5-5-得到流中的总数-counting"><a href="#2-5-5-得到流中的总数-counting" class="headerlink" title="2.5.5 得到流中的总数 counting"></a>2.5.5 得到流中的总数 counting</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> howManyDishes = dish.stream().collect(Collectors.counting());</span><br></pre></td></tr></table></figure><h2 id="2-6-分组"><a href="#2-6-分组" class="headerlink" title="2.6 分组"></a>2.6 分组</h2><h3 id="2-6-1-分组-groupingBy"><a href="#2-6-1-分组-groupingBy" class="headerlink" title="2.6.1 分组 groupingBy"></a>2.6.1 分组 groupingBy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">    <span class="comment">//groupingBy接受一个function作为参数</span></span><br><span class="line">    Map&lt;Dish.Type, List&lt;Dish&gt;&gt; collect = dish.stream().collect(Collectors.groupingBy(Dish::getType));</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想用以分类的条件可能比简单的属性访问器要复杂。例如，你可能想把热量不到400卡路里的菜划分为“低热量”（diet），热量400到700卡路里的菜划为“普通”（normal），高于700卡路里的划为“高热量”（fat）。由于Dish类的作者没有把这个操作写成一个方法，你无法使用方法引用，但你可以把这个逻辑写成Lambda表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Dish&gt; dishList = Dish.getDish();</span><br><span class="line">    Map&lt;String, List&lt;Dish&gt;&gt; collect = dishList.stream().collect(Collectors.groupingBy(dish-&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">400</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"DIET"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">700</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"NORMAL"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FAT"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-2-多级分组"><a href="#2-6-2-多级分组" class="headerlink" title="2.6.2 多级分组"></a>2.6.2 多级分组</h3><p>要实现多级分组，我们可以使用一个由双参数版本的Collectors.groupingBy工厂方法创建的收集器，它除了普通的分类函数之外，还可以接受collector类型的第二个参数。那么要进行二级分组的话，我们可以把一个内层groupingBy传递给外层groupingBy，并定义一个为流中项目分类的二级标准。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class="line">    Map&lt;Dish.Type, Map&lt;String, List&lt;Dish&gt;&gt;&gt; collect = dish.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.groupingBy(d -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (d.getCalories() &lt;= <span class="number">400</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"DIET"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d.getCalories() &lt;= <span class="number">700</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"NORMAL"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FAT"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)));</span><br><span class="line">    System.out.println(<span class="string">"collect = "</span> + collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3-按子组收集数据"><a href="#2-6-3-按子组收集数据" class="headerlink" title="2.6.3 按子组收集数据"></a>2.6.3 按子组收集数据</h3><p>在上一面，我们看到可以把第二个groupingBy收集器传递给外层收集器来实现多级分组。但进一步说，传递给第一个groupingBy的第二个收集器可以是任何类型，而不一定是另一个groupingBy。</p><p>例如，要数一数菜单中每类菜有多少个，可以传递counting收集器作为groupingBy收集器的第二个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Dish.Type, Long&gt; typesCount = dish.stream().collect(groupingBy(Dish::getType, counting()));</span><br></pre></td></tr></table></figure><p>普通的单参数groupingBy(f)（其中<code>f</code>是分类函数）实际上是 groupingBy(f,toList()) 的简便写法。</p><h1 id="3-并行流"><a href="#3-并行流" class="headerlink" title="3 并行流"></a>3 并行流</h1><p>并行流就是一个把内容分成多个数据块，并用不同的线程分别处理每个数据块的流。这样一来，你就可以自动把给定操作的工作负荷分配给多核处理器的所有内核，让它们都忙起来。</p><h2 id="3-1-将顺序流转为并行流"><a href="#3-1-将顺序流转为并行流" class="headerlink" title="3.1 将顺序流转为并行流"></a>3.1 将顺序流转为并行流</h2><p>可以把流转换成并行流，从而让前面的函数归约过程（也就是求和）并行运行——对顺序流调用 parallel 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">parallelSum</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.iterate(<span class="number">1L</span>, i -&gt; i + <span class="number">1</span>)</span><br><span class="line">            .limit(n)</span><br><span class="line">            .parallel()</span><br><span class="line">            .reduce(<span class="number">0L</span>, Long::sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stream在内部分成了几块。因此可以对不同的块独立并行进行归纳操作，最后，同一个归纳操作会将各个子流的部分归纳结果合并起来，得到整个原始流的归纳结果。<br><img src="/image/java8Stream.jpg" alt="Stream并行流"><br>类似地，你只需要对并行流调用 sequential 方法就可以把它变成顺序流。</p><p>看看流的parallel方法，你可能会想，并行流用的线程是从哪儿来的？有多少个？怎么自定义这个过程呢？<br>并行流内部使用了默认的ForkJoinPool，它默认的线程数量就是你的处理器数量，这个值是由Runtime.getRuntime().available-Processors()得到的。</p><p>但是你可以通过系统属性java.util.concurrent.ForkJoinPool.common.parallelism来改变线程池大小，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">"java.util.concurrent.ForkJoinPool.common.parallelism"</span>,<span class="string">"12"</span>);</span><br></pre></td></tr></table></figure><p>这是一个全局设置，因此它将影响代码中所有的并行流。反过来说，目前还无法专为某个并行流指定这个值。一般而言，让ForkJoinPool的大小等于处理器数量是个不错的默认值，除非你有很好的理由，否则我们强烈建议你不要修改它。</p><h2 id="3-2-分支-合并框架"><a href="#3-2-分支-合并框架" class="headerlink" title="3.2 分支/合并框架"></a>3.2 分支/合并框架</h2><p>分支/合并框架的目的是以递归方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果。它是ExecutorService接口的一个实现，它把子任务分配给线程池（称为ForkJoinPool）中的工作线程。</p><h3 id="3-2-1-使用RecursiveTask"><a href="#3-2-1-使用RecursiveTask" class="headerlink" title="3.2.1 使用RecursiveTask"></a>3.2.1 使用RecursiveTask</h3><p>要把任务提交到这个池，必须创建RecursiveTask的一个子类，其中R是并行化任务（以<br>及所有子任务）产生的结果类型，或者如果任务不返回结果，则是RecursiveAction类型（当<br>然它可能会更新其他非局部机构）。<br>要定义RecursiveTask，只需实现它唯一的抽象方法compute ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> R <span class="title">compute</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>这个方法同时定义了将任务拆分成子任务的逻辑，以及无法再拆分或不方便再拆分时，生成单个子任务结果的逻辑。</p><h3 id="3-2-2-使用RecursiveTask求和"><a href="#3-2-2-使用RecursiveTask求和" class="headerlink" title="3.2.2 使用RecursiveTask求和"></a>3.2.2 使用RecursiveTask求和</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinSumCalculator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">concurrent</span>.<span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span>[] numbers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> THRESHOLD = <span class="number">10_000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinSumCalculator</span><span class="params">(<span class="keyword">long</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(numbers, <span class="number">0</span>, numbers.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ForkJoinSumCalculator</span><span class="params">(<span class="keyword">long</span>[] numbers, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numbers = numbers;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = end - start;</span><br><span class="line">        <span class="keyword">if</span> (length &lt;= THRESHOLD) &#123;</span><br><span class="line">            <span class="keyword">return</span> computeSequentially();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一个子任务来为数组得前一半求和</span></span><br><span class="line">        ForkJoinSumCalculator leftTask =</span><br><span class="line">                <span class="keyword">new</span> ForkJoinSumCalculator(numbers, start, start + length / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//利 用 另 一 个ForkJoinPool线程异步执行新创建的子任务</span></span><br><span class="line">        leftTask.fork();</span><br><span class="line">        <span class="comment">//创建一个子任务来为数组得后一半求和</span></span><br><span class="line">        ForkJoinSumCalculator rightTask =</span><br><span class="line">                <span class="keyword">new</span> ForkJoinSumCalculator(numbers, start + length / <span class="number">2</span>, end);</span><br><span class="line">        <span class="comment">//同步执行第二个子任务，有可能进一步递归</span></span><br><span class="line">        Long rightResult = rightTask.compute();</span><br><span class="line">        <span class="comment">//读取第一个任务得结构，未完成就等待</span></span><br><span class="line">        Long leftResult = leftTask.join();</span><br><span class="line">        <span class="keyword">return</span> leftResult + rightResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">computeSequentially</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">            sum += numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">forkJoinSum</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span>[] numbers = LongStream.rangeClosed(<span class="number">1</span>, n).toArray();</span><br><span class="line">        ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> ForkJoinSumCalculator(numbers);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool().invoke(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> l = ForkJoinSumCalculator.forkJoinSum(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"l = "</span> + l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-安装常用镜像</title>
      <link href="/2019/05/15/docker/Docker-%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E9%95%9C%E5%83%8F/"/>
      <url>/2019/05/15/docker/Docker-%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>我们在平时的开发中可能会用到mysql，redis 还有mongodb等用于存储数据，但是有时候我们使用测试环境可能不太方便(例如:在家不能连接公司数据库)，这时候我们可以在本地或者自己的云服务器上就有了发挥的作用了，但是如果我们在本地安装这些的话就很占我们电脑的内存了，这时候docker就登场了。</p><a id="more"></a><h1 id="2-安装docker"><a href="#2-安装docker" class="headerlink" title="2.安装docker"></a>2.安装docker</h1><h2 id="2-1-在linux上安装docker"><a href="#2-1-在linux上安装docker" class="headerlink" title="2.1 在linux上安装docker"></a>2.1 在linux上安装docker</h2><p>在linux上安装docker其实是比较简单的，只需要在命令行中敲入即可，这里我以为Ubuntu系统为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get -y install docker.io</span><br></pre></td></tr></table></figure><p>就这样docker就安装完了，我们可以输入docker，查看docker可以使用的命令。显示如下图，说明已经安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker</span><br></pre></td></tr></table></figure><p><img src="/image/docker/docker-util.jpg" alt="docker"></p><h2 id="2-2-在macOS上安装docker"><a href="#2-2-在macOS上安装docker" class="headerlink" title="2.2 在macOS上安装docker"></a>2.2 在macOS上安装docker</h2><h3 id="2-2-1-macOS-我们可以使用-Homebrew-来安装-Docker"><a href="#2-2-1-macOS-我们可以使用-Homebrew-来安装-Docker" class="headerlink" title="2.2.1 macOS 我们可以使用 Homebrew 来安装 Docker"></a>2.2.1 macOS 我们可以使用 Homebrew 来安装 Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install docker</span><br><span class="line"></span><br><span class="line">==&gt; Creating Caskroom at /usr/<span class="built_in">local</span>/Caskroom</span><br><span class="line">==&gt; We<span class="string">'ll set permissions properly so we won'</span>t need sudo <span class="keyword">in</span> the future</span><br><span class="line">Password:          <span class="comment"># 输入 macOS 密码</span></span><br><span class="line">==&gt; Satisfying dependencies</span><br><span class="line">==&gt; Downloading https://download.docker.com/mac/stable/21090/Docker.dmg</span><br><span class="line"><span class="comment">######################################################################## 100.0%</span></span><br><span class="line">==&gt; Verifying checksum <span class="keyword">for</span> Cask docker</span><br><span class="line">==&gt; Installing Cask docker</span><br><span class="line">==&gt; Moving App <span class="string">'Docker.app'</span> to <span class="string">'/Applications/Docker.app'</span>.</span><br><span class="line">&amp;<span class="comment">#x1f37a;  docker was successfully installed!</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-手动下载安装"><a href="#2-2-2-手动下载安装" class="headerlink" title="2.2.2 手动下载安装"></a>2.2.2 手动下载安装</h3><p>点击以下链接下载<a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="noopener">dmg下载链接</a> 如同 macOS 其它软件一样，安装也非常简单，双击下载的 .dmg 文件，然后将鲸鱼图标拖拽到Application 文件夹即可。</p><h2 id="2-3-在Windows上安装docker"><a href="#2-3-在Windows上安装docker" class="headerlink" title="2.3 在Windows上安装docker"></a>2.3 在Windows上安装docker</h2><p><a href="https://www.docker.com/get-docker" target="_blank" rel="noopener">windows下载链接</a> 和windows其他程序安装方式相同。</p><h1 id="3-基于docker安装常用镜像"><a href="#3-基于docker安装常用镜像" class="headerlink" title="3.基于docker安装常用镜像"></a>3.基于docker安装常用镜像</h1><h2 id="3-1-安装mysql"><a href="#3-1-安装mysql" class="headerlink" title="3.1 安装mysql"></a>3.1 安装mysql</h2><p><strong>/data/docker/mysql</strong> 是宿主机目录用来映射mysql的数据</p><h3 id="3-1-1-安装"><a href="#3-1-1-安装" class="headerlink" title="3.1.1 安装"></a>3.1.1 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mysql:8.0.16</span><br></pre></td></tr></table></figure><p>等待下载完成后即安装完成，接下来就是启动镜像了。</p><h3 id="3-1-2-启动镜像"><a href="#3-1-2-启动镜像" class="headerlink" title="3.1.2 启动镜像"></a>3.1.2 启动镜像</h3><ul><li><strong>普通启动</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /data/docker/mysql:/var/lib/mysql -d mysql:8.0.16</span><br></pre></td></tr></table></figure>启动镜像名称为mysql，前面一个端口是映射端口，<code>root</code>是数据库密码，<strong>/data/docker/mysql</strong> 是宿主机目录用来保存mysql的数据。</li><li><strong>设置时区和宿主机相同启动</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql:/var/lib/mysql -d mysql:8.0.16</span><br></pre></td></tr></table></figure>启动镜像名称为mysql，前面一个端口是映射端口，<code>root</code>是数据库密码， <strong>-v /etc/localtime:/etc/localtime</strong>是设置时区与宿主机一致，<strong>/data/docker/mysql</strong> 是宿主机目录用来保存mysql的数据。</li></ul><h3 id="3-1-3-启动mysql"><a href="#3-1-3-启动mysql" class="headerlink" title="3.1.3 启动mysql"></a>3.1.3 启动mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start mysql</span><br></pre></td></tr></table></figure><h2 id="3-2-安装redis"><a href="#3-2-安装redis" class="headerlink" title="3.2 安装redis"></a>3.2 安装redis</h2><h3 id="3-2-1-安装redis"><a href="#3-2-1-安装redis" class="headerlink" title="3.2.1 安装redis"></a>3.2.1 安装redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull reids:5.0.4</span><br></pre></td></tr></table></figure><h3 id="3-2-2-启动镜像"><a href="#3-2-2-启动镜像" class="headerlink" title="3.2.2 启动镜像"></a>3.2.2 启动镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name redis -p 6379:6379 -v /data/docker/redis:/data -d redis:5.0.4 redis-server --appendonly yes --requirepass <span class="string">"root"</span></span><br></pre></td></tr></table></figure><p>启动镜像名称为redis，前面一个端口是映射端口，<strong>/data/docker/redis</strong>是宿主机数据保存地址 <strong>，appendonly yes</strong>是后台启动，<strong>requirepass “root”</strong>是设置密码为<code>root</code></p><h3 id="3-2-3-启动ridis"><a href="#3-2-3-启动ridis" class="headerlink" title="3.2.3 启动ridis"></a>3.2.3 启动ridis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start redis</span><br></pre></td></tr></table></figure><h2 id="3-3-安装MongoDB"><a href="#3-3-安装MongoDB" class="headerlink" title="3.3 安装MongoDB"></a>3.3 安装MongoDB</h2><h3 id="3-3-1-安装MongoDB"><a href="#3-3-1-安装MongoDB" class="headerlink" title="3.3.1 安装MongoDB"></a>3.3.1 安装MongoDB</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mongo</span><br></pre></td></tr></table></figure><h3 id="3-3-2-启动镜像"><a href="#3-3-2-启动镜像" class="headerlink" title="3.3.2 启动镜像"></a>3.3.2 启动镜像</h3><ul><li>启动<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mongo -p 27017:27017 -v /data/docker/mongo:/data/db -d mongo:latest --auth</span><br></pre></td></tr></table></figure></li><li>新建管理员<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it mongo mongo admin</span><br><span class="line">&gt;&gt;  db.createUser(&#123; user: <span class="string">'admin'</span>, <span class="built_in">pwd</span>: <span class="string">'admin'</span>, roles: [ &#123; role: <span class="string">'userAdminAnyDatabase'</span>, db: <span class="string">'admin'</span> &#125; ]&#125;);</span><br></pre></td></tr></table></figure>执行之后看到如下信息则创建成功。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Successfully added user: &#123;</span><br><span class="line">    <span class="string">"user"</span> : <span class="string">"admin"</span>,</span><br><span class="line">    <span class="string">"roles"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"role"</span> : <span class="string">"userAdminAnyDatabase"</span>,</span><br><span class="line">            <span class="string">"db"</span> : <span class="string">"admin"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-3-启动MongoDB"><a href="#3-3-3-启动MongoDB" class="headerlink" title="3.3.3 启动MongoDB"></a>3.3.3 启动MongoDB</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start mongo</span><br></pre></td></tr></table></figure><h1 id="3-结语"><a href="#3-结语" class="headerlink" title="3. 结语"></a>3. 结语</h1><p>我们在使用docker的时候有时候想进入容器可以使用如下命令进入，最后的mysql可以使用容器的名称或者容器的id。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it mysql /bin/bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-创建mysql容器</title>
      <link href="/2019/03/10/docker/Docker-%E5%88%9B%E5%BB%BAmysql%E5%AE%B9%E5%99%A8/"/>
      <url>/2019/03/10/docker/Docker-%E5%88%9B%E5%BB%BAmysql%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。<br>个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。</p><a id="more"></a><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h1><h2 id="2-1-安装Docker"><a href="#2-1-安装Docker" class="headerlink" title="2.1 安装Docker"></a>2.1 安装Docker</h2><p>无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。</p><h2 id="2-2-拉取mysql的镜像-这里使用mysql5-7"><a href="#2-2-拉取mysql的镜像-这里使用mysql5-7" class="headerlink" title="2.2 拉取mysql的镜像(这里使用mysql5.7)"></a>2.2 拉取mysql的镜像(这里使用mysql5.7)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h2 id="2-3-启动mysql"><a href="#2-3-启动mysql" class="headerlink" title="2.3 启动mysql"></a>2.3 启动mysql</h2><p>当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><p>这个命令就列出了当前主机上已经下载的所有镜像。</p><h2 id="2-4-在宿主机上创建数据存储文件夹"><a href="#2-4-在宿主机上创建数据存储文件夹" class="headerlink" title="2.4 在宿主机上创建数据存储文件夹"></a>2.4 在宿主机上创建数据存储文件夹</h2><p>个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。<br>例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /data/docker/mysql/mysql001</span><br></pre></td></tr></table></figure><h3 id="2-5-创建容器"><a href="#2-5-创建容器" class="headerlink" title="2.5 创建容器"></a>2.5 创建容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7</span><br></pre></td></tr></table></figure><p>这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。</p><ul><li>docker run<br>这是启动一个容器</li><li>–name mysql001<br>启动的容器名称为mysql001，这个名称在后面操作可直接使用名称</li><li>-p 3306:3306<br>映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口</li><li>-e MYSQL_ROOT_PASSWORD=root<br>设置mysql的登录密码为root</li><li>-v /etc/localtime:/etc/localtime<br>这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时</li><li>-v /data/docker/mysql/mysql001:/var/lib/mysql<br>这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里</li><li>-d mysql:5.7</li><li>d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样</li></ul><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start mysql001</span><br></pre></td></tr></table></figure><p>或者将name修改为image_id，image_id可以通过 docker images命令去查看。</p><h2 id="访问mysql数据库"><a href="#访问mysql数据库" class="headerlink" title="访问mysql数据库"></a>访问mysql数据库</h2><ul><li>方式一<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql-cli -h 127.0.0.1 -u root -p root</span><br></pre></td></tr></table></figure></li><li>方式二<br>使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。</li></ul><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>删除容器必须要保证容器是stop的可以通过下面的命令查看</p><ul><li>查看正在运行的容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure></li><li>查看所有运行过的容器包括正在运行的容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure>根据上面的命令可以查找到容器id，执行命令删除容器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm 容器id</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ实战</title>
      <link href="/2018/11/27/RabbitMQ/"/>
      <url>/2018/11/27/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<p><img src="/image/rabbit/mq-login.jpg" alt="RabbitMQ"></p><h1 id="1-消息中间件"><a href="#1-消息中间件" class="headerlink" title="1.消息中间件"></a>1.消息中间件</h1><h2 id="1-1-什么是消息中间"><a href="#1-1-什么是消息中间" class="headerlink" title="1.1 什么是消息中间"></a>1.1 什么是消息中间</h2><p><code>消息</code> (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、<br>JSON 等，也可以很复杂，比如内嵌对象。</p><p><code>消息队列中间件</code> (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p><p>消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:</p><ul><li><code>点对点</code> (P2P, Point-to-Point) 模式</li><li><code>发布/订阅</code> (Pub/Sub) 模式。<a id="more"></a><code>点对点</code>是基于队列的，消息生产者发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的步传输成为可能。<code>发布订阅</code>定义了如何向一个内容节点发布和订阅消息，这个内容节点称为<code>主题</code>(topic)，<code>主题</code>可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而<code>消息订阅者</code>则从主题中订阅消息。<code>主题</code>使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。</li></ul><p>目前开源的消息中间件有很多，比较主流的有 <code>RabbitMQ</code>、 <code>Kafka</code>、 <code>ActiveMQ</code>、 <code>RocketMQ</code>等。</p><h2 id="1-2-消息中间件的作用"><a href="#1-2-消息中间件的作用" class="headerlink" title="1.2 消息中间件的作用"></a>1.2 消息中间件的作用</h2><p>消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用。总的来说，消息中间件的作用可以概括如下:</p><h3 id="1-2-1-解耦"><a href="#1-2-1-解耦" class="headerlink" title="1.2.1 解耦"></a>1.2.1 <code>解耦</code></h3><p>在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。</p><h3 id="1-2-2-冗余〈存储"><a href="#1-2-2-冗余〈存储" class="headerlink" title="1.2.2 冗余〈存储)"></a>1.2.2 <code>冗余〈存储)</code></h3><p>有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。</p><h3 id="1-2-3-扩展性"><a href="#1-2-3-扩展性" class="headerlink" title="1.2.3 扩展性"></a>1.2.3 <code>扩展性</code></h3><p>因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</p><h3 id="1-2-4-削峰"><a href="#1-2-4-削峰" class="headerlink" title="1.2.4 削峰"></a>1.2.4 <code>削峰</code></h3><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。</p><h3 id="1-2-5-可恢复性"><a href="#1-2-5-可恢复性" class="headerlink" title="1.2.5 可恢复性"></a>1.2.5 <code>可恢复性</code></h3><p>当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后进行处理。</p><h3 id="1-2-6-顺序保证"><a href="#1-2-6-顺序保证" class="headerlink" title="1.2.6 顺序保证"></a>1.2.6 <code>顺序保证</code></h3><p>在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</p><h3 id="1-2-7-缓冲"><a href="#1-2-7-缓冲" class="headerlink" title="1.2.7 缓冲"></a>1.2.7 <code>缓冲</code></h3><p>在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。</p><h3 id="1-2-8-异步通信"><a href="#1-2-8-异步通信" class="headerlink" title="1.2.8 异步通信"></a>1.2.8 <code>异步通信</code></h3><p>在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。</p><h1 id="2-RabbitMQ入门"><a href="#2-RabbitMQ入门" class="headerlink" title="2.RabbitMQ入门"></a>2.RabbitMQ入门</h1><h2 id="2-1-RabbitMQ介绍"><a href="#2-1-RabbitMQ介绍" class="headerlink" title="2.1 RabbitMQ介绍"></a>2.1 RabbitMQ介绍</h2><p><code>RabbitMQ</code>是采用<code>Erlang</code>语言实现<code>AMQP</code>(Advanced Message Queuing Protocol，高级消息<br>队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。</p><p>RabbitMQ主要是为了实现系统之间的<code>双向解耦</code>而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p><p><code>AMQP</code>是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是 <strong>面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全</strong>。</p><h2 id="2-2-RabbitMQ安装"><a href="#2-2-RabbitMQ安装" class="headerlink" title="2.2 RabbitMQ安装"></a>2.2 RabbitMQ安装</h2><ul><li>使用<code>docker</code>安装(3-management版本自带管理后台)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure></li><li>启动RabbitMQ并且启动管理后台<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management</span><br><span class="line"></span><br><span class="line">$ docker start rabbitmq</span><br></pre></td></tr></table></figure></li><li>查看管理后台<br>在浏览器打开 <a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a> 输入用户名:admin 密码:admin 可进入管理后台</li></ul><h2 id="2-3-相关概念介绍"><a href="#2-3-相关概念介绍" class="headerlink" title="2.3 相关概念介绍"></a>2.3 相关概念介绍</h2><h3 id="2-3-1-生产者和消费者"><a href="#2-3-1-生产者和消费者" class="headerlink" title="2.3.1 生产者和消费者"></a>2.3.1 生产者和消费者</h3><ul><li><p><code>Producer</code>:生产者，就是投递消息的一方。<br>生产者创建消息，然后发布到RabbitMQ中。消息一般可以包含2个部分:<code>消息体和标签(Label)</code>。消息体也可以称之为payload，在实际应用中，<strong>消息体一般是一个带有业务逻辑结构的数据</strong>，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ之后会根据标签把消息发送给感兴趣的消费者(Consumer)。</p></li><li><p><code>Consumer</code>:消费者，就是接收消息的一方。<br>消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload)在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。</p></li><li><p><code>Broker</code>:消息中间件的服务节点。<br>对于RabbitMQ来说，一个RabbitMQ Broker可以简单地看作一个<code>RabbitMQ服务节点</code>，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。</p></li></ul><p><strong>RabbitMQ运转流程</strong><br><img src="/image/rabbit/mq-yunzhuanliucheng.jpg" alt="RabbitMQ运转流程"></p><h3 id="2-3-2-交换器Exchange，路由RoutingKey，绑定Binding"><a href="#2-3-2-交换器Exchange，路由RoutingKey，绑定Binding" class="headerlink" title="2.3.2 交换器Exchange，路由RoutingKey，绑定Binding"></a>2.3.2 交换器Exchange，路由RoutingKey，绑定Binding</h3><ul><li><p><code>Exchange</code>:交换器<br><img src="/image/rabbit/mq-exchange.jpg" alt="交换器"><br>MQ中我们暂时可以理解成 <strong>生产者将消息投递到队列中</strong>，但是实际上这个在RabbitMQ中不会发生。真实情况是，<strong>生产者将消息发送到<code>Exchange(交换器)</code>，由交换器将消息路由到一个或者多个<code>队列</code>中。如果路由不到，或许会返回给生产者，或许直接丢弃</strong>。<br>RabbitMQ中的交换器有四种类型，下面将会一一介绍，并且会附上代码详细说明。</p></li><li><p><code>RoutingKey</code>:路由键<br>生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。</p></li><li><p><code>Binding</code>:绑定<br>RabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:<br><img src="/image/rabbit/mq-banding.jpg" alt="绑定"></p></li></ul><h3 id="2-3-3-交换器类型"><a href="#2-3-3-交换器类型" class="headerlink" title="2.3.3 交换器类型"></a>2.3.3 交换器类型</h3><p>RabbitMQ常用的交换器类型有<code>fanout</code>、<code>direct</code>、<code>topic</code>和<code>headers</code>这四种。AMQP协议里其实还提<br>到另外两种类型:<code>System</code>和<code>自定义</code>，在这里就不作详细介绍了。</p><h4 id="2-3-3-1-fanout"><a href="#2-3-3-1-fanout" class="headerlink" title="2.3.3.1 fanout"></a>2.3.3.1 <code>fanout</code></h4><p>就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：<br><img src="/image/rabbit/mq-fanout.jpg" alt="fanout"></p><h4 id="2-3-3-2-direct-RabbitMQ默认的交换器类型"><a href="#2-3-3-2-direct-RabbitMQ默认的交换器类型" class="headerlink" title="2.3.3.2 direct(RabbitMQ默认的交换器类型)"></a>2.3.3.2 <code>direct</code>(RabbitMQ默认的交换器类型)</h4><p>direct类型的交换器路由规则也很简单，它会把消息路由到那些BindingKey和RoutingKey完全匹配的队列中。如下图：<br><img src="/image/rabbit/mq-direct.jpg" alt="direct"></p><h4 id="2-3-3-3-topic"><a href="#2-3-3-3-topic" class="headerlink" title="2.3.3.3 topic"></a>2.3.3.3 topic</h4><p>上面讲到<code>direct类型</code>的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。<code>topic类型</code>的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:</p><ul><li>RoutingKey为一个点号<code>.</code>分隔的字符串(被点号<code>.</code>分隔开的每一段独立的字符串称为一个单词)，如”com.rabbitmq.client”，”java.util.concurrent”,”com.hidden.client”等</li><li>BindingKey也是点号<code>.</code>分隔</li><li>BindingKey中可以存在两种特殊字符串<code>*</code>和<code>#</code>，用于做模糊匹配，其中<code>*</code>用于匹配一个单词，<code>#</code>用于匹配多规格单词(可以是零个)。<br>如下图：<br><img src="/image/rabbit/mq-topic.jpg" alt="topic"><br>思考: </li></ul><p>1.路由建 “com.rabbitmq.client”会路由到哪一个队列？<br>2.路由建 “com.hidden.client”会路由到哪一个队列？<br>3.路由建 “com.hidden.demo”会路由到哪一个队列？<br>4.路由建 “java.util.concurrent”会路由到哪一个队列？<br>5.路由建 “java.rabbitmq.demo”会路由到哪一个队列？</p><h4 id="2-3-3-4-headers-不常用"><a href="#2-3-3-4-headers-不常用" class="headerlink" title="2.3.3.4 headers(不常用)"></a>2.3.3.4 headers(不常用)</h4><p><code>headers类型</code>的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。<strong>headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在</strong> 所以对于headers类型交换器我们只需要了解即可，知道有这么个类型存在。</p><h2 id="2-4-交换器类型详解"><a href="#2-4-交换器类型详解" class="headerlink" title="2.4 交换器类型详解"></a>2.4 交换器类型详解</h2><h3 id="2-4-1-新建"><a href="#2-4-1-新建" class="headerlink" title="2.4.1 新建"></a>2.4.1 新建</h3><p>新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer<br>pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>rabbit-producer/application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port=1180</span><br><span class="line"># 端口 1181 消费者  1180 生产者</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.host=127.0.0.1</span><br><span class="line">spring.rabbitmq.username=admin</span><br><span class="line">spring.rabbitmq.password=admin</span><br><span class="line">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure><p>rabbit-producer/application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server.port=1181</span><br><span class="line"># 端口 1181 消费者  1180 生产者</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.host=127.0.0.1</span><br><span class="line">spring.rabbitmq.username=admin</span><br><span class="line">spring.rabbitmq.password=admin</span><br><span class="line">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure><p>项目创建完成</p><h3 id="2-4-2-声明一个队列各个参数的意义"><a href="#2-4-2-声明一个队列各个参数的意义" class="headerlink" title="2.4.2 声明一个队列各个参数的意义"></a>2.4.2 声明一个队列各个参数的意义</h3><ul><li><code>name</code>: 队列的名称 字符串;</li><li><code>durable</code>: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库;</li><li><code>exclusive</code>: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。</li><li><code>autoDelete</code>: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除</li><li><code>arguments</code>: 队列中的消息什么时候会自动被删除？ 是一个Map&lt;String, Object&gt;，它有如下参数:<ul><li>“x-message-ttl”: 1000  设置队列中的所有消息的生存周期</li><li>“x-expires”: 1000  当队列在指定的时间没有被访问就会被删除</li><li>“x-max-length”: 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉</li><li>“x-max-length-bytes”:  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小</li><li>“x-dead-letter-exchange”: “” 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉</li><li>“x-dead-letter-routing-key”: “”  将删除的消息推送到指定交换机的指定路由键的队列中去</li><li>“x-max-priority”:  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费</li><li>“x-queue-mode”: “lazy” 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中</li><li>“x-queue-master-locator”</li></ul></li></ul><h3 id="2-4-3-fanout代码实现"><a href="#2-4-3-fanout代码实现" class="headerlink" title="2.4.3 fanout代码实现"></a>2.4.3 fanout代码实现</h3><h4 id="2-4-3-1-在消费者项目中添加一个配置类"><a href="#2-4-3-1-在消费者项目中添加一个配置类" class="headerlink" title="2.4.3.1 在消费者项目中添加一个配置类"></a>2.4.3.1 在消费者项目中添加一个配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/1 4:35 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个队列，后面有很多属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">fanoutQueue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"fanout.queue1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">fanoutQueue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"fanout.queue2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">"fanout_exchange"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBinding1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">fanoutBinding2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-3-2-在消费者项目中添加一个消息监听类"><a href="#2-4-3-2-在消费者项目中添加一个消息监听类" class="headerlink" title="2.4.3.2 在消费者项目中添加一个消息监听类"></a>2.4.3.2 在消费者项目中添加一个消息监听类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/1 4:40 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"fanout.queue1"</span>)</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fanoutConsumer1</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"1fanoutConsumer 接收消息msg: &#123;&#125;"</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"fanout.queue2"</span>)</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fanoutConsumer2</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"2fanoutConsumer 接收消息msg: &#123;&#125;"</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-3-3-在生产者项目中添加一个消息发送controller"><a href="#2-4-3-3-在生产者项目中添加一个消息发送controller" class="headerlink" title="2.4.3.3 在生产者项目中添加一个消息发送controller"></a>2.4.3.3 在生产者项目中添加一个消息发送controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.rabbit.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/28 11:50 AM</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>()</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fanout类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息内容</span></span><br><span class="line"><span class="comment">     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey</span></span><br><span class="line"><span class="comment">     * 只是routingKey可以任意指定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/fanout/&#123;msg&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fanoutProducer</span><span class="params">(@PathVariable(<span class="string">"msg"</span>)</span> String msg)</span>&#123;</span><br><span class="line">        log.info(<span class="string">"fanout生产消息 msg:&#123;&#125;"</span>, msg);</span><br><span class="line">        <span class="comment">// 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息</span></span><br><span class="line">        template.convertAndSend(<span class="string">"fanout_exchange"</span>,<span class="string">""</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-3-4-测试"><a href="#2-4-3-4-测试" class="headerlink" title="2.4.3.4 测试"></a>2.4.3.4 测试</h4><p>分别启动这两个项目，在浏览器的路径上输入<a href="http://localhost:1180/fanout/测试消息" target="_blank" rel="noopener">http://localhost:1180/fanout/测试消息</a>，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。</p><h3 id="2-4-4-direct代码实现"><a href="#2-4-4-direct代码实现" class="headerlink" title="2.4.4 direct代码实现"></a>2.4.4 direct代码实现</h3><h4 id="2-4-4-1-在消费者项目中添加一个配置类"><a href="#2-4-4-1-在消费者项目中添加一个配置类" class="headerlink" title="2.4.4.1 在消费者项目中添加一个配置类"></a>2.4.4.1 在消费者项目中添加一个配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.rabbit.consumer.direct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/29 1:40 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义两个队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directQueue1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"direct.queue1"</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directQueue2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"direct.queue2"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directQueue3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"direct.queue3"</span>,<span class="keyword">true</span>,<span class="keyword">true</span>, <span class="keyword">true</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义 exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"direct_exchange"</span>,<span class="keyword">true</span>,<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列1 绑定 exchange 并且设置routingKey为direct.1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">directBinding1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class="string">"direct.routing.key1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列2 绑定 exchange 并且设置routingKey为direct.2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">directBinding2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class="string">"direct.routing.key2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">directBinding3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue3()).to(directExchange()).with(<span class="string">"direct.routing.key1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-4-2-在消费者项目中添加一个消息监听类"><a href="#2-4-4-2-在消费者项目中添加一个消息监听类" class="headerlink" title="2.4.4.2 在消费者项目中添加一个消息监听类"></a>2.4.4.2 在消费者项目中添加一个消息监听类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure><h4 id="2-4-4-3-在生产者项目中添加一个消息发送controller"><a href="#2-4-4-3-在生产者项目中添加一个消息发送controller" class="headerlink" title="2.4.4.3 在生产者项目中添加一个消息发送controller"></a>2.4.4.3 在生产者项目中添加一个消息发送controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.rabbit.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/28 11:50 AM</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>()</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * direct类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/direct/queue1/&#123;msg&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">directProducerOne</span><span class="params">(@PathVariable(<span class="string">"msg"</span>)</span> String msg) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"生产者生产消息:"</span> + msg);</span><br><span class="line">        <span class="comment">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class="line">        template.convertAndSend(<span class="string">"direct_exchange"</span>, <span class="string">"direct.routing.key1"</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/direct/queue2/&#123;msg&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">directProducerTwo</span><span class="params">(@PathVariable(<span class="string">"msg"</span>)</span> String msg) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"生产者生产消息:"</span> + msg);</span><br><span class="line">        <span class="comment">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class="line">        template.convertAndSend(<span class="string">"mq-direct_exchange"</span>, <span class="string">"direct.routing.key2"</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-4-4-测试"><a href="#2-4-4-4-测试" class="headerlink" title="2.4.4.4 测试"></a>2.4.4.4 测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href="http://localhost:1180/direct/queue1/测试消息1" target="_blank" rel="noopener">http://localhost:1180/direct/queue1/测试消息1</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可</p><h3 id="2-4-5-topic代码实现"><a href="#2-4-5-topic代码实现" class="headerlink" title="2.4.5 topic代码实现"></a>2.4.5 topic代码实现</h3><h4 id="2-4-5-1-在消费者项目中添加一个配置类"><a href="#2-4-5-1-在消费者项目中添加一个配置类" class="headerlink" title="2.4.5.1 在消费者项目中添加一个配置类"></a>2.4.5.1 在消费者项目中添加一个配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.rabbit.consumer.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/29 8:42 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"topic.queue1"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"topic.queue2"</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建交换器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"topic_exchange"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class="string">"*.jiafly.*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">topicBinding2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="string">"com.jiafly.*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-5-2-在消费者项目中添加一个消息监听类"><a href="#2-4-5-2-在消费者项目中添加一个消息监听类" class="headerlink" title="2.4.5.2 在消费者项目中添加一个消息监听类"></a>2.4.5.2 在消费者项目中添加一个消息监听类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和fanout类型相同，只是监听的队列不同而已</span></span><br></pre></td></tr></table></figure><h4 id="2-4-5-3-在生产者项目中添加一个消息发送controller"><a href="#2-4-5-3-在生产者项目中添加一个消息发送controller" class="headerlink" title="2.4.5.3 在生产者项目中添加一个消息发送controller"></a>2.4.5.3 在生产者项目中添加一个消息发送controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.rabbit.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/28 11:50 AM</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>()</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * topic类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/topic/&#123;msg&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">topicProducerOne</span><span class="params">(@PathVariable(<span class="string">"msg"</span>)</span> String msg) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"topic:生产消息:"</span> + msg);</span><br><span class="line">        template.convertAndSend(<span class="string">"topic_exchange"</span>, <span class="string">"com.jiafly.test"</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-5-4-测试"><a href="#2-4-5-4-测试" class="headerlink" title="2.4.5.4 测试"></a>2.4.5.4 测试</h4><p>分别启动两个项目，在浏览器的路径上输入<a href="http://localhost:1180/topic/测试消息" target="_blank" rel="noopener">http://localhost:1180/topic/测试消息</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用<code>*</code>或者<code>#</code>表示</p><h2 id="2-5-延时队列"><a href="#2-5-延时队列" class="headerlink" title="2.5 延时队列"></a>2.5 延时队列</h2><h3 id="2-5-1-延时队列能做什么"><a href="#2-5-1-延时队列能做什么" class="headerlink" title="2.5.1 延时队列能做什么"></a>2.5.1 延时队列能做什么</h3><ul><li>订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。</li><li>短信通知：下单成功后 60s 之后给用户发送短信通知。</li><li>失败重试：业务操作失败后，间隔一定的时间进行失败重试</li></ul><p>这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。</p><p>在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。<br><img src="/image/rabbit/delay-mq.jpg" alt="延时队列"></p><h3 id="2-5-2-死信交换器DLX-Dead-Letter-Exchange"><a href="#2-5-2-死信交换器DLX-Dead-Letter-Exchange" class="headerlink" title="2.5.2 死信交换器DLX(Dead-Letter-Exchange)"></a>2.5.2 死信交换器DLX(Dead-Letter-Exchange)</h3><p>DLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。</p><p>Router: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.</p><p>具体代码实现:</p><h4 id="2-5-2-1-在消费者项目中添加一个配置类"><a href="#2-5-2-1-在消费者项目中添加一个配置类" class="headerlink" title="2.5.2.1 在消费者项目中添加一个配置类"></a>2.5.2.1 在消费者项目中添加一个配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/2 12:44 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"delay_exchange"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转发队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">routerQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"router.queue"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转发队列绑定交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">routerBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(routerQueue()).to(delayExchange()).with(<span class="string">"router.routing.key"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">deadLetterQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap(<span class="number">16</span>);</span><br><span class="line">        arguments.put(<span class="string">"x-dead-letter-exchange"</span>, <span class="string">"delay_exchange"</span>);</span><br><span class="line">        arguments.put(<span class="string">"x-dead-letter-routing-key"</span>, <span class="string">"router.routing.key"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"dead.letter.queue"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, arguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 死信队列绑定交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">deadLetterBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(<span class="string">"dead.letter.routing.key"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-2-在消费者项目中添加一个消息监听类"><a href="#2-5-2-2-在消费者项目中添加一个消息监听类" class="headerlink" title="2.5.2.2 在消费者项目中添加一个消息监听类"></a>2.5.2.2 在消费者项目中添加一个消息监听类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/3 6:13 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"router.queue"</span>)</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delayConsumer</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"delay.queue1接收消息:&#123;&#125;"</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-3-在生产者项目中添加一个消息发送controller"><a href="#2-5-2-3-在生产者项目中添加一个消息发送controller" class="headerlink" title="2.5.2.3 在生产者项目中添加一个消息发送controller"></a>2.5.2.3 在生产者项目中添加一个消息发送controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jiafly.rabbit.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.AbstractJavaTypeMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuyi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/3 7:17 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>()</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/delay/&#123;msg&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delayProducerOne</span><span class="params">(@PathVariable(<span class="string">"msg"</span>)</span> String msg) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"delay:生产消息:"</span> + msg);</span><br><span class="line">        template.convertAndSend(<span class="string">"delay_exchange"</span>, <span class="string">"dead.letter.routing.key"</span>, msg, message -&gt; &#123;</span><br><span class="line">            message.getMessageProperties().setExpiration(<span class="number">30</span> * <span class="number">1000</span> + <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-4-测试"><a href="#2-5-2-4-测试" class="headerlink" title="2.5.2.4 测试"></a>2.5.2.4 测试</h4><p>分别启动两个项目，在浏览器的路径上输入<a href="http://localhost:1180/delay/测试消息" target="_blank" rel="noopener">http://localhost:1180/delay/测试消息</a>，就可在消费者项目中看到打印的信息。30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。</p><h2 id="2-6-消息的持久化"><a href="#2-6-消息的持久化" class="headerlink" title="2.6 消息的持久化"></a>2.6 消息的持久化</h2><p>为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。<br>创建时候的参数:</p><ul><li><code>durable</code><br>是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 </li><li><code>execulusive</code><br>表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable </li><li><code>autoDelete</code><br>当没有生成者/消费者使用此队列时，此队列会被自动删除。<br>(即当最后一个消费者退订后即被删除)</li></ul><p><strong>设置消息持久化必须先设置队列持久化</strong>，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。<code>消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的</code>。其实在前面就已经使用持久化了。我们在管理后台去看一下。</p><h2 id="2-7-消息的确认与拒绝"><a href="#2-7-消息的确认与拒绝" class="headerlink" title="2.7 消息的确认与拒绝"></a>2.7 消息的确认与拒绝</h2><p>消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：</p><ul><li><p><code>自动确认模式</code>:<br>当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。</p></li><li><p><code>显式确认模式</code>:<br>消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息</p></li></ul><p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间。</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-介绍</title>
      <link href="/2018/09/19/docker/Docker-%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/09/19/docker/Docker-%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><h2 id="1-1-什么是Docker？"><a href="#1-1-什么是Docker？" class="headerlink" title="1.1 什么是Docker？"></a>1.1 什么是Docker？</h2><p>Docker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为<strong>容器</strong>。</p><a id="more"></a><p>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。<br>传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><h2 id="1-2-为什么要使用docker？"><a href="#1-2-为什么要使用docker？" class="headerlink" title="1.2 为什么要使用docker？"></a>1.2 为什么要使用docker？</h2><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p><ul><li><strong>更高效的利用系统资源</strong></li></ul><p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p><ul><li><strong>更快速的启动时间</strong></li></ul><p>传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。</p><ul><li><strong>一致的运行环境</strong></li></ul><p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。</p><ul><li><strong>持续交付和部署</strong></li></ul><p>使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。</p><ul><li><strong>更轻松的迁移</strong></li></ul><p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p><ul><li><strong>更轻松的维护和扩展</strong></li></ul><p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p><ul><li><strong>对比传统虚拟机总结</strong></li></ul><table><thead><tr><th>特性</th><th align="center">容器</th><th align="center">虚拟机</th></tr></thead><tbody><tr><td><strong>启动</strong></td><td align="center">秒级</td><td align="center">分钟级</td></tr><tr><td><strong>硬盘使用</strong></td><td align="center">一般为MB</td><td align="center">一般为GB</td></tr><tr><td><strong>性能</strong></td><td align="center">接近原生</td><td align="center">弱于</td></tr><tr><td><strong>系统支持量</strong></td><td align="center">单机支持上千个容器</td><td align="center">一般几十个</td></tr></tbody></table><h1 id="2-Docker的几个基本概念"><a href="#2-Docker的几个基本概念" class="headerlink" title="2. Docker的几个基本概念"></a>2. Docker的几个基本概念</h1><h2 id="2-1-Docker镜像-image"><a href="#2-1-Docker镜像-image" class="headerlink" title="2.1 Docker镜像(image)"></a>2.1 Docker镜像(image)</h2><p>我们都知道，<strong>操作系统分为内核和用户空间</strong>。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。</p><p>因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为<strong>分层存储的架构</strong>。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p><strong>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</strong></p><h2 id="2-2-Docker容器-container"><a href="#2-2-Docker容器-container" class="headerlink" title="2.2 Docker容器(container)"></a>2.2 Docker容器(container)</h2><p>镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p><strong>容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的<em>命名空间</em></strong>。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。</p><p>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。</p><h2 id="2-3-Docker仓库-registry"><a href="#2-3-Docker仓库-registry" class="headerlink" title="2.3 Docker仓库(registry)"></a>2.3 Docker仓库(registry)</h2><p>镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</p><p>下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。</p><h3 id="2-3-1-公有仓库"><a href="#2-3-1-公有仓库" class="headerlink" title="2.3.1 公有仓库"></a>2.3.1 公有仓库</h3><p>最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。</p><p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。</p><h3 id="2-3-2-私有仓库"><a href="#2-3-2-私有仓库" class="headerlink" title="2.3.2 私有仓库"></a>2.3.2 私有仓库</h3><p>用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
