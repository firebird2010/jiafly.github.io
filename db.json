{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"source/image/11.jpg","path":"image/11.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/delay-mq.jpg","path":"image/rabbit/delay-mq.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/direct.png","path":"image/rabbit/direct.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-banding.jpg","path":"image/rabbit/mq-banding.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-basic.png","path":"image/rabbit/mq-basic.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-kafka.png","path":"image/rabbit/mq-kafka.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-exchange.jpg","path":"image/rabbit/mq-exchange.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-fanout.jpg","path":"image/rabbit/mq-fanout.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-miaosha.png","path":"image/rabbit/mq-miaosha.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-order-old.png","path":"image/rabbit/mq-order-old.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-order.png","path":"image/rabbit/mq-order.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-p2p.png","path":"image/rabbit/mq-p2p.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-rabbit.png","path":"image/rabbit/mq-rabbit.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-subPush.png","path":"image/rabbit/mq-subPush.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-yibu.png","path":"image/rabbit/mq-yibu.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-yibubingxing.png","path":"image/rabbit/mq-yibubingxing.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-yibuchuanxing.png","path":"image/rabbit/mq-yibuchuanxing.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/p2p.png","path":"image/rabbit/p2p.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/pubsub.png","path":"image/rabbit/pubsub.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/topic.png","path":"image/rabbit/topic.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/headImage.jpg","path":"images/headImage.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/image/rabbit/mq-direct.jpg","path":"image/rabbit/mq-direct.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-topic.jpg","path":"image/rabbit/mq-topic.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-yunzhuanliucheng.jpg","path":"image/rabbit/mq-yunzhuanliucheng.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1536859920000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1536854432582},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1536854432583},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1536854432583},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1536854432584},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1536854432584},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1536854432584},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1536854432584},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1536854432585},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1536854432585},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1536854432585},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1536854432585},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1536854432585},{"_id":"themes/next/_config.yml","hash":"370fd94251c3bdad4a3596d12974dac54585062e","modified":1546215005571},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1536854432586},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1536854432586},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1536854432607},{"_id":"source/_posts/RabbitMQ.md","hash":"d3b7d1caccf8b98a9c17fe5c7937e141daf8ed84","modified":1543976287336},{"_id":"source/_posts/Springboot2.0集成redis.md","hash":"4aebb1e54e93439cf54e0fc6fd97e3a0aba67241","modified":1541649203825},{"_id":"source/_posts/从零开始使用Hexo搭建你的个人博客.md","hash":"c026940eccd89ae3e35721f37fa497f7dbf07f32","modified":1536760032784},{"_id":"source/about/index.md","hash":"c125d02c1a5cfa2568cb44a679b3ebac5baff009","modified":1536730278626},{"_id":"source/categories/index.md","hash":"6b0b16cb927cebc8b1722681b8345a5d53a3eddf","modified":1536730323277},{"_id":"source/tags/index.md","hash":"ef090391803f0226adeb80d70cb36b6dbcaf6da8","modified":1536730323273},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1536854432583},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1536854432583},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1536854432583},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1536854432584},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1536854432586},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1536854432586},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1536854432586},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1536854432586},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1536854432587},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1536854432587},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1536854432587},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1536854432587},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1536854432587},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1536854432587},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1536854432588},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1536854432588},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1536854432588},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1536854432588},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1536854432588},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1536854432589},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1536854432589},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1536854432605},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1536854432606},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1536854432606},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1536854432606},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1536854432607},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1536854432607},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1536854432607},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1536854432608},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1536854432609},{"_id":"themes/next/source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1536859920755},{"_id":"themes/next/source/CNAME","hash":"f2a2ed867d543d9b6ad92bc122f3538a1d56c42e","modified":1536731784000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1536854432704},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1536854432704},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1536854432704},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432647},{"_id":"source/_posts/nginx/nginx01.md","hash":"d81d729836f54ff7ba22e1b2fa4d4592077d172e","modified":1546095509329},{"_id":"source/_posts/vim/vim使用指南.md","hash":"b5722d26288d36c571fc219b8cc42982ec902702","modified":1546215055385},{"_id":"source/image/11.jpg","hash":"ca343ba9238dfeb636769a56b6a7ba35c7744952","modified":1539241307000},{"_id":"source/image/rabbit/delay-mq.jpg","hash":"8ca5da0d2fbe7101f549fccbd9e09a2585ccb2cf","modified":1543803092477},{"_id":"source/image/rabbit/direct.png","hash":"0ba63de33dd09d3a1d6991e137d9ba2b86339e9f","modified":1543340300105},{"_id":"source/image/rabbit/mq-banding.jpg","hash":"518c0b6fdd25743ef8afbd0f6ef715011c5d183c","modified":1543424238102},{"_id":"source/image/rabbit/mq-basic.png","hash":"8dfef652adcbab142f3aa48e016d13638ad51108","modified":1543332258179},{"_id":"source/image/rabbit/mq-kafka.png","hash":"be560f12df555a8757a7778f2661507b60223a48","modified":1543337322774},{"_id":"source/image/rabbit/mq-exchange.jpg","hash":"f385789ea47f8e12173f2f9ce685671904f6e2b0","modified":1543423659701},{"_id":"source/image/rabbit/mq-fanout.jpg","hash":"592b21617290d0fd5d4208ab1d7c1851092b347f","modified":1543652937916},{"_id":"source/image/rabbit/mq-miaosha.png","hash":"7df0e1b286581f2a1f50b4edbe83b0173febceef","modified":1543336497865},{"_id":"source/image/rabbit/mq-order-old.png","hash":"87be91fd0d02c3caf87a4c0fb1adf5ba358d92ae","modified":1543337267534},{"_id":"source/image/rabbit/mq-order.png","hash":"8aa26063b4782184567dd42b8f6623bf2b086adb","modified":1543337143964},{"_id":"source/image/rabbit/mq-p2p.png","hash":"194a5782e42ccd73c2c301207674b6ba825cc054","modified":1543337565154},{"_id":"source/image/rabbit/mq-rabbit.png","hash":"7582cae932ca99a85a28542f861781cf2e0f8ea3","modified":1543333148764},{"_id":"source/image/rabbit/mq-subPush.png","hash":"9f6ecf7551d172e4c4eaac3a9d67071cf6f3b22f","modified":1543337575464},{"_id":"source/image/rabbit/mq-yibu.png","hash":"9d18af2ad27f0a032381e8140dc78de20081c25a","modified":1543336262327},{"_id":"source/image/rabbit/mq-yibubingxing.png","hash":"1e44d0091d38e075c7c1b3542f674a89575d468e","modified":1543336234041},{"_id":"source/image/rabbit/mq-yibuchuanxing.png","hash":"30da36a811fbb3cf862dfdf16a2ae0ba70fb1760","modified":1543336125224},{"_id":"source/image/rabbit/p2p.png","hash":"2b6a18e703af96042fb81c904f60615d5501f3cc","modified":1543337822632},{"_id":"source/image/rabbit/pubsub.png","hash":"582e814ea15a73daa11b55d1c7e235cfa4a58faf","modified":1543337884964},{"_id":"source/image/rabbit/topic.png","hash":"13921a1b47d658785fa568fb2d3d68ceaeb9fdb7","modified":1543370313534},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1536854432589},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1536854432589},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1536854432590},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1536854432590},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1536854432590},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1536854432590},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1536854432590},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1536854432591},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1536854432591},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1536854432591},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1536854432591},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1536854432592},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1536854432592},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1536854432592},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1536854432592},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1536854432593},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1536854432594},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1536854432595},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1536854432601},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1536854432602},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1536854432602},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1536854432602},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1536854432603},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1536854432603},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1536854432603},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1536854432609},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1536854432610},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1536854432610},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1536854432610},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1536854432611},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1536854432611},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1536854432611},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1536854432611},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1536854432611},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1536854432646},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1536854432648},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1536854432648},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1536854432648},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1536854432649},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1536854432649},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1536854432649},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1536854432650},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1536854432650},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1536854432650},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1536854432651},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1536854432651},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1536854432651},{"_id":"themes/next/source/images/headImage.jpg","hash":"22fe9c31602ffe60aacb9f219937e6e63f970377","modified":1535608323000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536854432651},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1536854432652},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536854432652},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1536854432653},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1536854432653},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1536854432654},{"_id":"source/image/rabbit/mq-direct.jpg","hash":"52b9ba59d94f1976ffe4aa592daf7c695b1a6121","modified":1543424560234},{"_id":"source/image/rabbit/mq-topic.jpg","hash":"d94534e876eea78ee4a4a22586fa35a4e136b93b","modified":1543425218792},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432594},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432594},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432633},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432634},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432635},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432645},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432646},{"_id":"source/image/rabbit/mq-yunzhuanliucheng.jpg","hash":"d310f1143d9191c985d5b296d31152da42f725e3","modified":1543422975284},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1536854432591},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1536854432591},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1536854432592},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1536854432592},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1536854432593},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1536854432593},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1536854432593},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1536854432593},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1536854432593},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1536854432594},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1536854432594},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1536854432594},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1536854432595},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1536854432595},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1536854432595},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1536854432596},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1536854432596},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1536854432596},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1536854432596},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1536854432597},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1536854432597},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1536854432597},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1536854432598},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1536854432598},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1536854432598},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1536854432598},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1536854432599},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1536854432599},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1536854432599},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1536854432600},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1536854432600},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1536854432600},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1536854432601},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1536854432601},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1536854432604},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1536854432604},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1536854432605},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1536854432605},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1536854432632},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1536854432632},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1536854432634},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1536854432634},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1536854432644},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1536854432644},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1536854432645},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1536854432645},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1536854432654},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1536854432654},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1536854432654},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1536854432655},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1536854432655},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1536854432656},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1536854432656},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1536854432656},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1536854432656},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1536854432657},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1536854432657},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1536854432663},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1536854432666},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1536854432666},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1536854432666},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1536854432666},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1536854432672},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1536854432672},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1536854432673},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1536854432673},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1536854432674},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1536854432674},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1536854432674},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1536854432674},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1536854432674},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1536854432687},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1536854432688},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1536854432688},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1536854432688},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1536854432689},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1536854432689},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1536854432689},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1536854432690},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1536854432690},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1536854432691},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1536854432691},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1536854432691},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1536854432693},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1536854432693},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1536854432693},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1536854432693},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1536854432693},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1536854432693},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1536854432694},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1536854432695},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1536854432695},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1536854432700},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1536854432701},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1536854432703},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1536854432703},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1536854432704},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536854432688},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1536854432604},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1536854432604},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1536854432611},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1536854432619},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1536854432628},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1536854432628},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1536854432629},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1536854432629},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1536854432630},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1536854432630},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1536854432631},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1536854432636},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1536854432637},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1536854432638},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1536854432639},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1536854432639},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1536854432639},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1536854432639},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1536854432639},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1536854432643},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"821751c1b9f0a1ee5e45e82bac1459a8197b6243","modified":1546215412373},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl.bak","hash":"dc1fe0289e707460df409e16ed771d6016671b86","modified":1546214522000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1536854432644},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1536854432644},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1536854432644},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1536854432644},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1536854432656},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1536854432661},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1536854432662},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1536854432662},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536854432667},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536854432667},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536854432667},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536854432668},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536854432668},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536854432668},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1536854432671},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1536854432672},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1536854432672},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1536854432673},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536854432674},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1536854432675},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1536854432675},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1536854432676},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1536854432700},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1536854432700},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1536854432662},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1536854432686},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1536854432687},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1536854432702},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1536854432618},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1536854432618},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1536854432618},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1536854432618},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1536854432619},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1536854432620},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1536854432620},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1536854432621},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1536854432621},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1536854432622},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1536854432622},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1536854432622},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1536854432623},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1536854432623},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1536854432624},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1536854432624},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1536854432625},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1536854432625},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1536854432625},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1536854432626},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1536854432626},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1536854432627},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1536854432627},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1536854432641},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1536854432643},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1536854432659},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1536854432659},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1536854432659},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1536854432660},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1536854432660},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536854432668},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1536854432669},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1536854432669},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1536854432670},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1536854432671},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1536854432671},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1536854432679},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1536854432678},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1536854432684},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1536854432665},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1536854432699},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1536854432683},{"_id":"public/content.json","hash":"65a1ccdf480a1639ee874815556fc1cf1f8236e0","modified":1546215767161},{"_id":"public/search.xml","hash":"b263c0f2f442c1e46387f1b941acd29a6d194256","modified":1546215767170},{"_id":"public/404.html","hash":"6709bd5419dc9e42d5d578c44bf1917c5c4f89ef","modified":1546215767179},{"_id":"public/about/index.html","hash":"911de1e7369b85000ea40efa04df80f80b699422","modified":1546215767179},{"_id":"public/categories/index.html","hash":"87606e6f7eb46c71403e70bd09f4e08c8b68a280","modified":1546215767179},{"_id":"public/tags/index.html","hash":"2614f54d1df56498baf25872b85037650484d1c8","modified":1546215767180},{"_id":"public/2018/12/30/vim/vim使用指南/index.html","hash":"1cce68caeb748f5a26e15512ea4b57b2f42310b3","modified":1546215767180},{"_id":"public/2018/12/29/nginx/nginx01/index.html","hash":"561785fec87f6111af6341a294a5ed8690685d51","modified":1546215767180},{"_id":"public/2018/11/27/RabbitMQ/index.html","hash":"e0364c47364f5eef4126a8cebfe71834d60d81fd","modified":1546215767180},{"_id":"public/2016/12/26/Springboot2.0集成redis/index.html","hash":"51dea4e9974e04a6c292fde8ee102ac8607ed1af","modified":1546215767180},{"_id":"public/2016/11/26/从零开始使用Hexo搭建你的个人博客/index.html","hash":"ce7afc7fcfc4a5bd75dd8749839771b19155f886","modified":1546215767180},{"_id":"public/archives/index.html","hash":"2923d5314ceb8aec76ed3de5023b33615742ee14","modified":1546215767181},{"_id":"public/archives/2016/index.html","hash":"be9aed65682612c5326bb1ce2938a57f205bf4e6","modified":1546215767181},{"_id":"public/archives/2016/11/index.html","hash":"418c8519c7d703fc3a07717200960a469fd9ac2a","modified":1546215767181},{"_id":"public/archives/2016/12/index.html","hash":"3599db1bc2dc18f68874148214879c4731c123e6","modified":1546215767181},{"_id":"public/archives/2018/index.html","hash":"3d56f56dded27f39d20a1bbaec27bbb175788ac5","modified":1546215767181},{"_id":"public/archives/2018/11/index.html","hash":"b82c30e07a0c33a6ffdd00eecee48b63b4327676","modified":1546215767181},{"_id":"public/archives/2018/12/index.html","hash":"db6edbad09efee5165af211fb080d64ca09d96ec","modified":1546215767181},{"_id":"public/categories/学习笔记/index.html","hash":"c93076ff136f23a261ed8b9a75d170f9ee8e2268","modified":1546215767181},{"_id":"public/categories/学习日记/index.html","hash":"6fa1405895b2ffcae31b31f4ff30b0249793470d","modified":1546215767181},{"_id":"public/categories/nginx/index.html","hash":"06cab13bfb09db76bf9f262bb45becbcfe337f7d","modified":1546215767181},{"_id":"public/categories/linux/index.html","hash":"b8adf59476d96a030bd48b0ab2ec80f4da107f75","modified":1546215767181},{"_id":"public/index.html","hash":"7a6d7db3659d46bf2372e3ed0be55a43d0ccbfa9","modified":1546215767181},{"_id":"public/tags/Rabbit/index.html","hash":"88ddb13ba94f244eabe6f58f9af88418e793a951","modified":1546215767181},{"_id":"public/tags/SpringBoot/index.html","hash":"d2106116b0392880b20a5b123f9e5160c3f5f58c","modified":1546215767181},{"_id":"public/tags/Redis/index.html","hash":"d4f9140fd7c3182a62376c3f937f4f3c334965db","modified":1546215767182},{"_id":"public/tags/Hexo/index.html","hash":"6a7cb5abaf56323501d65a4accd6a7916ec8bf12","modified":1546215767182},{"_id":"public/tags/nginx/index.html","hash":"01662461e82b8cf1e54de258e313d92b970cc97b","modified":1546215767182},{"_id":"public/tags/linux/index.html","hash":"4284637989ab3eed61d8cf1afd41cc937fc693eb","modified":1546215767182},{"_id":"public/CNAME","hash":"f2a2ed867d543d9b6ad92bc122f3538a1d56c42e","modified":1546215767192},{"_id":"public/image/rabbit/delay-mq.jpg","hash":"8ca5da0d2fbe7101f549fccbd9e09a2585ccb2cf","modified":1546215767192},{"_id":"public/image/rabbit/direct.png","hash":"0ba63de33dd09d3a1d6991e137d9ba2b86339e9f","modified":1546215767192},{"_id":"public/image/rabbit/mq-basic.png","hash":"8dfef652adcbab142f3aa48e016d13638ad51108","modified":1546215767192},{"_id":"public/image/rabbit/mq-banding.jpg","hash":"518c0b6fdd25743ef8afbd0f6ef715011c5d183c","modified":1546215767192},{"_id":"public/image/rabbit/mq-kafka.png","hash":"be560f12df555a8757a7778f2661507b60223a48","modified":1546215767192},{"_id":"public/image/rabbit/mq-exchange.jpg","hash":"f385789ea47f8e12173f2f9ce685671904f6e2b0","modified":1546215767193},{"_id":"public/image/rabbit/mq-fanout.jpg","hash":"592b21617290d0fd5d4208ab1d7c1851092b347f","modified":1546215767193},{"_id":"public/image/rabbit/mq-miaosha.png","hash":"7df0e1b286581f2a1f50b4edbe83b0173febceef","modified":1546215767193},{"_id":"public/image/rabbit/mq-order-old.png","hash":"87be91fd0d02c3caf87a4c0fb1adf5ba358d92ae","modified":1546215767193},{"_id":"public/image/rabbit/mq-order.png","hash":"8aa26063b4782184567dd42b8f6623bf2b086adb","modified":1546215767193},{"_id":"public/image/rabbit/mq-p2p.png","hash":"194a5782e42ccd73c2c301207674b6ba825cc054","modified":1546215767193},{"_id":"public/image/rabbit/mq-rabbit.png","hash":"7582cae932ca99a85a28542f861781cf2e0f8ea3","modified":1546215767193},{"_id":"public/image/rabbit/mq-subPush.png","hash":"9f6ecf7551d172e4c4eaac3a9d67071cf6f3b22f","modified":1546215767193},{"_id":"public/image/rabbit/mq-yibu.png","hash":"9d18af2ad27f0a032381e8140dc78de20081c25a","modified":1546215767193},{"_id":"public/image/rabbit/mq-yibubingxing.png","hash":"1e44d0091d38e075c7c1b3542f674a89575d468e","modified":1546215767193},{"_id":"public/image/rabbit/mq-yibuchuanxing.png","hash":"30da36a811fbb3cf862dfdf16a2ae0ba70fb1760","modified":1546215767193},{"_id":"public/image/rabbit/p2p.png","hash":"2b6a18e703af96042fb81c904f60615d5501f3cc","modified":1546215767193},{"_id":"public/image/rabbit/pubsub.png","hash":"582e814ea15a73daa11b55d1c7e235cfa4a58faf","modified":1546215767193},{"_id":"public/image/rabbit/topic.png","hash":"13921a1b47d658785fa568fb2d3d68ceaeb9fdb7","modified":1546215767193},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1546215767193},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1546215767193},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1546215767193},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1546215767194},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1546215767194},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1546215767194},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1546215767194},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1546215767194},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1546215767194},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1546215767194},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1546215767194},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1546215767194},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1546215767194},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546215767194},{"_id":"public/images/headImage.jpg","hash":"22fe9c31602ffe60aacb9f219937e6e63f970377","modified":1546215767194},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1546215767194},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1546215767194},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1546215767194},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1546215767194},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1546215767194},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1546215767194},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1546215767195},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1546215767195},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1546215767195},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1546215767195},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1546215767195},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1546215767195},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1546215767195},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1546215767195},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1546215767195},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1546215767195},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1546215767195},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1546215767195},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1546215767195},{"_id":"public/image/rabbit/mq-direct.jpg","hash":"52b9ba59d94f1976ffe4aa592daf7c695b1a6121","modified":1546215767604},{"_id":"public/image/rabbit/mq-topic.jpg","hash":"d94534e876eea78ee4a4a22586fa35a4e136b93b","modified":1546215767605},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1546215767615},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1546215767615},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1546215767623},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1546215767623},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1546215767623},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1546215767623},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1546215767623},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1546215767623},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1546215767623},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1546215767623},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1546215767623},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1546215767623},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1546215767623},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1546215767623},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1546215767623},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1546215767623},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1546215767623},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1546215767623},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1546215767624},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1546215767624},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1546215767624},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1546215767624},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1546215767624},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1546215767624},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1546215767624},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1546215767625},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1546215767625},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1546215767625},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1546215767625},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1546215767625},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1546215767625},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1546215767625},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1546215767625},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1546215767625},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1546215767625},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1546215767625},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1546215767625},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1546215767625},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1546215767625},{"_id":"public/css/main.css","hash":"a87ce44e388ee542bdccdb3ce0f6023adf5457bd","modified":1546215767625},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1546215767625},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1546215767625},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1546215767625},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1546215767625},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1546215767625},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1546215767626},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1546215767626},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1546215767626},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1546215767626},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1546215767626},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1546215767626},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1546215767626},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1546215767626},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1546215767626},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1546215767626},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1546215767626},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1546215767626},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1546215767626},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1546215767626},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1546215767626},{"_id":"public/image/11.jpg","hash":"ca343ba9238dfeb636769a56b6a7ba35c7744952","modified":1546215767627},{"_id":"public/image/rabbit/mq-yunzhuanliucheng.jpg","hash":"d310f1143d9191c985d5b296d31152da42f725e3","modified":1546215767627},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1546215767627},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1546215767627},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1546215767627},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1546215767644}],"Category":[{"name":"学习笔记","_id":"cjqbku07i0005zbus8r8vic2w"},{"name":"学习日记","_id":"cjqbku07m0008zbusolcd1p48"},{"name":"nginx","_id":"cjqbku0cl000lzbusz23a3gle"},{"name":"linux","_id":"cjqbku0cm000nzbus6vwgogqd"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2018-09-13T17:33:39.395Z","updated":"2018-09-13T17:32:00.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjqbku05e0000zbus7lcid4sh","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n"},{"title":"关于","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ntype: about\nlayout: \"about\"\n---\n","date":"2018-09-12T05:31:18.627Z","updated":"2018-09-12T05:31:18.626Z","path":"about/index.html","comments":1,"_id":"cjqbku07f0002zbusghuq206b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\nlayout: \"categories\"\n---\n","date":"2018-09-12T05:32:03.278Z","updated":"2018-09-12T05:32:03.277Z","path":"categories/index.html","comments":1,"_id":"cjqbku07h0004zbus4f5tagzg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","type":"tags","layout":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: tags\nlayout: \"tags\"\n---\n\n","date":"2018-09-12T05:32:03.273Z","updated":"2018-09-12T05:32:03.273Z","path":"tags/index.html","comments":1,"_id":"cjqbku0bv000izbus2iczkg3g","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"RabbitMQ实战","date":"2018-11-27T12:31:16.000Z","_content":"# 消息中间件\n## 什么是消息中间\n消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、\nJSON 等，也可以很复杂，比如内嵌对象。\n\n消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。\n\n消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点\n(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。\n\n目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。\n\n## 消息中间件的作用\n消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消\n息中间件的作用可以概括如下。\n### 解耦\n在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。\n### 冗余〈存储)\n有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。\n### 扩展性\n因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。\n### 削峰\n在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。\n### 可恢复性\n当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。\n### 顺序保证\n在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。\n### 缓冲\n在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。\n### 异步通信\n在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。\n\n# RabbitMQ入门\n## RabbitMQ介绍\nRabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息\n队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。\n\nRabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。\n\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\n## RabbitMQ安装\n- 使用docker安装(3-management版本自带管理后台)\n```bash\n$ docker pull rabbitmq:3-management \n```\n- 启动rabbitMQ并且启动管理后台\n```bash\n$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management\n\n$ docker start rabbitmq\n```\n- 查看管理后台\n在浏览器打开 http://localhost:15672/ 输入用户名:admin 密码:admin 可进入管理后台\n\n\n## 相关概念介绍\n### 生产者和消费者\n- Producer:生产者，就是投递消息的一方。\n生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。\n\n- Consumer:消费者，就是接收消息的一方。\n消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。\n\n- Broker:消息中间件的服务节点。\n对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。\n\nRabbitMQ运转流程\n![RabbitMQ运转流程](/image/rabbit/mq-yunzhuanliucheng.jpg)\n\n### 交换器Exchange，路由RoutingKey，绑定Binding\n- Exchange:交换器\n![交换器](/image/rabbit/mq-exchange.jpg)\nMQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。\nRabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。\n\n- RoutingKey:路由键\n生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。\n\n- Binding:绑定\nRabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:\n![绑定](/image/rabbit/mq-banding.jpg)\n\n### 交换器类型\nRabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提\n到另外两种类型:System和自定义，这里就不详细介绍了。\n#### fanout\n就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：\n![fanout](/image/rabbit/mq-fanout.jpg)\n#### direct(默认的交换器类型)\ndirect类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：\n![direct](/image/rabbit/mq-direct.jpg)\n#### topic\n上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:\n- RoutingKey为一个点号\".\"分隔的字符串(被点号\".\"分隔开的每一段独立的字符串称为一个单词)，如\"com.rabbitmq.client\"，\"java.util.concurrent\",\"com.hidden.client\"等\n- BindingKey也是点号\".\"分隔\n- BindingKey中可以存在两种特殊字符串\"星号\"和\"#\"，用于做模糊匹配，其中\"星号\"用于匹配一个单词，”#\"用于匹配多规格单词(可以是零个)。\n如下图：\n![topic](/image/rabbit/mq-topic.jpg)\n思考: \n1.路由建 \"com.rabbitmq.client\"会路由到哪一个队列？\n2.路由建 \"com.hidden.client\"会路由到哪一个队列？\n3.路由建 \"com.hidden.demo\"会路由到哪一个队列？\n4.路由建 \"java.util.concurrent\"会路由到哪一个队列？\n5.路由建 \"java.rabbitmq.demo\"会路由到哪一个队列？\n\n#### headers(不常用)\nheaders类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中\n的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。\n\n\n## 交换器类型详解\n### \n新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer\npom.xml\n```POM\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n  </dependency>\n```\nrabbit-producer/application.properties\n```\nserver.port=1180\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\nrabbit-producer/application.properties\n```\nserver.port=1181\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\n项目创建完成\n\n### 声明一个队列各个参数的意义\nname: 队列的名称 字符串\ndurable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库\nexclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。\nautoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除\narguments: 队列中的消息什么时候会自动被删除？ 是一个Map<String, Object>，他有如下参数\n   \"x-message-ttl\": 1000  设置队列中的所有消息的生存周期\n   \"x-expires\": 1000  当队列在指定的时间没有被访问就会被删除\n   \"x-max-length\": 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉\n   \"x-max-length-bytes\":  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小\n   \"x-dead-letter-exchange\": \"\" 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉\n   \"x-dead-letter-routing-key\": \"\"  将删除的消息推送到指定交换机的指定路由键的队列中去\n   \"x-max-priority\":  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费\n   \"x-queue-mode\": \"lazy\" 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中\n   \"x-queue-master-locator\"\n\n### fanout代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:35 PM\n */\n@Configuration\npublic class FanoutConfig {\n\n    // 声明一个队列，后面有很多属性\n    @Bean\n    public Queue fanoutQueue1(){\n        return new Queue(\"fanout.queue1\");\n    }\n\n    @Bean\n    public Queue fanoutQueue2(){\n        return new Queue(\"fanout.queue2\");\n    }\n\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange(\"fanout_exchange\");\n    }\n\n    @Bean\n    public Binding fanoutBinding1(){\n        return BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());\n    }\n\n    @Bean\n    public Binding fanoutBinding2(){\n        return BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());\n    }\n\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:40 PM\n */\n@Component\n@Slf4j\npublic class FanoutConsumer {\n\n    @RabbitListener(queues = \"fanout.queue1\")\n    @RabbitHandler\n    public void fanoutConsumer1(String msg){\n        log.info(\"1fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n\n    @RabbitListener(queues = \"fanout.queue2\")\n    @RabbitHandler\n    public void fanoutConsumer2(String msg){\n        log.info(\"2fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class FanoutProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * fanout类型\n     * @param msg 消息内容\n     * @return 消息内容\n     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey\n     * 只是routingKey可以任意指定\n     */\n    @RequestMapping(\"/fanout/{msg}\")\n    public String fanoutProducer(@PathVariable(\"msg\") String msg){\n        log.info(\"fanout生产消息 msg:{}\", msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息\n        template.convertAndSend(\"fanout_exchange\",\"\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/fanout/测试消息 ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。\n\n### direct代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.direct;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author liuyi\n * @date 2018/11/29 1:40 AM\n */\n@Configuration\npublic class DirectConfig {\n\n    /**\n     * 定义两个队列\n     * @return\n     */\n    @Bean\n    public Queue directQueue1() {\n        return new Queue(\"direct.queue1\",true);\n    }\n\n    @Bean\n    public Queue directQueue2() {\n        return new Queue(\"direct.queue2\", true);\n    }\n\n    @Bean\n    public Queue directQueue3() {\n        Map<String, Object> map = new HashMap<>(16);\n        return new Queue(\"direct.queue3\",true,true, true, map);\n    }\n\n\n    /**\n     * 定义 exchange\n     * @return\n     */\n    @Bean\n    public DirectExchange directExchange() {\n        return new DirectExchange(\"direct_exchange\",true,true);\n    }\n\n    /**\n     * 队列1 绑定 exchange 并且设置routingKey为direct.1\n     * @return\n     */\n    @Bean\n    public Binding directBinding1(){\n        return BindingBuilder.bind(directQueue1()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n\n    /**\n     * 队列2 绑定 exchange 并且设置routingKey为direct.2\n     * @return\n     */\n    @Bean\n    public Binding directBinding2(){\n        return BindingBuilder.bind(directQueue2()).to(directExchange()).with(\"direct.routing.key2\");\n    }\n\n    @Bean\n    public Binding directBinding3(){\n        return BindingBuilder.bind(directQueue3()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DirectProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * direct类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/direct/queue1/{msg}\")\n    public String directProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"direct_exchange\", \"direct.routing.key1\", msg);\n        return msg;\n    }\n\n    @RequestMapping(\"/direct/queue2/{msg}\")\n    public String directProducerTwo(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"mq-direct_exchange\", \"direct.routing.key2\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/direct/queue1/测试消息1 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可\n\n### topic代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.topic;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/11/29 8:42 AM\n */\n@Configuration\npublic class TopicConfig {\n\n    /**\n     * 创建队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue topicQueue1() {\n        return new Queue(\"topic.queue1\", true);\n    }\n\n    @Bean\n    public Queue topicQueue2() {\n        return new Queue(\"topic.queue2\", true);\n    }\n\n    /**\n     * 创建交换器\n     */\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(\"topic_exchange\");\n    }\n\n    /**\n     * 绑定\n     */\n    @Bean\n    public Binding topicBinding1() {\n        return BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(\"*.jiafly.*\");\n    }\n\n    @Bean\n    public Binding topicBinding2() {\n        return BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(\"com.jiafly.*\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class TopicProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * topic类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/topic/{msg}\")\n    public String topicProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"topic:生产消息:\" + msg);\n        template.convertAndSend(\"topic_exchange\", \"com.jiafly.test\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/topic/测试消息 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示\n\n\n## 延时队列\n### 延时队列能做什么\n- 订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。\n- 短信通知：下单成功后 60s 之后给用户发送短信通知。\n- 失败重试：业务操作失败后，间隔一定的时间进行失败重试\n\n这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。\n\n在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。\n![延时队列](/image/rabbit/delay-mq.jpg)\n### 死信交换器DLX(Dead-Letter-Exchange)\nDLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。\n\nRouter: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.\n\n具体代码实现:\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\n\n/**\n * @author liuyi\n * @date 2018/12/2 12:44 AM\n */\n@Configuration\npublic class DelayConfig {\n\n    /**\n     * 定义一个交换机\n     *\n     * @return\n     */\n    @Bean\n    public DirectExchange delayExchange() {\n        return new DirectExchange(\"delay_exchange\", true, false);\n    }\n\n    /**\n     * 转发队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue routerQueue() {\n        return new Queue(\"router.queue\", true, false, false);\n    }\n\n    /**\n     * 转发队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding routerBinding() {\n        return BindingBuilder.bind(routerQueue()).to(delayExchange()).with(\"router.routing.key\");\n    }\n\n\n    /**\n     * 死信队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue deadLetterQueue() {\n        HashMap<String, Object> arguments = new HashMap(16);\n        arguments.put(\"x-dead-letter-exchange\", \"delay_exchange\");\n        arguments.put(\"x-dead-letter-routing-key\", \"router.routing.key\");\n        return new Queue(\"dead.letter.queue\", true, false, false, arguments);\n    }\n\n\n    /**\n     * 死信队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding deadLetterBinding() {\n        return BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(\"dead.letter.routing.key\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/3 6:13 PM\n */\n@Component\n@Slf4j\npublic class DelayConsumer {\n\n    @RabbitListener(queues = \"router.queue\")\n    @RabbitHandler\n    public void delayConsumer(String msg) {\n        log.info(\"delay.queue1接收消息:{}\", msg);\n    }\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.amqp.support.converter.AbstractJavaTypeMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/12/3 7:17 PM\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DelayProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * 延迟队列\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/delay/{msg}\")\n    public String delayProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"delay:生产消息:\" + msg);\n        template.convertAndSend(\"delay_exchange\", \"dead.letter.routing.key\", msg, message -> {\n            message.getMessageProperties().setExpiration(30 * 1000 + \"\");\n            return message;\n        });\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/delay/测试消息 ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。\n\n\n## 消息的持久化\n为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。\n创建时候的参数:\n- durable \n是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 \n- execulusive \n表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable \n- autoDelete \n当没有生成者/消费者使用此队列时，此队列会被自动删除。 \n(即当最后一个消费者退订后即被删除)\n\n\n设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。\n\n\n## 消息的确认与拒绝\n消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：\n- 自动确认模式:\n当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。\n\n- 显式确认模式:\n消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息\n\n如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。 \nRabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.","source":"_posts/RabbitMQ.md","raw":"\n---\ntitle: RabbitMQ实战\ndate: 2018-11-27 20:31:16\ntags: [Rabbit]\ncategories: [学习笔记]\n---\n# 消息中间件\n## 什么是消息中间\n消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、\nJSON 等，也可以很复杂，比如内嵌对象。\n\n消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。\n\n消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点\n(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。\n\n目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。\n\n## 消息中间件的作用\n消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消\n息中间件的作用可以概括如下。\n### 解耦\n在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。\n### 冗余〈存储)\n有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。\n### 扩展性\n因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。\n### 削峰\n在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。\n### 可恢复性\n当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。\n### 顺序保证\n在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。\n### 缓冲\n在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。\n### 异步通信\n在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。\n\n# RabbitMQ入门\n## RabbitMQ介绍\nRabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息\n队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。\n\nRabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。\n\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\n## RabbitMQ安装\n- 使用docker安装(3-management版本自带管理后台)\n```bash\n$ docker pull rabbitmq:3-management \n```\n- 启动rabbitMQ并且启动管理后台\n```bash\n$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management\n\n$ docker start rabbitmq\n```\n- 查看管理后台\n在浏览器打开 http://localhost:15672/ 输入用户名:admin 密码:admin 可进入管理后台\n\n\n## 相关概念介绍\n### 生产者和消费者\n- Producer:生产者，就是投递消息的一方。\n生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。\n\n- Consumer:消费者，就是接收消息的一方。\n消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。\n\n- Broker:消息中间件的服务节点。\n对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。\n\nRabbitMQ运转流程\n![RabbitMQ运转流程](/image/rabbit/mq-yunzhuanliucheng.jpg)\n\n### 交换器Exchange，路由RoutingKey，绑定Binding\n- Exchange:交换器\n![交换器](/image/rabbit/mq-exchange.jpg)\nMQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。\nRabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。\n\n- RoutingKey:路由键\n生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。\n\n- Binding:绑定\nRabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:\n![绑定](/image/rabbit/mq-banding.jpg)\n\n### 交换器类型\nRabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提\n到另外两种类型:System和自定义，这里就不详细介绍了。\n#### fanout\n就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：\n![fanout](/image/rabbit/mq-fanout.jpg)\n#### direct(默认的交换器类型)\ndirect类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：\n![direct](/image/rabbit/mq-direct.jpg)\n#### topic\n上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:\n- RoutingKey为一个点号\".\"分隔的字符串(被点号\".\"分隔开的每一段独立的字符串称为一个单词)，如\"com.rabbitmq.client\"，\"java.util.concurrent\",\"com.hidden.client\"等\n- BindingKey也是点号\".\"分隔\n- BindingKey中可以存在两种特殊字符串\"星号\"和\"#\"，用于做模糊匹配，其中\"星号\"用于匹配一个单词，”#\"用于匹配多规格单词(可以是零个)。\n如下图：\n![topic](/image/rabbit/mq-topic.jpg)\n思考: \n1.路由建 \"com.rabbitmq.client\"会路由到哪一个队列？\n2.路由建 \"com.hidden.client\"会路由到哪一个队列？\n3.路由建 \"com.hidden.demo\"会路由到哪一个队列？\n4.路由建 \"java.util.concurrent\"会路由到哪一个队列？\n5.路由建 \"java.rabbitmq.demo\"会路由到哪一个队列？\n\n#### headers(不常用)\nheaders类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中\n的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。\n\n\n## 交换器类型详解\n### \n新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer\npom.xml\n```POM\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n  </dependency>\n```\nrabbit-producer/application.properties\n```\nserver.port=1180\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\nrabbit-producer/application.properties\n```\nserver.port=1181\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\n项目创建完成\n\n### 声明一个队列各个参数的意义\nname: 队列的名称 字符串\ndurable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库\nexclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。\nautoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除\narguments: 队列中的消息什么时候会自动被删除？ 是一个Map<String, Object>，他有如下参数\n   \"x-message-ttl\": 1000  设置队列中的所有消息的生存周期\n   \"x-expires\": 1000  当队列在指定的时间没有被访问就会被删除\n   \"x-max-length\": 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉\n   \"x-max-length-bytes\":  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小\n   \"x-dead-letter-exchange\": \"\" 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉\n   \"x-dead-letter-routing-key\": \"\"  将删除的消息推送到指定交换机的指定路由键的队列中去\n   \"x-max-priority\":  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费\n   \"x-queue-mode\": \"lazy\" 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中\n   \"x-queue-master-locator\"\n\n### fanout代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:35 PM\n */\n@Configuration\npublic class FanoutConfig {\n\n    // 声明一个队列，后面有很多属性\n    @Bean\n    public Queue fanoutQueue1(){\n        return new Queue(\"fanout.queue1\");\n    }\n\n    @Bean\n    public Queue fanoutQueue2(){\n        return new Queue(\"fanout.queue2\");\n    }\n\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange(\"fanout_exchange\");\n    }\n\n    @Bean\n    public Binding fanoutBinding1(){\n        return BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());\n    }\n\n    @Bean\n    public Binding fanoutBinding2(){\n        return BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());\n    }\n\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:40 PM\n */\n@Component\n@Slf4j\npublic class FanoutConsumer {\n\n    @RabbitListener(queues = \"fanout.queue1\")\n    @RabbitHandler\n    public void fanoutConsumer1(String msg){\n        log.info(\"1fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n\n    @RabbitListener(queues = \"fanout.queue2\")\n    @RabbitHandler\n    public void fanoutConsumer2(String msg){\n        log.info(\"2fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class FanoutProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * fanout类型\n     * @param msg 消息内容\n     * @return 消息内容\n     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey\n     * 只是routingKey可以任意指定\n     */\n    @RequestMapping(\"/fanout/{msg}\")\n    public String fanoutProducer(@PathVariable(\"msg\") String msg){\n        log.info(\"fanout生产消息 msg:{}\", msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息\n        template.convertAndSend(\"fanout_exchange\",\"\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/fanout/测试消息 ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。\n\n### direct代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.direct;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author liuyi\n * @date 2018/11/29 1:40 AM\n */\n@Configuration\npublic class DirectConfig {\n\n    /**\n     * 定义两个队列\n     * @return\n     */\n    @Bean\n    public Queue directQueue1() {\n        return new Queue(\"direct.queue1\",true);\n    }\n\n    @Bean\n    public Queue directQueue2() {\n        return new Queue(\"direct.queue2\", true);\n    }\n\n    @Bean\n    public Queue directQueue3() {\n        Map<String, Object> map = new HashMap<>(16);\n        return new Queue(\"direct.queue3\",true,true, true, map);\n    }\n\n\n    /**\n     * 定义 exchange\n     * @return\n     */\n    @Bean\n    public DirectExchange directExchange() {\n        return new DirectExchange(\"direct_exchange\",true,true);\n    }\n\n    /**\n     * 队列1 绑定 exchange 并且设置routingKey为direct.1\n     * @return\n     */\n    @Bean\n    public Binding directBinding1(){\n        return BindingBuilder.bind(directQueue1()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n\n    /**\n     * 队列2 绑定 exchange 并且设置routingKey为direct.2\n     * @return\n     */\n    @Bean\n    public Binding directBinding2(){\n        return BindingBuilder.bind(directQueue2()).to(directExchange()).with(\"direct.routing.key2\");\n    }\n\n    @Bean\n    public Binding directBinding3(){\n        return BindingBuilder.bind(directQueue3()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DirectProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * direct类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/direct/queue1/{msg}\")\n    public String directProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"direct_exchange\", \"direct.routing.key1\", msg);\n        return msg;\n    }\n\n    @RequestMapping(\"/direct/queue2/{msg}\")\n    public String directProducerTwo(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"mq-direct_exchange\", \"direct.routing.key2\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/direct/queue1/测试消息1 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可\n\n### topic代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.topic;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/11/29 8:42 AM\n */\n@Configuration\npublic class TopicConfig {\n\n    /**\n     * 创建队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue topicQueue1() {\n        return new Queue(\"topic.queue1\", true);\n    }\n\n    @Bean\n    public Queue topicQueue2() {\n        return new Queue(\"topic.queue2\", true);\n    }\n\n    /**\n     * 创建交换器\n     */\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(\"topic_exchange\");\n    }\n\n    /**\n     * 绑定\n     */\n    @Bean\n    public Binding topicBinding1() {\n        return BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(\"*.jiafly.*\");\n    }\n\n    @Bean\n    public Binding topicBinding2() {\n        return BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(\"com.jiafly.*\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class TopicProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * topic类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/topic/{msg}\")\n    public String topicProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"topic:生产消息:\" + msg);\n        template.convertAndSend(\"topic_exchange\", \"com.jiafly.test\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/topic/测试消息 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示\n\n\n## 延时队列\n### 延时队列能做什么\n- 订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。\n- 短信通知：下单成功后 60s 之后给用户发送短信通知。\n- 失败重试：业务操作失败后，间隔一定的时间进行失败重试\n\n这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。\n\n在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。\n![延时队列](/image/rabbit/delay-mq.jpg)\n### 死信交换器DLX(Dead-Letter-Exchange)\nDLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。\n\nRouter: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.\n\n具体代码实现:\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\n\n/**\n * @author liuyi\n * @date 2018/12/2 12:44 AM\n */\n@Configuration\npublic class DelayConfig {\n\n    /**\n     * 定义一个交换机\n     *\n     * @return\n     */\n    @Bean\n    public DirectExchange delayExchange() {\n        return new DirectExchange(\"delay_exchange\", true, false);\n    }\n\n    /**\n     * 转发队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue routerQueue() {\n        return new Queue(\"router.queue\", true, false, false);\n    }\n\n    /**\n     * 转发队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding routerBinding() {\n        return BindingBuilder.bind(routerQueue()).to(delayExchange()).with(\"router.routing.key\");\n    }\n\n\n    /**\n     * 死信队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue deadLetterQueue() {\n        HashMap<String, Object> arguments = new HashMap(16);\n        arguments.put(\"x-dead-letter-exchange\", \"delay_exchange\");\n        arguments.put(\"x-dead-letter-routing-key\", \"router.routing.key\");\n        return new Queue(\"dead.letter.queue\", true, false, false, arguments);\n    }\n\n\n    /**\n     * 死信队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding deadLetterBinding() {\n        return BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(\"dead.letter.routing.key\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/3 6:13 PM\n */\n@Component\n@Slf4j\npublic class DelayConsumer {\n\n    @RabbitListener(queues = \"router.queue\")\n    @RabbitHandler\n    public void delayConsumer(String msg) {\n        log.info(\"delay.queue1接收消息:{}\", msg);\n    }\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.amqp.support.converter.AbstractJavaTypeMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/12/3 7:17 PM\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DelayProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * 延迟队列\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/delay/{msg}\")\n    public String delayProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"delay:生产消息:\" + msg);\n        template.convertAndSend(\"delay_exchange\", \"dead.letter.routing.key\", msg, message -> {\n            message.getMessageProperties().setExpiration(30 * 1000 + \"\");\n            return message;\n        });\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/delay/测试消息 ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。\n\n\n## 消息的持久化\n为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。\n创建时候的参数:\n- durable \n是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 \n- execulusive \n表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable \n- autoDelete \n当没有生成者/消费者使用此队列时，此队列会被自动删除。 \n(即当最后一个消费者退订后即被删除)\n\n\n设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。\n\n\n## 消息的确认与拒绝\n消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：\n- 自动确认模式:\n当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。\n\n- 显式确认模式:\n消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息\n\n如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。 \nRabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.","slug":"RabbitMQ","published":1,"updated":"2018-12-05T02:18:07.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqbku07c0001zbush63kr72u","content":"<h1 id=\"消息中间件\"><a href=\"#消息中间件\" class=\"headerlink\" title=\"消息中间件\"></a>消息中间件</h1><h2 id=\"什么是消息中间\"><a href=\"#什么是消息中间\" class=\"headerlink\" title=\"什么是消息中间\"></a>什么是消息中间</h2><p>消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、<br>JSON 等，也可以很复杂，比如内嵌对象。</p>\n<p>消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p>\n<p>消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点<br>(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。</p>\n<p>目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。</p>\n<h2 id=\"消息中间件的作用\"><a href=\"#消息中间件的作用\" class=\"headerlink\" title=\"消息中间件的作用\"></a>消息中间件的作用</h2><p>消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消<br>息中间件的作用可以概括如下。</p>\n<h3 id=\"解耦\"><a href=\"#解耦\" class=\"headerlink\" title=\"解耦\"></a>解耦</h3><p>在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。</p>\n<h3 id=\"冗余〈存储\"><a href=\"#冗余〈存储\" class=\"headerlink\" title=\"冗余〈存储)\"></a>冗余〈存储)</h3><p>有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。</p>\n<h3 id=\"扩展性\"><a href=\"#扩展性\" class=\"headerlink\" title=\"扩展性\"></a>扩展性</h3><p>因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</p>\n<h3 id=\"削峰\"><a href=\"#削峰\" class=\"headerlink\" title=\"削峰\"></a>削峰</h3><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。</p>\n<h3 id=\"可恢复性\"><a href=\"#可恢复性\" class=\"headerlink\" title=\"可恢复性\"></a>可恢复性</h3><p>当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。</p>\n<h3 id=\"顺序保证\"><a href=\"#顺序保证\" class=\"headerlink\" title=\"顺序保证\"></a>顺序保证</h3><p>在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</p>\n<h3 id=\"缓冲\"><a href=\"#缓冲\" class=\"headerlink\" title=\"缓冲\"></a>缓冲</h3><p>在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。</p>\n<h3 id=\"异步通信\"><a href=\"#异步通信\" class=\"headerlink\" title=\"异步通信\"></a>异步通信</h3><p>在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。</p>\n<h1 id=\"RabbitMQ入门\"><a href=\"#RabbitMQ入门\" class=\"headerlink\" title=\"RabbitMQ入门\"></a>RabbitMQ入门</h1><h2 id=\"RabbitMQ介绍\"><a href=\"#RabbitMQ介绍\" class=\"headerlink\" title=\"RabbitMQ介绍\"></a>RabbitMQ介绍</h2><p>RabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息<br>队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。</p>\n<p>RabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p>\n<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n<h2 id=\"RabbitMQ安装\"><a href=\"#RabbitMQ安装\" class=\"headerlink\" title=\"RabbitMQ安装\"></a>RabbitMQ安装</h2><ul>\n<li><p>使用docker安装(3-management版本自带管理后台)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动rabbitMQ并且启动管理后台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start rabbitmq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看管理后台<br>在浏览器打开 <a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 输入用户名:admin 密码:admin 可进入管理后台</p>\n</li>\n</ul>\n<h2 id=\"相关概念介绍\"><a href=\"#相关概念介绍\" class=\"headerlink\" title=\"相关概念介绍\"></a>相关概念介绍</h2><h3 id=\"生产者和消费者\"><a href=\"#生产者和消费者\" class=\"headerlink\" title=\"生产者和消费者\"></a>生产者和消费者</h3><ul>\n<li><p>Producer:生产者，就是投递消息的一方。<br>生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。</p>\n</li>\n<li><p>Consumer:消费者，就是接收消息的一方。<br>消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。</p>\n</li>\n<li><p>Broker:消息中间件的服务节点。<br>对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。</p>\n</li>\n</ul>\n<p>RabbitMQ运转流程<br><img src=\"/image/rabbit/mq-yunzhuanliucheng.jpg\" alt=\"RabbitMQ运转流程\"></p>\n<h3 id=\"交换器Exchange，路由RoutingKey，绑定Binding\"><a href=\"#交换器Exchange，路由RoutingKey，绑定Binding\" class=\"headerlink\" title=\"交换器Exchange，路由RoutingKey，绑定Binding\"></a>交换器Exchange，路由RoutingKey，绑定Binding</h3><ul>\n<li><p>Exchange:交换器<br><img src=\"/image/rabbit/mq-exchange.jpg\" alt=\"交换器\"><br>MQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。<br>RabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。</p>\n</li>\n<li><p>RoutingKey:路由键<br>生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。</p>\n</li>\n<li><p>Binding:绑定<br>RabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:<br><img src=\"/image/rabbit/mq-banding.jpg\" alt=\"绑定\"></p>\n</li>\n</ul>\n<h3 id=\"交换器类型\"><a href=\"#交换器类型\" class=\"headerlink\" title=\"交换器类型\"></a>交换器类型</h3><p>RabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提<br>到另外两种类型:System和自定义，这里就不详细介绍了。</p>\n<h4 id=\"fanout\"><a href=\"#fanout\" class=\"headerlink\" title=\"fanout\"></a>fanout</h4><p>就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：<br><img src=\"/image/rabbit/mq-fanout.jpg\" alt=\"fanout\"></p>\n<h4 id=\"direct-默认的交换器类型\"><a href=\"#direct-默认的交换器类型\" class=\"headerlink\" title=\"direct(默认的交换器类型)\"></a>direct(默认的交换器类型)</h4><p>direct类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：<br><img src=\"/image/rabbit/mq-direct.jpg\" alt=\"direct\"></p>\n<h4 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h4><p>上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:</p>\n<ul>\n<li>RoutingKey为一个点号”.”分隔的字符串(被点号”.”分隔开的每一段独立的字符串称为一个单词)，如”com.rabbitmq.client”，”java.util.concurrent”,”com.hidden.client”等</li>\n<li>BindingKey也是点号”.”分隔</li>\n<li>BindingKey中可以存在两种特殊字符串”星号”和”#”，用于做模糊匹配，其中”星号”用于匹配一个单词，”#”用于匹配多规格单词(可以是零个)。<br>如下图：<br><img src=\"/image/rabbit/mq-topic.jpg\" alt=\"topic\"><br>思考:<br>1.路由建 “com.rabbitmq.client”会路由到哪一个队列？<br>2.路由建 “com.hidden.client”会路由到哪一个队列？<br>3.路由建 “com.hidden.demo”会路由到哪一个队列？<br>4.路由建 “java.util.concurrent”会路由到哪一个队列？<br>5.路由建 “java.rabbitmq.demo”会路由到哪一个队列？</li>\n</ul>\n<h4 id=\"headers-不常用\"><a href=\"#headers-不常用\" class=\"headerlink\" title=\"headers(不常用)\"></a>headers(不常用)</h4><p>headers类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中<br>的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。</p>\n<h2 id=\"交换器类型详解\"><a href=\"#交换器类型详解\" class=\"headerlink\" title=\"交换器类型详解\"></a>交换器类型详解</h2><p>###<br>新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer<br>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1180</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1181</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>项目创建完成</p>\n<h3 id=\"声明一个队列各个参数的意义\"><a href=\"#声明一个队列各个参数的意义\" class=\"headerlink\" title=\"声明一个队列各个参数的意义\"></a>声明一个队列各个参数的意义</h3><p>name: 队列的名称 字符串<br>durable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库<br>exclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。<br>autoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除<br>arguments: 队列中的消息什么时候会自动被删除？ 是一个Map&lt;String, Object&gt;，他有如下参数<br>   “x-message-ttl”: 1000  设置队列中的所有消息的生存周期<br>   “x-expires”: 1000  当队列在指定的时间没有被访问就会被删除<br>   “x-max-length”: 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉<br>   “x-max-length-bytes”:  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小<br>   “x-dead-letter-exchange”: “” 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉<br>   “x-dead-letter-routing-key”: “”  将删除的消息推送到指定交换机的指定路由键的队列中去<br>   “x-max-priority”:  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费<br>   “x-queue-mode”: “lazy” 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中<br>   “x-queue-master-locator”</p>\n<h3 id=\"fanout代码实现\"><a href=\"#fanout代码实现\" class=\"headerlink\" title=\"fanout代码实现\"></a>fanout代码实现</h3><h4 id=\"在消费者项目中添加一个配置类\"><a href=\"#在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:35 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 声明一个队列，后面有很多属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"fanout_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类\"><a href=\"#在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:40 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue1\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"1fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue2\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"2fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller\"><a href=\"#在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fanout类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey</span></span><br><span class=\"line\"><span class=\"comment\">     * 只是routingKey可以任意指定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/fanout/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fanoutProducer</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg)</span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"fanout生产消息 msg:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"fanout_exchange\"</span>,<span class=\"string\">\"\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/fanout/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/fanout/测试消息</a> ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。</p>\n<h3 id=\"direct代码实现\"><a href=\"#direct代码实现\" class=\"headerlink\" title=\"direct代码实现\"></a>direct代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-1\"><a href=\"#在消费者项目中添加一个配置类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.direct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 1:40 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义两个队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue1\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue3\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义 exchange</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"direct_exchange\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列1 绑定 exchange 并且设置routingKey为direct.1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列2 绑定 exchange 并且设置routingKey为direct.2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue3()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-1\"><a href=\"#在消费者项目中添加一个消息监听类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-1\"><a href=\"#在生产者项目中添加一个消息发送controller-1\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * direct类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue1/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key1\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue2/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerTwo</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"mq-direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key2\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/direct/queue1/测试消息1\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/direct/queue1/测试消息1</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可</p>\n<h3 id=\"topic代码实现\"><a href=\"#topic代码实现\" class=\"headerlink\" title=\"topic代码实现\"></a>topic代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-2\"><a href=\"#在消费者项目中添加一个配置类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 8:42 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue1\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"topic_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class=\"string\">\"*.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class=\"string\">\"com.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-2\"><a href=\"#在消费者项目中添加一个消息监听类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-2\"><a href=\"#在生产者项目中添加一个消息发送controller-2\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * topic类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/topic/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">topicProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"topic:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"topic_exchange\"</span>, <span class=\"string\">\"com.jiafly.test\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-2\"><a href=\"#测试-2\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/topic/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/topic/测试消息</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示</p>\n<h2 id=\"延时队列\"><a href=\"#延时队列\" class=\"headerlink\" title=\"延时队列\"></a>延时队列</h2><h3 id=\"延时队列能做什么\"><a href=\"#延时队列能做什么\" class=\"headerlink\" title=\"延时队列能做什么\"></a>延时队列能做什么</h3><ul>\n<li>订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。</li>\n<li>短信通知：下单成功后 60s 之后给用户发送短信通知。</li>\n<li>失败重试：业务操作失败后，间隔一定的时间进行失败重试</li>\n</ul>\n<p>这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。</p>\n<p>在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。<br><img src=\"/image/rabbit/delay-mq.jpg\" alt=\"延时队列\"></p>\n<h3 id=\"死信交换器DLX-Dead-Letter-Exchange\"><a href=\"#死信交换器DLX-Dead-Letter-Exchange\" class=\"headerlink\" title=\"死信交换器DLX(Dead-Letter-Exchange)\"></a>死信交换器DLX(Dead-Letter-Exchange)</h3><p>DLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。</p>\n<p>Router: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.</p>\n<p>具体代码实现:</p>\n<h4 id=\"在消费者项目中添加一个配置类-3\"><a href=\"#在消费者项目中添加一个配置类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/2 12:44 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">delayExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">routerQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"router.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">routerBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(routerQueue()).to(delayExchange()).with(<span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">deadLetterQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; arguments = <span class=\"keyword\">new</span> HashMap(<span class=\"number\">16</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>, <span class=\"string\">\"delay_exchange\"</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>, <span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dead.letter.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">deadLetterBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(<span class=\"string\">\"dead.letter.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-3\"><a href=\"#在消费者项目中添加一个消息监听类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 6:13 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"router.queue\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delayConsumer</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay.queue1接收消息:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-3\"><a href=\"#在生产者项目中添加一个消息发送controller-3\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.support.converter.AbstractJavaTypeMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 7:17 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 延迟队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/delay/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delayProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"string\">\"dead.letter.routing.key\"</span>, msg, message -&gt; &#123;</span><br><span class=\"line\">            message.getMessageProperties().setExpiration(<span class=\"number\">30</span> * <span class=\"number\">1000</span> + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-3\"><a href=\"#测试-3\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/delay/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/delay/测试消息</a> ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。</p>\n<h2 id=\"消息的持久化\"><a href=\"#消息的持久化\" class=\"headerlink\" title=\"消息的持久化\"></a>消息的持久化</h2><p>为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。<br>创建时候的参数:</p>\n<ul>\n<li>durable<br>是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 </li>\n<li>execulusive<br>表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable </li>\n<li>autoDelete<br>当没有生成者/消费者使用此队列时，此队列会被自动删除。<br>(即当最后一个消费者退订后即被删除)</li>\n</ul>\n<p>设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。</p>\n<h2 id=\"消息的确认与拒绝\"><a href=\"#消息的确认与拒绝\" class=\"headerlink\" title=\"消息的确认与拒绝\"></a>消息的确认与拒绝</h2><p>消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：</p>\n<ul>\n<li><p>自动确认模式:<br>当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。</p>\n</li>\n<li><p>显式确认模式:<br>消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息</p>\n</li>\n</ul>\n<p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。<br>RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"消息中间件\"><a href=\"#消息中间件\" class=\"headerlink\" title=\"消息中间件\"></a>消息中间件</h1><h2 id=\"什么是消息中间\"><a href=\"#什么是消息中间\" class=\"headerlink\" title=\"什么是消息中间\"></a>什么是消息中间</h2><p>消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、<br>JSON 等，也可以很复杂，比如内嵌对象。</p>\n<p>消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p>\n<p>消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点<br>(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。</p>\n<p>目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。</p>\n<h2 id=\"消息中间件的作用\"><a href=\"#消息中间件的作用\" class=\"headerlink\" title=\"消息中间件的作用\"></a>消息中间件的作用</h2><p>消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消<br>息中间件的作用可以概括如下。</p>\n<h3 id=\"解耦\"><a href=\"#解耦\" class=\"headerlink\" title=\"解耦\"></a>解耦</h3><p>在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。</p>\n<h3 id=\"冗余〈存储\"><a href=\"#冗余〈存储\" class=\"headerlink\" title=\"冗余〈存储)\"></a>冗余〈存储)</h3><p>有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。</p>\n<h3 id=\"扩展性\"><a href=\"#扩展性\" class=\"headerlink\" title=\"扩展性\"></a>扩展性</h3><p>因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</p>\n<h3 id=\"削峰\"><a href=\"#削峰\" class=\"headerlink\" title=\"削峰\"></a>削峰</h3><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。</p>\n<h3 id=\"可恢复性\"><a href=\"#可恢复性\" class=\"headerlink\" title=\"可恢复性\"></a>可恢复性</h3><p>当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。</p>\n<h3 id=\"顺序保证\"><a href=\"#顺序保证\" class=\"headerlink\" title=\"顺序保证\"></a>顺序保证</h3><p>在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</p>\n<h3 id=\"缓冲\"><a href=\"#缓冲\" class=\"headerlink\" title=\"缓冲\"></a>缓冲</h3><p>在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。</p>\n<h3 id=\"异步通信\"><a href=\"#异步通信\" class=\"headerlink\" title=\"异步通信\"></a>异步通信</h3><p>在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。</p>\n<h1 id=\"RabbitMQ入门\"><a href=\"#RabbitMQ入门\" class=\"headerlink\" title=\"RabbitMQ入门\"></a>RabbitMQ入门</h1><h2 id=\"RabbitMQ介绍\"><a href=\"#RabbitMQ介绍\" class=\"headerlink\" title=\"RabbitMQ介绍\"></a>RabbitMQ介绍</h2><p>RabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息<br>队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。</p>\n<p>RabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p>\n<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n<h2 id=\"RabbitMQ安装\"><a href=\"#RabbitMQ安装\" class=\"headerlink\" title=\"RabbitMQ安装\"></a>RabbitMQ安装</h2><ul>\n<li><p>使用docker安装(3-management版本自带管理后台)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动rabbitMQ并且启动管理后台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start rabbitmq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看管理后台<br>在浏览器打开 <a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 输入用户名:admin 密码:admin 可进入管理后台</p>\n</li>\n</ul>\n<h2 id=\"相关概念介绍\"><a href=\"#相关概念介绍\" class=\"headerlink\" title=\"相关概念介绍\"></a>相关概念介绍</h2><h3 id=\"生产者和消费者\"><a href=\"#生产者和消费者\" class=\"headerlink\" title=\"生产者和消费者\"></a>生产者和消费者</h3><ul>\n<li><p>Producer:生产者，就是投递消息的一方。<br>生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。</p>\n</li>\n<li><p>Consumer:消费者，就是接收消息的一方。<br>消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。</p>\n</li>\n<li><p>Broker:消息中间件的服务节点。<br>对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。</p>\n</li>\n</ul>\n<p>RabbitMQ运转流程<br><img src=\"/image/rabbit/mq-yunzhuanliucheng.jpg\" alt=\"RabbitMQ运转流程\"></p>\n<h3 id=\"交换器Exchange，路由RoutingKey，绑定Binding\"><a href=\"#交换器Exchange，路由RoutingKey，绑定Binding\" class=\"headerlink\" title=\"交换器Exchange，路由RoutingKey，绑定Binding\"></a>交换器Exchange，路由RoutingKey，绑定Binding</h3><ul>\n<li><p>Exchange:交换器<br><img src=\"/image/rabbit/mq-exchange.jpg\" alt=\"交换器\"><br>MQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。<br>RabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。</p>\n</li>\n<li><p>RoutingKey:路由键<br>生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。</p>\n</li>\n<li><p>Binding:绑定<br>RabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:<br><img src=\"/image/rabbit/mq-banding.jpg\" alt=\"绑定\"></p>\n</li>\n</ul>\n<h3 id=\"交换器类型\"><a href=\"#交换器类型\" class=\"headerlink\" title=\"交换器类型\"></a>交换器类型</h3><p>RabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提<br>到另外两种类型:System和自定义，这里就不详细介绍了。</p>\n<h4 id=\"fanout\"><a href=\"#fanout\" class=\"headerlink\" title=\"fanout\"></a>fanout</h4><p>就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：<br><img src=\"/image/rabbit/mq-fanout.jpg\" alt=\"fanout\"></p>\n<h4 id=\"direct-默认的交换器类型\"><a href=\"#direct-默认的交换器类型\" class=\"headerlink\" title=\"direct(默认的交换器类型)\"></a>direct(默认的交换器类型)</h4><p>direct类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：<br><img src=\"/image/rabbit/mq-direct.jpg\" alt=\"direct\"></p>\n<h4 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h4><p>上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:</p>\n<ul>\n<li>RoutingKey为一个点号”.”分隔的字符串(被点号”.”分隔开的每一段独立的字符串称为一个单词)，如”com.rabbitmq.client”，”java.util.concurrent”,”com.hidden.client”等</li>\n<li>BindingKey也是点号”.”分隔</li>\n<li>BindingKey中可以存在两种特殊字符串”星号”和”#”，用于做模糊匹配，其中”星号”用于匹配一个单词，”#”用于匹配多规格单词(可以是零个)。<br>如下图：<br><img src=\"/image/rabbit/mq-topic.jpg\" alt=\"topic\"><br>思考:<br>1.路由建 “com.rabbitmq.client”会路由到哪一个队列？<br>2.路由建 “com.hidden.client”会路由到哪一个队列？<br>3.路由建 “com.hidden.demo”会路由到哪一个队列？<br>4.路由建 “java.util.concurrent”会路由到哪一个队列？<br>5.路由建 “java.rabbitmq.demo”会路由到哪一个队列？</li>\n</ul>\n<h4 id=\"headers-不常用\"><a href=\"#headers-不常用\" class=\"headerlink\" title=\"headers(不常用)\"></a>headers(不常用)</h4><p>headers类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中<br>的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。</p>\n<h2 id=\"交换器类型详解\"><a href=\"#交换器类型详解\" class=\"headerlink\" title=\"交换器类型详解\"></a>交换器类型详解</h2><p>###<br>新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer<br>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1180</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1181</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>项目创建完成</p>\n<h3 id=\"声明一个队列各个参数的意义\"><a href=\"#声明一个队列各个参数的意义\" class=\"headerlink\" title=\"声明一个队列各个参数的意义\"></a>声明一个队列各个参数的意义</h3><p>name: 队列的名称 字符串<br>durable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库<br>exclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。<br>autoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除<br>arguments: 队列中的消息什么时候会自动被删除？ 是一个Map&lt;String, Object&gt;，他有如下参数<br>   “x-message-ttl”: 1000  设置队列中的所有消息的生存周期<br>   “x-expires”: 1000  当队列在指定的时间没有被访问就会被删除<br>   “x-max-length”: 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉<br>   “x-max-length-bytes”:  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小<br>   “x-dead-letter-exchange”: “” 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉<br>   “x-dead-letter-routing-key”: “”  将删除的消息推送到指定交换机的指定路由键的队列中去<br>   “x-max-priority”:  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费<br>   “x-queue-mode”: “lazy” 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中<br>   “x-queue-master-locator”</p>\n<h3 id=\"fanout代码实现\"><a href=\"#fanout代码实现\" class=\"headerlink\" title=\"fanout代码实现\"></a>fanout代码实现</h3><h4 id=\"在消费者项目中添加一个配置类\"><a href=\"#在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:35 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 声明一个队列，后面有很多属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"fanout_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类\"><a href=\"#在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:40 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue1\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"1fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue2\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"2fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller\"><a href=\"#在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fanout类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey</span></span><br><span class=\"line\"><span class=\"comment\">     * 只是routingKey可以任意指定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/fanout/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fanoutProducer</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg)</span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"fanout生产消息 msg:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"fanout_exchange\"</span>,<span class=\"string\">\"\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/fanout/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/fanout/测试消息</a> ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。</p>\n<h3 id=\"direct代码实现\"><a href=\"#direct代码实现\" class=\"headerlink\" title=\"direct代码实现\"></a>direct代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-1\"><a href=\"#在消费者项目中添加一个配置类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.direct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 1:40 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义两个队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue1\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue3\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义 exchange</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"direct_exchange\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列1 绑定 exchange 并且设置routingKey为direct.1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列2 绑定 exchange 并且设置routingKey为direct.2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue3()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-1\"><a href=\"#在消费者项目中添加一个消息监听类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-1\"><a href=\"#在生产者项目中添加一个消息发送controller-1\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * direct类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue1/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key1\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue2/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerTwo</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"mq-direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key2\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/direct/queue1/测试消息1\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/direct/queue1/测试消息1</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可</p>\n<h3 id=\"topic代码实现\"><a href=\"#topic代码实现\" class=\"headerlink\" title=\"topic代码实现\"></a>topic代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-2\"><a href=\"#在消费者项目中添加一个配置类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 8:42 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue1\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"topic_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class=\"string\">\"*.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class=\"string\">\"com.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-2\"><a href=\"#在消费者项目中添加一个消息监听类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-2\"><a href=\"#在生产者项目中添加一个消息发送controller-2\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * topic类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/topic/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">topicProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"topic:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"topic_exchange\"</span>, <span class=\"string\">\"com.jiafly.test\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-2\"><a href=\"#测试-2\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/topic/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/topic/测试消息</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示</p>\n<h2 id=\"延时队列\"><a href=\"#延时队列\" class=\"headerlink\" title=\"延时队列\"></a>延时队列</h2><h3 id=\"延时队列能做什么\"><a href=\"#延时队列能做什么\" class=\"headerlink\" title=\"延时队列能做什么\"></a>延时队列能做什么</h3><ul>\n<li>订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。</li>\n<li>短信通知：下单成功后 60s 之后给用户发送短信通知。</li>\n<li>失败重试：业务操作失败后，间隔一定的时间进行失败重试</li>\n</ul>\n<p>这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。</p>\n<p>在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。<br><img src=\"/image/rabbit/delay-mq.jpg\" alt=\"延时队列\"></p>\n<h3 id=\"死信交换器DLX-Dead-Letter-Exchange\"><a href=\"#死信交换器DLX-Dead-Letter-Exchange\" class=\"headerlink\" title=\"死信交换器DLX(Dead-Letter-Exchange)\"></a>死信交换器DLX(Dead-Letter-Exchange)</h3><p>DLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。</p>\n<p>Router: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.</p>\n<p>具体代码实现:</p>\n<h4 id=\"在消费者项目中添加一个配置类-3\"><a href=\"#在消费者项目中添加一个配置类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/2 12:44 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">delayExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">routerQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"router.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">routerBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(routerQueue()).to(delayExchange()).with(<span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">deadLetterQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; arguments = <span class=\"keyword\">new</span> HashMap(<span class=\"number\">16</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>, <span class=\"string\">\"delay_exchange\"</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>, <span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dead.letter.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">deadLetterBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(<span class=\"string\">\"dead.letter.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-3\"><a href=\"#在消费者项目中添加一个消息监听类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 6:13 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"router.queue\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delayConsumer</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay.queue1接收消息:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-3\"><a href=\"#在生产者项目中添加一个消息发送controller-3\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.support.converter.AbstractJavaTypeMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 7:17 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 延迟队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/delay/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delayProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"string\">\"dead.letter.routing.key\"</span>, msg, message -&gt; &#123;</span><br><span class=\"line\">            message.getMessageProperties().setExpiration(<span class=\"number\">30</span> * <span class=\"number\">1000</span> + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-3\"><a href=\"#测试-3\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/delay/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/delay/测试消息</a> ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。</p>\n<h2 id=\"消息的持久化\"><a href=\"#消息的持久化\" class=\"headerlink\" title=\"消息的持久化\"></a>消息的持久化</h2><p>为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。<br>创建时候的参数:</p>\n<ul>\n<li>durable<br>是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 </li>\n<li>execulusive<br>表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable </li>\n<li>autoDelete<br>当没有生成者/消费者使用此队列时，此队列会被自动删除。<br>(即当最后一个消费者退订后即被删除)</li>\n</ul>\n<p>设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。</p>\n<h2 id=\"消息的确认与拒绝\"><a href=\"#消息的确认与拒绝\" class=\"headerlink\" title=\"消息的确认与拒绝\"></a>消息的确认与拒绝</h2><p>消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：</p>\n<ul>\n<li><p>自动确认模式:<br>当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。</p>\n</li>\n<li><p>显式确认模式:<br>消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息</p>\n</li>\n</ul>\n<p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。<br>RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.</p>\n"},{"title":"SpringBoot2.0集成Redis(一)","date":"2016-12-26T12:16:13.000Z","_content":"\n## 1.在pom.xml中添加如下依赖\n\n```shell\n\t\t<!-- redis -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n\t\t</dependency>\n\t\t<!--spring2.0集成redis所需common-pool2-->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-pool2</artifactId>\n\t\t\t<version>2.5.0</version>\n\t\t</dependency>\n\t\t<!-- 序列化需要 -->\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba</groupId>\n\t\t\t<artifactId>fastjson</artifactId>\n\t\t\t<version>1.2.28</version>\n\t\t</dependency>\n```\n\n## 2. 在application.yml中配置redis信息\n\n```yaml\n# redis相关配置\nspring:\n  redis:\n    database: 0\n    host: 127.0.0.1\n    port: 6379\n    password:\n    timeout: 100ms\n    lettuce:\n      pool:\n        max-active: 8\n        max-wait: -1ms\n        max-idle: 8\n        min-idle: 0\n```\n\n## 3.定义 StringRedisTemplate ，指定序列化和反序列化的处理类\n\n```java\npackage com.jiafly.libra.common.config;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n\n/**\n * @Author dongxie\n * @Email liuyi1181@163.com\n * @Date 2018/9/13 下午5:01\n * @Description redis 配置类\n */\n@Configuration\npublic class RedisConfig {\n\n    /**\n     * 定义 StringRedisTemplate ，指定序列化和反序列化的处理类\n     * @param factory\n     * @return\n     */\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        StringRedisTemplate template = new StringRedisTemplate(factory);\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(\n                Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        // 序列化值时使用此序列化方法\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n        return template;\n    }\n}\n```\n\n## 4.测试\n\n```java\npackage com.jiafly.libra.controller;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n/**\n * @Author dongxie\n * @Email liuyi1181@163.com\n * @Date 2018/7/31 下午5:57\n * @Description\n */\n@RestController\n@RequestMapping(\"/redis\")\n@Slf4j\npublic class TestController {\n\n    @Autowired\n    RedisTemplate redisTemplate;\n\n    @GetMapping(\"set/{key}/{value}\")\n    public String set(@PathVariable(\"key\")String key, @PathVariable(\"value\") String value) {\n        //注意这里的 key不可以为null\n        log.info(\"redis设置Key:{} 的value为{}\", key, value);\n        redisTemplate.opsForValue().set(key, value);\n        return key + \",\" + value;\n    }\n\n    @GetMapping(\"get/{key}\")\n    public String get(@PathVariable(\"key\") String key) {\n        log.info(\"redis获取Key:{} 的value值\", key);\n        return \"key=\" + key + \",value=\" + redisTemplate.opsForValue().get(key);\n    }\n}\n\n```\n\n## 5.浏览器发起请求\n\n- 在浏览器输入一下链接设置key的值value\n\n  ```bash\n  http://localhost:8080/redis/set/key/value\n  ```\n\n- 在浏览器输入以下链接获取key的值value\n\n  ```ba\n  http://localhost:8080/redis/get/key\n  ```\n","source":"_posts/Springboot2.0集成redis.md","raw":"---\ntitle: SpringBoot2.0集成Redis(一)\ndate: 2016-12-26 20:16:13\ntags: [SpringBoot,Redis]\ncategory: [学习日记]\n---\n\n## 1.在pom.xml中添加如下依赖\n\n```shell\n\t\t<!-- redis -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n\t\t</dependency>\n\t\t<!--spring2.0集成redis所需common-pool2-->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-pool2</artifactId>\n\t\t\t<version>2.5.0</version>\n\t\t</dependency>\n\t\t<!-- 序列化需要 -->\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba</groupId>\n\t\t\t<artifactId>fastjson</artifactId>\n\t\t\t<version>1.2.28</version>\n\t\t</dependency>\n```\n\n## 2. 在application.yml中配置redis信息\n\n```yaml\n# redis相关配置\nspring:\n  redis:\n    database: 0\n    host: 127.0.0.1\n    port: 6379\n    password:\n    timeout: 100ms\n    lettuce:\n      pool:\n        max-active: 8\n        max-wait: -1ms\n        max-idle: 8\n        min-idle: 0\n```\n\n## 3.定义 StringRedisTemplate ，指定序列化和反序列化的处理类\n\n```java\npackage com.jiafly.libra.common.config;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n\n/**\n * @Author dongxie\n * @Email liuyi1181@163.com\n * @Date 2018/9/13 下午5:01\n * @Description redis 配置类\n */\n@Configuration\npublic class RedisConfig {\n\n    /**\n     * 定义 StringRedisTemplate ，指定序列化和反序列化的处理类\n     * @param factory\n     * @return\n     */\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        StringRedisTemplate template = new StringRedisTemplate(factory);\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(\n                Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        // 序列化值时使用此序列化方法\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n        return template;\n    }\n}\n```\n\n## 4.测试\n\n```java\npackage com.jiafly.libra.controller;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n/**\n * @Author dongxie\n * @Email liuyi1181@163.com\n * @Date 2018/7/31 下午5:57\n * @Description\n */\n@RestController\n@RequestMapping(\"/redis\")\n@Slf4j\npublic class TestController {\n\n    @Autowired\n    RedisTemplate redisTemplate;\n\n    @GetMapping(\"set/{key}/{value}\")\n    public String set(@PathVariable(\"key\")String key, @PathVariable(\"value\") String value) {\n        //注意这里的 key不可以为null\n        log.info(\"redis设置Key:{} 的value为{}\", key, value);\n        redisTemplate.opsForValue().set(key, value);\n        return key + \",\" + value;\n    }\n\n    @GetMapping(\"get/{key}\")\n    public String get(@PathVariable(\"key\") String key) {\n        log.info(\"redis获取Key:{} 的value值\", key);\n        return \"key=\" + key + \",value=\" + redisTemplate.opsForValue().get(key);\n    }\n}\n\n```\n\n## 5.浏览器发起请求\n\n- 在浏览器输入一下链接设置key的值value\n\n  ```bash\n  http://localhost:8080/redis/set/key/value\n  ```\n\n- 在浏览器输入以下链接获取key的值value\n\n  ```ba\n  http://localhost:8080/redis/get/key\n  ```\n","slug":"Springboot2.0集成redis","published":1,"updated":"2018-11-08T03:53:23.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqbku07g0003zbuscu4y58mm","content":"<h2 id=\"1-在pom-xml中添加如下依赖\"><a href=\"#1-在pom-xml中添加如下依赖\" class=\"headerlink\" title=\"1.在pom.xml中添加如下依赖\"></a>1.在pom.xml中添加如下依赖</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- redis --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--spring2.0集成redis所需common-pool2--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.5.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- 序列化需要 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.2.28&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-在application-yml中配置redis信息\"><a href=\"#2-在application-yml中配置redis信息\" class=\"headerlink\" title=\"2. 在application.yml中配置redis信息\"></a>2. 在application.yml中配置redis信息</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># redis相关配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    database:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">    password:</span></span><br><span class=\"line\"><span class=\"attr\">    timeout:</span> <span class=\"number\">100</span><span class=\"string\">ms</span></span><br><span class=\"line\"><span class=\"attr\">    lettuce:</span></span><br><span class=\"line\"><span class=\"attr\">      pool:</span></span><br><span class=\"line\"><span class=\"attr\">        max-active:</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"attr\">        max-wait:</span> <span class=\"bullet\">-1</span><span class=\"string\">ms</span></span><br><span class=\"line\"><span class=\"attr\">        max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"attr\">        min-idle:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-定义-StringRedisTemplate-，指定序列化和反序列化的处理类\"><a href=\"#3-定义-StringRedisTemplate-，指定序列化和反序列化的处理类\" class=\"headerlink\" title=\"3.定义 StringRedisTemplate ，指定序列化和反序列化的处理类\"></a>3.定义 StringRedisTemplate ，指定序列化和反序列化的处理类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.libra.common.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> dongxie</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Email</span> liuyi1181@163.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2018/9/13 下午5:01</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> redis 配置类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义 StringRedisTemplate ，指定序列化和反序列化的处理类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> factory</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, String&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class=\"line\">        StringRedisTemplate template = <span class=\"keyword\">new</span> StringRedisTemplate(factory);</span><br><span class=\"line\">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer&lt;&gt;(</span><br><span class=\"line\">                Object.class);</span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        <span class=\"comment\">// 序列化值时使用此序列化方法</span></span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.libra.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> dongxie</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Email</span> liuyi1181@163.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2018/7/31 下午5:57</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/redis\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"set/&#123;key&#125;/&#123;value&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">set</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"key\"</span>)</span>String key, @<span class=\"title\">PathVariable</span><span class=\"params\">(<span class=\"string\">\"value\"</span>)</span> String value) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//注意这里的 key不可以为null</span></span><br><span class=\"line\">        log.info(<span class=\"string\">\"redis设置Key:&#123;&#125; 的value为&#123;&#125;\"</span>, key, value);</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key + <span class=\"string\">\",\"</span> + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"get/&#123;key&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"key\"</span>)</span> String key) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"redis获取Key:&#123;&#125; 的value值\"</span>, key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"key=\"</span> + key + <span class=\"string\">\",value=\"</span> + redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-浏览器发起请求\"><a href=\"#5-浏览器发起请求\" class=\"headerlink\" title=\"5.浏览器发起请求\"></a>5.浏览器发起请求</h2><ul>\n<li><p>在浏览器输入一下链接设置key的值value</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/redis/<span class=\"built_in\">set</span>/key/value</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器输入以下链接获取key的值value</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/redis/get/key</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-在pom-xml中添加如下依赖\"><a href=\"#1-在pom-xml中添加如下依赖\" class=\"headerlink\" title=\"1.在pom.xml中添加如下依赖\"></a>1.在pom.xml中添加如下依赖</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- redis --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--spring2.0集成redis所需common-pool2--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.5.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- 序列化需要 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.2.28&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-在application-yml中配置redis信息\"><a href=\"#2-在application-yml中配置redis信息\" class=\"headerlink\" title=\"2. 在application.yml中配置redis信息\"></a>2. 在application.yml中配置redis信息</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># redis相关配置</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">  redis:</span></span><br><span class=\"line\"><span class=\"attr\">    database:</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"attr\">    host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">    port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"attr\">    password:</span></span><br><span class=\"line\"><span class=\"attr\">    timeout:</span> <span class=\"number\">100</span><span class=\"string\">ms</span></span><br><span class=\"line\"><span class=\"attr\">    lettuce:</span></span><br><span class=\"line\"><span class=\"attr\">      pool:</span></span><br><span class=\"line\"><span class=\"attr\">        max-active:</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"attr\">        max-wait:</span> <span class=\"bullet\">-1</span><span class=\"string\">ms</span></span><br><span class=\"line\"><span class=\"attr\">        max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"attr\">        min-idle:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-定义-StringRedisTemplate-，指定序列化和反序列化的处理类\"><a href=\"#3-定义-StringRedisTemplate-，指定序列化和反序列化的处理类\" class=\"headerlink\" title=\"3.定义 StringRedisTemplate ，指定序列化和反序列化的处理类\"></a>3.定义 StringRedisTemplate ，指定序列化和反序列化的处理类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.libra.common.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> dongxie</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Email</span> liuyi1181@163.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2018/9/13 下午5:01</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> redis 配置类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义 StringRedisTemplate ，指定序列化和反序列化的处理类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> factory</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisTemplate&lt;String, String&gt; <span class=\"title\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class=\"line\">        StringRedisTemplate template = <span class=\"keyword\">new</span> StringRedisTemplate(factory);</span><br><span class=\"line\">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class=\"keyword\">new</span> Jackson2JsonRedisSerializer&lt;&gt;(</span><br><span class=\"line\">                Object.class);</span><br><span class=\"line\">        ObjectMapper om = <span class=\"keyword\">new</span> ObjectMapper();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        <span class=\"comment\">// 序列化值时使用此序列化方法</span></span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-测试\"><a href=\"#4-测试\" class=\"headerlink\" title=\"4.测试\"></a>4.测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.libra.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> dongxie</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Email</span> liuyi1181@163.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span> 2018/7/31 下午5:57</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/redis\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"set/&#123;key&#125;/&#123;value&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">set</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"key\"</span>)</span>String key, @<span class=\"title\">PathVariable</span><span class=\"params\">(<span class=\"string\">\"value\"</span>)</span> String value) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//注意这里的 key不可以为null</span></span><br><span class=\"line\">        log.info(<span class=\"string\">\"redis设置Key:&#123;&#125; 的value为&#123;&#125;\"</span>, key, value);</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key + <span class=\"string\">\",\"</span> + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"get/&#123;key&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"key\"</span>)</span> String key) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"redis获取Key:&#123;&#125; 的value值\"</span>, key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"key=\"</span> + key + <span class=\"string\">\",value=\"</span> + redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-浏览器发起请求\"><a href=\"#5-浏览器发起请求\" class=\"headerlink\" title=\"5.浏览器发起请求\"></a>5.浏览器发起请求</h2><ul>\n<li><p>在浏览器输入一下链接设置key的值value</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/redis/<span class=\"built_in\">set</span>/key/value</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器输入以下链接获取key的值value</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/redis/get/key</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"从零开始使用Hexo搭建的个人博客","date":"2016-11-26T11:30:27.000Z","_content":"\n## 1.\nHexo介绍以及环境安装\n- Hexo介绍\n  - Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n- Hexo安装\n  - Hexo安装前提必须是电脑已经安装好了Git,Node.js。(这里不做介绍，自行百度) \n  - 安装完以后\n\n```\n$ npm install -g hexo-cli\n```\n\n\n## 2.正式开始搭建个人博客(这里以我的博客Jiafly为例)\n\n### 1.github上新建一个新的repository\n\n- 新建的repository必须满足以下特点\n  - 名称格式必须为 XXXXX.github.io\n  - XXXXX 是github的用户名，不可以随意命名，否则会报错\n\n\n### 2.本地新建博客文件夹\n\n- 前往要创建博客的文件夹下执行如下命令\n```\n$ hexo init jiafly\n$ cd jiafly\n$ npm install\n$ npm install hexo-deployer-git --save\n```\n\n\n### 3.修改博客文件夹目录下的_config.yml文件夹的deploy配置\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:jiafly/jiafly.github.io.git\n  branch: master\n```\n\n\n### 4.修改默认主题(可不修改)\n\n- 进入themes目录,克隆想要应用的主题\n```\n$ cd jiafly/themes\n$ git clone https://github.com/cofess/hexo-theme-pure\n```\n\n- 修改jiafly目录下的_config.yml文件\n```\ntheme: pure\n```\n\n### 5.预览\n\n```\n$ hexo g\n$ hexo S\n```\n执行以上命令后即可以访问 http://localhost:4000 查看页面效果\n\n\n### 6.部署\n\n```\n$ hexo g\n$ hexo d\n```\n执行以上命令之后即会将md文件生成html文件推送到github的master分支上，访问 XXXXX.github.io 即可访问你的博客\n\n\n### 7.绑定域名\n\n访问XXXXX.github.io怎么也不显得高大尚，这里我们可以绑定自己的域名\n- 申请自己的域名，解析一个CNAME类型的域名，指定CNAME为 XXXXX.github.io\n- 在你选择的主题或者默认主题的source文件夹新建一个名为CNAME的文件，内容是你解析的域名。我的文件夹是jiafly/themes/pure/source\n- 重新部署到github上\n```\n$ hexo g\n$ hexo d\n```\n \n\n## 3.保存源文件(存储到github的hexo分支)件\n\n- 克隆github的代码\n```\n$ git clone git@github.com:XXXXX/XXXXX.github.io.git\n```\n\n- 进入 XXXXX.github.io 目录，删除除了.git以为的其他文件\n\n- 将原博客文件夹中的所有可见文件都复制到 XXXXX.github.io目录中，除了其中的隐藏文\n\n- 新建一个.gitignore的文件，内容如下:\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n- 创建新的分支，用于存储源MD文档\n```\n$ git checkout -b hexo\n```\n\n- 添加所有文件到暂存区\n```\n$ git add --all\n```\n\n执行这一步的时候可能会出现如下错误，这是因为在修改主题时克隆了git代码，我们需要删除themes/pure 文件夹下的 .git文件夹 然后重新执行 git add --all\n\n```\nwarning: adding embedded git repository: themes/pure\nhint: You've added another git repository inside your current repository.\nhint: Clones of the outer repository will not contain the contents of\nhint: the embedded repository and will not know how to obtain it.\nhint: If you meant to add a submodule, use:\nhint:\nhint: \tgit submodule add <url> themes/pure\nhint:\nhint: If you added this path by mistake, you can remove it from the\nhint: index with:\nhint:\nhint: \tgit rm --cached themes/pure\nhint:\nhint: See \"git help submodule\" for more information.\n```\n\n- 提交分支\n```\n$ git commit -m \"first commit\"\n```\n\n- 推送hexo分支的文件到github仓库\n```\n$ git push --set-upstream origin hexo\n```\n\n至此，我们的源文件就保存到了hexo分支上了，以后每次编写博客的时候只需要将最新的文件提交到hexo分支即可。换电脑以后还可以从git上拉取即可。\n\n\n## 附录(Hexo指令)\n\n","source":"_posts/从零开始使用Hexo搭建你的个人博客.md","raw":"---\ntitle: 从零开始使用Hexo搭建的个人博客\ndate: 2016-11-26 19:30:27\ntags: [Hexo]\n---\n\n## 1.\nHexo介绍以及环境安装\n- Hexo介绍\n  - Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n- Hexo安装\n  - Hexo安装前提必须是电脑已经安装好了Git,Node.js。(这里不做介绍，自行百度) \n  - 安装完以后\n\n```\n$ npm install -g hexo-cli\n```\n\n\n## 2.正式开始搭建个人博客(这里以我的博客Jiafly为例)\n\n### 1.github上新建一个新的repository\n\n- 新建的repository必须满足以下特点\n  - 名称格式必须为 XXXXX.github.io\n  - XXXXX 是github的用户名，不可以随意命名，否则会报错\n\n\n### 2.本地新建博客文件夹\n\n- 前往要创建博客的文件夹下执行如下命令\n```\n$ hexo init jiafly\n$ cd jiafly\n$ npm install\n$ npm install hexo-deployer-git --save\n```\n\n\n### 3.修改博客文件夹目录下的_config.yml文件夹的deploy配置\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:jiafly/jiafly.github.io.git\n  branch: master\n```\n\n\n### 4.修改默认主题(可不修改)\n\n- 进入themes目录,克隆想要应用的主题\n```\n$ cd jiafly/themes\n$ git clone https://github.com/cofess/hexo-theme-pure\n```\n\n- 修改jiafly目录下的_config.yml文件\n```\ntheme: pure\n```\n\n### 5.预览\n\n```\n$ hexo g\n$ hexo S\n```\n执行以上命令后即可以访问 http://localhost:4000 查看页面效果\n\n\n### 6.部署\n\n```\n$ hexo g\n$ hexo d\n```\n执行以上命令之后即会将md文件生成html文件推送到github的master分支上，访问 XXXXX.github.io 即可访问你的博客\n\n\n### 7.绑定域名\n\n访问XXXXX.github.io怎么也不显得高大尚，这里我们可以绑定自己的域名\n- 申请自己的域名，解析一个CNAME类型的域名，指定CNAME为 XXXXX.github.io\n- 在你选择的主题或者默认主题的source文件夹新建一个名为CNAME的文件，内容是你解析的域名。我的文件夹是jiafly/themes/pure/source\n- 重新部署到github上\n```\n$ hexo g\n$ hexo d\n```\n \n\n## 3.保存源文件(存储到github的hexo分支)件\n\n- 克隆github的代码\n```\n$ git clone git@github.com:XXXXX/XXXXX.github.io.git\n```\n\n- 进入 XXXXX.github.io 目录，删除除了.git以为的其他文件\n\n- 将原博客文件夹中的所有可见文件都复制到 XXXXX.github.io目录中，除了其中的隐藏文\n\n- 新建一个.gitignore的文件，内容如下:\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n- 创建新的分支，用于存储源MD文档\n```\n$ git checkout -b hexo\n```\n\n- 添加所有文件到暂存区\n```\n$ git add --all\n```\n\n执行这一步的时候可能会出现如下错误，这是因为在修改主题时克隆了git代码，我们需要删除themes/pure 文件夹下的 .git文件夹 然后重新执行 git add --all\n\n```\nwarning: adding embedded git repository: themes/pure\nhint: You've added another git repository inside your current repository.\nhint: Clones of the outer repository will not contain the contents of\nhint: the embedded repository and will not know how to obtain it.\nhint: If you meant to add a submodule, use:\nhint:\nhint: \tgit submodule add <url> themes/pure\nhint:\nhint: If you added this path by mistake, you can remove it from the\nhint: index with:\nhint:\nhint: \tgit rm --cached themes/pure\nhint:\nhint: See \"git help submodule\" for more information.\n```\n\n- 提交分支\n```\n$ git commit -m \"first commit\"\n```\n\n- 推送hexo分支的文件到github仓库\n```\n$ git push --set-upstream origin hexo\n```\n\n至此，我们的源文件就保存到了hexo分支上了，以后每次编写博客的时候只需要将最新的文件提交到hexo分支即可。换电脑以后还可以从git上拉取即可。\n\n\n## 附录(Hexo指令)\n\n","slug":"从零开始使用Hexo搭建你的个人博客","published":1,"updated":"2018-09-12T13:47:12.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqbku07k0007zbus5rpbiun2","content":"<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><p>Hexo介绍以及环境安装</p>\n<ul>\n<li><p>Hexo介绍</p>\n<ul>\n<li>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li>\n</ul>\n</li>\n<li><p>Hexo安装</p>\n<ul>\n<li>Hexo安装前提必须是电脑已经安装好了Git,Node.js。(这里不做介绍，自行百度) </li>\n<li>安装完以后</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-正式开始搭建个人博客-这里以我的博客Jiafly为例\"><a href=\"#2-正式开始搭建个人博客-这里以我的博客Jiafly为例\" class=\"headerlink\" title=\"2.正式开始搭建个人博客(这里以我的博客Jiafly为例)\"></a>2.正式开始搭建个人博客(这里以我的博客Jiafly为例)</h2><h3 id=\"1-github上新建一个新的repository\"><a href=\"#1-github上新建一个新的repository\" class=\"headerlink\" title=\"1.github上新建一个新的repository\"></a>1.github上新建一个新的repository</h3><ul>\n<li>新建的repository必须满足以下特点<ul>\n<li>名称格式必须为 XXXXX.github.io</li>\n<li>XXXXX 是github的用户名，不可以随意命名，否则会报错</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-本地新建博客文件夹\"><a href=\"#2-本地新建博客文件夹\" class=\"headerlink\" title=\"2.本地新建博客文件夹\"></a>2.本地新建博客文件夹</h3><ul>\n<li>前往要创建博客的文件夹下执行如下命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init jiafly</span><br><span class=\"line\">$ cd jiafly</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-修改博客文件夹目录下的-config-yml文件夹的deploy配置\"><a href=\"#3-修改博客文件夹目录下的-config-yml文件夹的deploy配置\" class=\"headerlink\" title=\"3.修改博客文件夹目录下的_config.yml文件夹的deploy配置\"></a>3.修改博客文件夹目录下的_config.yml文件夹的deploy配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:jiafly/jiafly.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-修改默认主题-可不修改\"><a href=\"#4-修改默认主题-可不修改\" class=\"headerlink\" title=\"4.修改默认主题(可不修改)\"></a>4.修改默认主题(可不修改)</h3><ul>\n<li><p>进入themes目录,克隆想要应用的主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd jiafly/themes</span><br><span class=\"line\">$ git clone https://github.com/cofess/hexo-theme-pure</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改jiafly目录下的_config.yml文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: pure</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-预览\"><a href=\"#5-预览\" class=\"headerlink\" title=\"5.预览\"></a>5.预览</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo S</span><br></pre></td></tr></table></figure>\n<p>执行以上命令后即可以访问 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 查看页面效果</p>\n<h3 id=\"6-部署\"><a href=\"#6-部署\" class=\"headerlink\" title=\"6.部署\"></a>6.部署</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p>执行以上命令之后即会将md文件生成html文件推送到github的master分支上，访问 XXXXX.github.io 即可访问你的博客</p>\n<h3 id=\"7-绑定域名\"><a href=\"#7-绑定域名\" class=\"headerlink\" title=\"7.绑定域名\"></a>7.绑定域名</h3><p>访问XXXXX.github.io怎么也不显得高大尚，这里我们可以绑定自己的域名</p>\n<ul>\n<li>申请自己的域名，解析一个CNAME类型的域名，指定CNAME为 XXXXX.github.io</li>\n<li>在你选择的主题或者默认主题的source文件夹新建一个名为CNAME的文件，内容是你解析的域名。我的文件夹是jiafly/themes/pure/source</li>\n<li>重新部署到github上<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-保存源文件-存储到github的hexo分支-件\"><a href=\"#3-保存源文件-存储到github的hexo分支-件\" class=\"headerlink\" title=\"3.保存源文件(存储到github的hexo分支)件\"></a>3.保存源文件(存储到github的hexo分支)件</h2><ul>\n<li><p>克隆github的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github.com:XXXXX/XXXXX.github.io.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入 XXXXX.github.io 目录，删除除了.git以为的其他文件</p>\n</li>\n<li><p>将原博客文件夹中的所有可见文件都复制到 XXXXX.github.io目录中，除了其中的隐藏文</p>\n</li>\n<li><p>新建一个.gitignore的文件，内容如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建新的分支，用于存储源MD文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b hexo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加所有文件到暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add --all</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行这一步的时候可能会出现如下错误，这是因为在修改主题时克隆了git代码，我们需要删除themes/pure 文件夹下的 .git文件夹 然后重新执行 git add –all</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">warning: adding embedded git repository: themes/pure</span><br><span class=\"line\">hint: You&apos;ve added another git repository inside your current repository.</span><br><span class=\"line\">hint: Clones of the outer repository will not contain the contents of</span><br><span class=\"line\">hint: the embedded repository and will not know how to obtain it.</span><br><span class=\"line\">hint: If you meant to add a submodule, use:</span><br><span class=\"line\">hint:</span><br><span class=\"line\">hint: \tgit submodule add &lt;url&gt; themes/pure</span><br><span class=\"line\">hint:</span><br><span class=\"line\">hint: If you added this path by mistake, you can remove it from the</span><br><span class=\"line\">hint: index with:</span><br><span class=\"line\">hint:</span><br><span class=\"line\">hint: \tgit rm --cached themes/pure</span><br><span class=\"line\">hint:</span><br><span class=\"line\">hint: See &quot;git help submodule&quot; for more information.</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>提交分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送hexo分支的文件到github仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>至此，我们的源文件就保存到了hexo分支上了，以后每次编写博客的时候只需要将最新的文件提交到hexo分支即可。换电脑以后还可以从git上拉取即可。</p>\n<h2 id=\"附录-Hexo指令\"><a href=\"#附录-Hexo指令\" class=\"headerlink\" title=\"附录(Hexo指令)\"></a>附录(Hexo指令)</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><p>Hexo介绍以及环境安装</p>\n<ul>\n<li><p>Hexo介绍</p>\n<ul>\n<li>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li>\n</ul>\n</li>\n<li><p>Hexo安装</p>\n<ul>\n<li>Hexo安装前提必须是电脑已经安装好了Git,Node.js。(这里不做介绍，自行百度) </li>\n<li>安装完以后</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-正式开始搭建个人博客-这里以我的博客Jiafly为例\"><a href=\"#2-正式开始搭建个人博客-这里以我的博客Jiafly为例\" class=\"headerlink\" title=\"2.正式开始搭建个人博客(这里以我的博客Jiafly为例)\"></a>2.正式开始搭建个人博客(这里以我的博客Jiafly为例)</h2><h3 id=\"1-github上新建一个新的repository\"><a href=\"#1-github上新建一个新的repository\" class=\"headerlink\" title=\"1.github上新建一个新的repository\"></a>1.github上新建一个新的repository</h3><ul>\n<li>新建的repository必须满足以下特点<ul>\n<li>名称格式必须为 XXXXX.github.io</li>\n<li>XXXXX 是github的用户名，不可以随意命名，否则会报错</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-本地新建博客文件夹\"><a href=\"#2-本地新建博客文件夹\" class=\"headerlink\" title=\"2.本地新建博客文件夹\"></a>2.本地新建博客文件夹</h3><ul>\n<li>前往要创建博客的文件夹下执行如下命令<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init jiafly</span><br><span class=\"line\">$ cd jiafly</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-修改博客文件夹目录下的-config-yml文件夹的deploy配置\"><a href=\"#3-修改博客文件夹目录下的-config-yml文件夹的deploy配置\" class=\"headerlink\" title=\"3.修改博客文件夹目录下的_config.yml文件夹的deploy配置\"></a>3.修改博客文件夹目录下的_config.yml文件夹的deploy配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:jiafly/jiafly.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-修改默认主题-可不修改\"><a href=\"#4-修改默认主题-可不修改\" class=\"headerlink\" title=\"4.修改默认主题(可不修改)\"></a>4.修改默认主题(可不修改)</h3><ul>\n<li><p>进入themes目录,克隆想要应用的主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd jiafly/themes</span><br><span class=\"line\">$ git clone https://github.com/cofess/hexo-theme-pure</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改jiafly目录下的_config.yml文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: pure</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-预览\"><a href=\"#5-预览\" class=\"headerlink\" title=\"5.预览\"></a>5.预览</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo S</span><br></pre></td></tr></table></figure>\n<p>执行以上命令后即可以访问 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 查看页面效果</p>\n<h3 id=\"6-部署\"><a href=\"#6-部署\" class=\"headerlink\" title=\"6.部署\"></a>6.部署</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p>执行以上命令之后即会将md文件生成html文件推送到github的master分支上，访问 XXXXX.github.io 即可访问你的博客</p>\n<h3 id=\"7-绑定域名\"><a href=\"#7-绑定域名\" class=\"headerlink\" title=\"7.绑定域名\"></a>7.绑定域名</h3><p>访问XXXXX.github.io怎么也不显得高大尚，这里我们可以绑定自己的域名</p>\n<ul>\n<li>申请自己的域名，解析一个CNAME类型的域名，指定CNAME为 XXXXX.github.io</li>\n<li>在你选择的主题或者默认主题的source文件夹新建一个名为CNAME的文件，内容是你解析的域名。我的文件夹是jiafly/themes/pure/source</li>\n<li>重新部署到github上<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-保存源文件-存储到github的hexo分支-件\"><a href=\"#3-保存源文件-存储到github的hexo分支-件\" class=\"headerlink\" title=\"3.保存源文件(存储到github的hexo分支)件\"></a>3.保存源文件(存储到github的hexo分支)件</h2><ul>\n<li><p>克隆github的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@github.com:XXXXX/XXXXX.github.io.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入 XXXXX.github.io 目录，删除除了.git以为的其他文件</p>\n</li>\n<li><p>将原博客文件夹中的所有可见文件都复制到 XXXXX.github.io目录中，除了其中的隐藏文</p>\n</li>\n<li><p>新建一个.gitignore的文件，内容如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建新的分支，用于存储源MD文档</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b hexo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加所有文件到暂存区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add --all</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行这一步的时候可能会出现如下错误，这是因为在修改主题时克隆了git代码，我们需要删除themes/pure 文件夹下的 .git文件夹 然后重新执行 git add –all</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">warning: adding embedded git repository: themes/pure</span><br><span class=\"line\">hint: You&apos;ve added another git repository inside your current repository.</span><br><span class=\"line\">hint: Clones of the outer repository will not contain the contents of</span><br><span class=\"line\">hint: the embedded repository and will not know how to obtain it.</span><br><span class=\"line\">hint: If you meant to add a submodule, use:</span><br><span class=\"line\">hint:</span><br><span class=\"line\">hint: \tgit submodule add &lt;url&gt; themes/pure</span><br><span class=\"line\">hint:</span><br><span class=\"line\">hint: If you added this path by mistake, you can remove it from the</span><br><span class=\"line\">hint: index with:</span><br><span class=\"line\">hint:</span><br><span class=\"line\">hint: \tgit rm --cached themes/pure</span><br><span class=\"line\">hint:</span><br><span class=\"line\">hint: See &quot;git help submodule&quot; for more information.</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>提交分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送hexo分支的文件到github仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>至此，我们的源文件就保存到了hexo分支上了，以后每次编写博客的时候只需要将最新的文件提交到hexo分支即可。换电脑以后还可以从git上拉取即可。</p>\n<h2 id=\"附录-Hexo指令\"><a href=\"#附录-Hexo指令\" class=\"headerlink\" title=\"附录(Hexo指令)\"></a>附录(Hexo指令)</h2>"},{"title":"Nginx中间件","date":"2018-12-29T14:09:19.000Z","_content":"","source":"_posts/nginx/nginx01.md","raw":"---\ntitle: Nginx中间件\ndate: 2018-12-29 22:09:19\ntags: [nginx]\ncategories: [nginx]\n---\n","slug":"nginx/nginx01","published":1,"updated":"2018-12-29T14:58:29.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqbku0cj000jzbusgl9739s1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"vim使用指南","date":"2018-12-29T23:11:26.000Z","_content":"# 1.vim","source":"_posts/vim/vim使用指南.md","raw":"---\ntitle: vim使用指南\ndate: 2018-12-30 07:11:26\ntags: [linux]\ncategories: [linux]\n---\n# 1.vim","slug":"vim/vim使用指南","published":1,"updated":"2018-12-31T00:10:55.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqbku0cl000kzbusqip6isej","content":"<h1 id=\"1-vim\"><a href=\"#1-vim\" class=\"headerlink\" title=\"1.vim\"></a>1.vim</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-vim\"><a href=\"#1-vim\" class=\"headerlink\" title=\"1.vim\"></a>1.vim</h1>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjqbku07c0001zbush63kr72u","category_id":"cjqbku07i0005zbus8r8vic2w","_id":"cjqbku07n000bzbus9jykrss4"},{"post_id":"cjqbku07g0003zbuscu4y58mm","category_id":"cjqbku07m0008zbusolcd1p48","_id":"cjqbku07p000dzbusoaqc03hw"},{"post_id":"cjqbku0cj000jzbusgl9739s1","category_id":"cjqbku0cl000lzbusz23a3gle","_id":"cjqbku0cm000qzbus1qhsy4cp"},{"post_id":"cjqbku0cl000kzbusqip6isej","category_id":"cjqbku0cm000nzbus6vwgogqd","_id":"cjqbku0cm000szbusceptlkle"}],"PostTag":[{"post_id":"cjqbku07c0001zbush63kr72u","tag_id":"cjqbku07j0006zbusj6d5245l","_id":"cjqbku07m000azbusrh3cf0om"},{"post_id":"cjqbku07g0003zbuscu4y58mm","tag_id":"cjqbku07m0009zbus6mim61na","_id":"cjqbku07p000fzbusuvlzhg2o"},{"post_id":"cjqbku07g0003zbuscu4y58mm","tag_id":"cjqbku07n000czbuss43wkfl3","_id":"cjqbku07q000gzbus569utzal"},{"post_id":"cjqbku07k0007zbus5rpbiun2","tag_id":"cjqbku07p000ezbuswp742ywk","_id":"cjqbku07q000hzbusr185ua9r"},{"post_id":"cjqbku0cj000jzbusgl9739s1","tag_id":"cjqbku0cl000mzbus6rbovzg1","_id":"cjqbku0cm000pzbusvqefjr0s"},{"post_id":"cjqbku0cl000kzbusqip6isej","tag_id":"cjqbku0cm000ozbusprkcj6m0","_id":"cjqbku0cm000rzbusr57tcu7z"}],"Tag":[{"name":"Rabbit","_id":"cjqbku07j0006zbusj6d5245l"},{"name":"SpringBoot","_id":"cjqbku07m0009zbus6mim61na"},{"name":"Redis","_id":"cjqbku07n000czbuss43wkfl3"},{"name":"Hexo","_id":"cjqbku07p000ezbuswp742ywk"},{"name":"nginx","_id":"cjqbku0cl000mzbus6rbovzg1"},{"name":"linux","_id":"cjqbku0cm000ozbusprkcj6m0"}]}}