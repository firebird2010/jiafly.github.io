{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/CNAME","path":"CNAME","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"source/image/rabbit/delay-mq.jpg","path":"image/rabbit/delay-mq.jpg","modified":1,"renderable":0},{"_id":"source/image/11.jpg","path":"image/11.jpg","modified":1,"renderable":0},{"_id":"source/image/rabbit/direct.png","path":"image/rabbit/direct.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-banding.jpg","path":"image/rabbit/mq-banding.jpg","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-basic.png","path":"image/rabbit/mq-basic.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-exchange.jpg","path":"image/rabbit/mq-exchange.jpg","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-fanout.jpg","path":"image/rabbit/mq-fanout.jpg","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-kafka.png","path":"image/rabbit/mq-kafka.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-order-old.png","path":"image/rabbit/mq-order-old.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-miaosha.png","path":"image/rabbit/mq-miaosha.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-order.png","path":"image/rabbit/mq-order.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-p2p.png","path":"image/rabbit/mq-p2p.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-rabbit.png","path":"image/rabbit/mq-rabbit.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-subPush.png","path":"image/rabbit/mq-subPush.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-yibu.png","path":"image/rabbit/mq-yibu.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-yibubingxing.png","path":"image/rabbit/mq-yibubingxing.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-yibuchuanxing.png","path":"image/rabbit/mq-yibuchuanxing.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/p2p.png","path":"image/rabbit/p2p.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/pubsub.png","path":"image/rabbit/pubsub.png","modified":1,"renderable":0},{"_id":"source/image/rabbit/topic.png","path":"image/rabbit/topic.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/headImage.jpg","path":"images/headImage.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/clicklove.js","path":"js/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"source/image/rabbit/mq-direct.jpg","path":"image/rabbit/mq-direct.jpg","modified":1,"renderable":0},{"_id":"source/image/rabbit/mq-topic.jpg","path":"image/rabbit/mq-topic.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"source/image/rabbit/mq-yunzhuanliucheng.jpg","path":"image/rabbit/mq-yunzhuanliucheng.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/README.md","path":"lib/needsharebutton/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/LICENSE","path":"lib/needsharebutton/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1554393014549},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1554393014549},{"_id":"source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1536859920000},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1554393014549},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1554393014550},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1554393014550},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1554393014553},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1554393014553},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1554393014553},{"_id":"themes/hexo-theme-next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1554393014553},{"_id":"themes/hexo-theme-next/bower.json","hash":"8fa4f26f5205cbc64d33318d1be5d35b2667398c","modified":1554393014554},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1554393014554},{"_id":"themes/hexo-theme-next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1554393014553},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1554393014558},{"_id":"themes/hexo-theme-next/_config.yml","hash":"ee189db8712e2423969105c06256dc64879ff423","modified":1554566460311},{"_id":"themes/hexo-theme-next/package.json","hash":"888bcacea284ec536a1428ad957a78dfb3ec255d","modified":1554393014574},{"_id":"source/about/index.md","hash":"884f406c2d2ec94fb854d9c313f1e3789b4978ea","modified":1554646694550},{"_id":"source/categories/index.md","hash":"765530abcf684c33fed564c198a60bb1acc4d675","modified":1554646694541},{"_id":"source/tags/index.md","hash":"115047043cdb1098eeba634951eabe4ea5eb8034","modified":1554646694547},{"_id":"source/temp/RabbitMQ.md","hash":"b4391566d87c45e808bdfa183c80da813aa4963f","modified":1551800766000},{"_id":"themes/hexo-theme-next/.git/config","hash":"167559d3912dc1dfd6f77f753565aa4adac0de05","modified":1554393014545},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554392968170},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554393014543},{"_id":"themes/hexo-theme-next/.git/index","hash":"0602f7e04490b4e4e5369485dc96e3ca77db2048","modified":1554565240155},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"51626a7ab2fab0b9ea0029ff5dd5d29f0df3cf2d","modified":1554393014539},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1554393014550},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1554393014550},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1554393014550},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1554393014551},{"_id":"themes/hexo-theme-next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1554393014551},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1554393014552},{"_id":"themes/hexo-theme-next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1554393014552},{"_id":"themes/hexo-theme-next/.github/mergeable.yml","hash":"8e3a6abc74b5cba57f9586fe6d98762fd4fc9b04","modified":1554393014552},{"_id":"themes/hexo-theme-next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1554393014552},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"b4476ada5c62ee7d63ba2e59ead2ec4897086e3c","modified":1554393014552},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1554393014552},{"_id":"themes/hexo-theme-next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1554393014552},{"_id":"themes/hexo-theme-next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1554393014552},{"_id":"themes/hexo-theme-next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1554393014553},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1554393014554},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1554393014554},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1554393014554},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1554393014555},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1554393014555},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1554393014555},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1554393014555},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1554393014555},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1554393014556},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1554393014558},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1554393014559},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1554393014559},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1554393014559},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"d37a5d82b499a2f082fe9bbf3ad9f11b36b6b837","modified":1554393014559},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1554393014559},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1554393014559},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1554393014559},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1554393014560},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1554393014559},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1554393014559},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1554393014560},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1554393014560},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1554393014560},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1554393014560},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1554393014560},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1554393014560},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1554393014560},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1554393014561},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"74d27ff11c2ab7df5b91cdead0650ce106f34747","modified":1554565383887},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1554393014573},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1554393014573},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1554393014573},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1554393014573},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1554393014573},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1554393014573},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1554393014573},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1554393014575},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1554393014575},{"_id":"themes/hexo-theme-next/source/CNAME","hash":"898105f91480fcf9d5dad1f6d1aeecb7b67a6fdb","modified":1553179884000},{"_id":"themes/hexo-theme-next/source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1536859920000},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1554393014609},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1554393014608},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1554393014609},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554404598422},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554393014591},{"_id":"source/_posts/nginx/Nginx中间件.md","hash":"c5817cb37ab6752cf7f7d3807bd6d98e4e8b41e0","modified":1554649377799},{"_id":"source/_posts/uml/UML-类图.md","hash":"264271ee09dc9efd3c3a07b8ab739baa979c5acf","modified":1554649404175},{"_id":"source/_posts/jvm/深入理解java虚拟机.md","hash":"ab321f7118985d27a99ff318aed18b39e6cbde29","modified":1554646229137},{"_id":"source/image/rabbit/delay-mq.jpg","hash":"8ca5da0d2fbe7101f549fccbd9e09a2585ccb2cf","modified":1543803092477},{"_id":"source/image/11.jpg","hash":"ca343ba9238dfeb636769a56b6a7ba35c7744952","modified":1539241307000},{"_id":"source/image/rabbit/direct.png","hash":"0ba63de33dd09d3a1d6991e137d9ba2b86339e9f","modified":1543340300105},{"_id":"source/image/rabbit/mq-banding.jpg","hash":"518c0b6fdd25743ef8afbd0f6ef715011c5d183c","modified":1543424238102},{"_id":"source/image/rabbit/mq-basic.png","hash":"8dfef652adcbab142f3aa48e016d13638ad51108","modified":1543332258179},{"_id":"source/image/rabbit/mq-exchange.jpg","hash":"f385789ea47f8e12173f2f9ce685671904f6e2b0","modified":1543423659701},{"_id":"source/image/rabbit/mq-fanout.jpg","hash":"592b21617290d0fd5d4208ab1d7c1851092b347f","modified":1543652937916},{"_id":"source/image/rabbit/mq-kafka.png","hash":"be560f12df555a8757a7778f2661507b60223a48","modified":1543337322774},{"_id":"source/image/rabbit/mq-order-old.png","hash":"87be91fd0d02c3caf87a4c0fb1adf5ba358d92ae","modified":1543337267534},{"_id":"source/image/rabbit/mq-miaosha.png","hash":"7df0e1b286581f2a1f50b4edbe83b0173febceef","modified":1543336497865},{"_id":"source/image/rabbit/mq-order.png","hash":"8aa26063b4782184567dd42b8f6623bf2b086adb","modified":1543337143964},{"_id":"source/image/rabbit/mq-p2p.png","hash":"194a5782e42ccd73c2c301207674b6ba825cc054","modified":1543337565154},{"_id":"source/image/rabbit/mq-rabbit.png","hash":"7582cae932ca99a85a28542f861781cf2e0f8ea3","modified":1543333148764},{"_id":"source/image/rabbit/mq-subPush.png","hash":"9f6ecf7551d172e4c4eaac3a9d67071cf6f3b22f","modified":1543337575464},{"_id":"source/image/rabbit/mq-yibu.png","hash":"9d18af2ad27f0a032381e8140dc78de20081c25a","modified":1543336262327},{"_id":"source/image/rabbit/mq-yibubingxing.png","hash":"1e44d0091d38e075c7c1b3542f674a89575d468e","modified":1543336234041},{"_id":"source/image/rabbit/mq-yibuchuanxing.png","hash":"30da36a811fbb3cf862dfdf16a2ae0ba70fb1760","modified":1543336125224},{"_id":"source/image/rabbit/p2p.png","hash":"2b6a18e703af96042fb81c904f60615d5501f3cc","modified":1543337822632},{"_id":"source/image/rabbit/pubsub.png","hash":"582e814ea15a73daa11b55d1c7e235cfa4a58faf","modified":1543337884964},{"_id":"source/_posts/docker/Docker-02-创建mysql容器.md","hash":"d95f27340709cc771802e8701d9be2e37c79ed7f","modified":1554649361502},{"_id":"source/image/rabbit/topic.png","hash":"13921a1b47d658785fa568fb2d3d68ceaeb9fdb7","modified":1543370313534},{"_id":"source/_posts/docker/Docker-01-docker介绍.md","hash":"d5069bf99ff66670df1aa4c515fe27e3d57e8050","modified":1554649340673},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554392968171},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554392968172},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554392968174},{"_id":"themes/hexo-theme-next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554392968173},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554392968175},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554392968172},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554392968172},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554392968175},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554392968173},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554392968174},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554392968176},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554392968170},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"0932e61761099a1dd8fb76b914870ee32e1056e1","modified":1554393014544},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1554393014551},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1554393014551},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1554393014551},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1554393014551},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1554393014556},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1554393014556},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1554393014556},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1554393014556},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1554393014557},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1554393014557},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1554393014557},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1554393014557},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1554393014557},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1554393014558},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1554393014557},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"1b5bd6ae5781137d81dc8667e912d3df6eeab260","modified":1554393014558},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1554393014558},{"_id":"themes/hexo-theme-next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1554393014561},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1554393014561},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1554393014562},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1554393014562},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"10187fafe566b3e5bfa4e7e10c77ea9026d9081d","modified":1554393014562},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1554405361021},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1554393014562},{"_id":"themes/hexo-theme-next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1554393014562},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1554393014564},{"_id":"themes/hexo-theme-next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1554393014564},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1554393014569},{"_id":"themes/hexo-theme-next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1554393014569},{"_id":"themes/hexo-theme-next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1554393014570},{"_id":"themes/hexo-theme-next/layout/_third-party/copy-code.swig","hash":"01ded5e1bad89a6f8d64cd063e3e4e42c20d33bc","modified":1554393014571},{"_id":"themes/hexo-theme-next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1554393014571},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1554393014571},{"_id":"themes/hexo-theme-next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1554393014571},{"_id":"themes/hexo-theme-next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1554393014572},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1554393014572},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1554393014572},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1554393014572},{"_id":"themes/hexo-theme-next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1554393014573},{"_id":"themes/hexo-theme-next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1554393014574},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1554393014574},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1554393014574},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1554393014575},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1554393014575},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1554393014575},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1554393014575},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1554393014576},{"_id":"themes/hexo-theme-next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1554393014576},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1554393014576},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1554393014576},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1554393014576},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1554393014576},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1554393014576},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1554393014576},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1554393014591},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1554393014592},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1554393014592},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554393014592},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1554393014592},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1554393014593},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1554393014593},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1554393014593},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1554393014593},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1554393014593},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1554393014593},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1554393014594},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1554393014593},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554393014594},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1554393014594},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554393014594},{"_id":"themes/hexo-theme-next/source/images/headImage.jpg","hash":"22fe9c31602ffe60aacb9f219937e6e63f970377","modified":1535608323000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1554393014594},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1554393014594},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1554393014594},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1554393014595},{"_id":"themes/hexo-theme-next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1554393014595},{"_id":"themes/hexo-theme-next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1554393014595},{"_id":"themes/hexo-theme-next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1554393014595},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1554393014596},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1554393014596},{"_id":"themes/hexo-theme-next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1554393014596},{"_id":"themes/hexo-theme-next/source/js/clicklove.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1554565260741},{"_id":"themes/hexo-theme-next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1554393014596},{"_id":"themes/hexo-theme-next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1554393014597},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1554393014597},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1554393014566},{"_id":"themes/hexo-theme-next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1554393014566},{"_id":"themes/hexo-theme-next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1554393014566},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1554393014566},{"_id":"themes/hexo-theme-next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1554393014567},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1554393014567},{"_id":"source/image/rabbit/mq-direct.jpg","hash":"52b9ba59d94f1976ffe4aa592daf7c695b1a6121","modified":1543424560234},{"_id":"source/image/rabbit/mq-topic.jpg","hash":"d94534e876eea78ee4a4a22586fa35a4e136b93b","modified":1543425218792},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554393014587},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554393014587},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554393014587},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554393014591},{"_id":"themes/hexo-theme-next/source/images/wechatpay.jpg","hash":"e43cbf5fd13e86d6176a18458e8345b27e5320b7","modified":1554399207000},{"_id":"source/image/rabbit/mq-yunzhuanliucheng.jpg","hash":"d310f1143d9191c985d5b296d31152da42f725e3","modified":1543422975284},{"_id":"themes/hexo-theme-next/.git/objects/85/c604138d430d4be2ab9a1f2d9983bf39cf9fca","hash":"a31783da49cafab99eeb587401d1a28e988e3228","modified":1554396877731},{"_id":"themes/hexo-theme-next/.git/objects/df/85bc02994d88fc15207c27d9fccd9ab44d840d","hash":"1d22bd36d8365130cb900428afa8eebf3bb93d6f","modified":1554405489178},{"_id":"themes/hexo-theme-next/.git/objects/ed/11a1959c68df3f95b3f7e61701f5ca15ff1d15","hash":"1c990a9835c27ec303a1ddf21001adf4547ca38e","modified":1554405489177},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"b10714c9a553f2bca2b4861425e55e9f339cdfb4","modified":1554393014544},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1554393014563},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1554393014563},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1554393014564},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1554393014563},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1554393014561},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1554393014561},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1554393014564},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1554393014563},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1554393014563},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1554393014563},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1554393014564},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1554393014564},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1554393014564},{"_id":"themes/hexo-theme-next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1554393014565},{"_id":"themes/hexo-theme-next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1554393014565},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1554393014565},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1554393014565},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1554393014565},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1554393014565},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1554393014565},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1554393014566},{"_id":"themes/hexo-theme-next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1554393014566},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1554393014567},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1554393014568},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1554393014568},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1554393014568},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1554393014568},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1554393014568},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1554393014568},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1554393014569},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1554393014569},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1554393014569},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1554393014569},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1554393014569},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1554393014569},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1554393014569},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1554393014570},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1554393014570},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1554393014570},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1554393014570},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1554393014570},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1554393014571},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1554393014570},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1554393014570},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1554393014571},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1554393014571},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1554393014571},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1554393014572},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1554393014572},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1554393014572},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1554393014587},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1554393014587},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1554393014587},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"bb744c9264e8e79ae96431a5463f65fe8de5828a","modified":1554393014587},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1554393014591},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1554393014591},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1554393014591},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"d0e97b205d3320421c380f2eee445457430c8152","modified":1554393014591},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"443ff7b428fdedb85dab737c80b774360308b972","modified":1554567558098},{"_id":"themes/hexo-theme-next/source/images/alipay.jpg","hash":"6f0b5f75575300e4387a3e83a7fccf271e4cf691","modified":1554399188000},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1554393014596},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1554393014596},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1554393014597},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1554393014597},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1554393014598},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1554393014598},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/README.md","hash":"46bb223bdf714a47a1449666f4f70556447786d1","modified":1554402128606},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"f151bb5ba4a2cd334061bac27a1a155969b62cdb","modified":1554402128607},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1554402128606},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"75dee2bb4796ca66693831d769d9a105eed8c290","modified":1554402128607},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554393014608},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554393014608},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554393014608},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1554393014598},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1554393014567},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1554393014567},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1554393014567},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1554393014567},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1554393014567},{"_id":"themes/hexo-theme-next/.git/objects/46/39a1f9664da5a15ccbc8f2ed8fc2a744145a9d","hash":"7910ff69b26d44f5b9ffeb8d5e898c50dbac7b1c","modified":1554399266972},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554393014606},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"0932e61761099a1dd8fb76b914870ee32e1056e1","modified":1554393014544},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-0847a38cebb5c57e3d2294813d627af418d8ec46.idx","hash":"3ae0c6f4bc788f37141cd88fea45db1e79846a8a","modified":1554393013841},{"_id":"themes/hexo-theme-next/.git/objects/fc/840adb6e7426dbd4fbcf10d79d60ae1bc27f45","hash":"74ca2be98568365fbd39543b952d850d21826589","modified":1554399266967},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554393014542},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"7729491514f8ccdf96777de8f71420e6873c5423","modified":1554393014577},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1554393014577},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"8175b9a275d04718f6caf6dc6ae483035ad71b0c","modified":1554393014577},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1554393014577},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1554393014577},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1554393014580},{"_id":"themes/hexo-theme-next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1554393014582},{"_id":"themes/hexo-theme-next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1554393014582},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1554393014586},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1554393014586},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1554393014586},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"bb9b753d3cc3a816340bd697512a83e757f907fb","modified":1554393014586},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1554393014586},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1554393014586},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1554393014587},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1554393014587},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1554393014588},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1554393014588},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1554393014588},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1554393014588},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1554393014588},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1554393014588},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1554393014588},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1554393014589},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1554393014589},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1554393014589},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1554393014589},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1554393014590},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1554393014589},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1554393014590},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1554393014590},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1554393014590},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1554393014590},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1554393014590},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554393014598},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1554393014599},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554393014599},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554402128599},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/FETCH_HEAD","hash":"6d52f3ef3989e94b912b4f9530cf6d75752da9cf","modified":1554402168140},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/ORIG_HEAD","hash":"414a643b841a756253dc0c2472b2f7a6e9b14778","modified":1554402168154},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/config","hash":"3bd2fc1363cc36b469c252931084daa7b046d52a","modified":1554402128600},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554402125547},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/index","hash":"1db38eaba1d01dc5e62c5d4b0aa1247c454c1d8c","modified":1554402128608},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/packed-refs","hash":"018b03f9d6b9a0c7174e34007d73f0e086898663","modified":1554402128597},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1554402128606},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554393014607},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554393014605},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554393014604},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"0932e61761099a1dd8fb76b914870ee32e1056e1","modified":1554393014542},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1554393014578},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1554393014578},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1554393014578},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1554393014578},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1554393014578},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1554393014578},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1554393014578},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1554393014578},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1554393014579},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1554393014579},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1554393014579},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1554393014579},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1554393014579},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1554393014580},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1554393014579},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1554393014579},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1554393014580},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1554393014580},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1554393014580},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1554393014580},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1554393014580},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1554393014581},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1554393014580},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1554393014580},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1554393014581},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1554393014581},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1554393014581},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1554393014581},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1554393014581},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1554393014581},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1554393014582},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"3aae9df21cf171accb93c9352842e0ee6445d23d","modified":1554567341218},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1554393014582},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1554393014582},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1554393014582},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1554393014583},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1554393014583},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1554393014583},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1554393014583},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1554393014583},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"e425433b81da2714d6fa17c138e1fa750ad810ec","modified":1554393014583},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1554393014584},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1554393014583},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1554393014583},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1554393014584},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1554393014584},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1554393014584},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1554393014584},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1554393014584},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1554393014584},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1554393014585},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1554393014585},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1554393014584},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1554393014585},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1554393014585},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1554393014585},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1554393014585},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1554393014585},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1554393014586},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1554393014586},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1554393014585},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1554393014589},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1554393014589},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1554393014589},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554402125549},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554402125547},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554402125549},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554402125550},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554402125550},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554402125548},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554402125549},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554402125548},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554402125551},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554402125550},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554402125551},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/logs/HEAD","hash":"d8a5db3a2b83858e0425d978819836d105de4d09","modified":1554402128599},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554402125546},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554393014603},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1554402128338},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/0c/97d452adf1f9aa29468c10dc5aca581c40d35d","hash":"8247b73544627904f1c49b2d48e8a5ca24c49d94","modified":1554402128580},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/1f/9bfac8ac3b22f100c85bb82877c7af973f011a","hash":"74f0088767a48b5b8874bb5e8953604058233105","modified":1554402128557},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/10/7997cd9f09e787407d6a579bb0ead61ba0c44e","hash":"a7bb772e0f541b9f0c5e4682f88881faef7d2b87","modified":1554402128334},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/34/73a532c76c2ec7eaafc9bba9bc37851cb5a349","hash":"991d675a7982030fef4e8103ecdf717e2e153143","modified":1554402128578},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/35/b5765a89abcc57439ad0e7b60dc67225e76570","hash":"b020fa3885506f64651a4a63d42b32c7874a072a","modified":1554402128577},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/37/e84bbc9c853d9abc39b18361a67d09402a9fec","hash":"330ba4772d5feaf23bd85aa38be94a1b254cac8a","modified":1554402128328},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1554402128340},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/40/a8a2ab6075fb13a489aa2585f55518e03440cc","hash":"40a879b454bae72ba30ab918e7cbb3dee04c45c4","modified":1554402128573},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/41/f2acffe002ce9fa94904bdbb105c62697c08bf","hash":"6aca807e726bf9bbffdab1b97cae1132dd3570c8","modified":1554402128329},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/3c/673c6e10073f4cf715526c3ab99edf7461b267","hash":"9362453f89eefcc6988cd3a39548c90402f616a8","modified":1554402128337},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/46/66508d485306f48ac866f4a0eded896b01adb0","hash":"a37ee79e50b83b3a5a7f736cfc6b8eafc210ebca","modified":1554402128584},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/63/ce5669cda10d9c600a65df1c509155a9dce354","hash":"e7eefb05c18a77c99c1044dc53cc0b33bc4bc723","modified":1554402128334},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/49/c5d2b0c8ded3a5465f659504d5654759b45ce9","hash":"133f2916c8dd706d9ea44203f671d42abed6d183","modified":1554402128574},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/51/e4a626dc726971ce48b9d29531ec4fa11ab93c","hash":"8bc98d2bd4f224fbba56e0339ba9e1abfbd0e676","modified":1554402128333},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/49/e08108a89c7bf4f1e03fdf9d23fa1841ddc40a","hash":"3a32bfdf83debfa739a05a12c77c9c8c9fad6baf","modified":1554402128326},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1554402128340},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/72/38adfc9f0b65e7dd8e7eb39b53fd8dbd05728d","hash":"67f5fb35cbbb4625e049368c8ef7fef03e21315d","modified":1554402128585},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/77/ad104add4d67baba615eccfcc7876bdf60256f","hash":"787497f0b2a074be846ae940ba58475a830690d4","modified":1554402128586},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/77/b1d62571d3374de0902fdf14c3fd925263c295","hash":"f0d087a62296e14072d250d0db5bfeb01e3e0f4c","modified":1554402128335},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/80/8d63b637e30043e74f5150047c232028ffa3bf","hash":"c7cd9201316a2cf66b63cd0f520dc827912d8be8","modified":1554402128341},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/91/85a82ce05e0c4c6287e3ce6c31d79049a6c5de","hash":"d40af8a4f325b8b2d6eeb1f51497d2313aade46d","modified":1554402128577},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/8a/e95435136e887fc30227f9fdab68ff72689315","hash":"f1225345f08eb5abbf849a40efdec16839268c9b","modified":1554402128337},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/96/b1227c70e63f95b099993321043a2e05abdbea","hash":"d1f0885e3a68fdfc87e68e5ba6b60de116c3c7a5","modified":1554402128582},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/9a/563a770314159840897f1852b05f183911ae71","hash":"0949c3c36849e955c84cc66f544fbeeca266ae19","modified":1554402128584},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/99/ac01b3cae78a765c45566d5540596f71f0f9ed","hash":"394e54788569a0aef47f5c1867b7a617d314b677","modified":1554402128331},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/9c/850e429959950cfd82a30843ad130dfd24331a","hash":"001c3423e8a4bf2ccd3e0ad3080d5cace613d42c","modified":1554402128575},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/a1/5c0ab3f7ca37d06a7a3dc28f6375ac8fcaffe1","hash":"3aa24fa2254a71f9b408a01ad7154cc1cbf7cde6","modified":1554402128335},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/9f/e80d3fee719ad9953c0e8e8dec472bb727d17d","hash":"09516f8a3f62a9e286f3ac1985969d0913d53271","modified":1554402128567},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/a7/df932fbaa27cde88a4e1b6b222e445d24d88a9","hash":"65ed1fff3d6ea0eed90011b6c9c892381c0b4837","modified":1554402128565},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/b4/8a9ad41dbacf220607a3854e23f2136ced96fb","hash":"81ee83b48edb7df4f08573cdd14200be5f62128a","modified":1554402128331},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/aa/f4e31e1d4ea073ad9f6926e146fea3c6d8b423","hash":"7c412d2a2243907dff0a1940f13a539675d76428","modified":1554402128583},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/b2/8efd888e853a00d7c8ba8fc827ddb0edb6668b","hash":"8c17e115b7c8a860650191fc1b74e7861ab0f7b9","modified":1554402128576},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/bf/839b1a2dfd79af314506907196f817d1d540b0","hash":"196a52782c02c03b787cca10ca172a6be6ddb8e0","modified":1554402128587},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/da/3a5548a43813122821bf626fdd51a15f89afe3","hash":"1d8c39585806e5c7b051eb58d566a399b0e77006","modified":1554402128332},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/e3/096992403adfd6ad955585273915bdeae3dc32","hash":"356ee4003511e7f9c9c4badd52af674adceec2d9","modified":1554402128327},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/eb/83c3470835cc056d65fbaec5ba59fc01a341c6","hash":"a48447a56db4dce3b2ce99fcfd4cbb5d5902877f","modified":1554402128580},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/e7/169e14c00f267f49acb69c1ba41dc9a3229d36","hash":"2b79081ef52aec5ca3896894e25e330aed84ac6f","modified":1554402128572},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/ec/efb0da782cd6bdfbd7aec14e8e186c2010beb3","hash":"002214074d8349ca4765414ee39cbeb0a3a443d6","modified":1554402128569},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/ec/fd49187c43c81ad64c250eac1d63893c073e38","hash":"0e6f432ab1ec9a413655267ad3f62205e2e71f99","modified":1554402128579},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/f5/a400ecc881307dc0faa24170ae0a9bcbba861c","hash":"4b82935622bd12041cf7665503ae8e060705e7fd","modified":1554402128330},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/refs/heads/master","hash":"414a643b841a756253dc0c2472b2f7a6e9b14778","modified":1554402128599},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/objects/f5/fc2c417f7156d25437bbe069fa10645b4c3a63","hash":"377e0fce80cab14d6966371260926ee78da12b09","modified":1554402128336},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/logs/refs/heads/master","hash":"d8a5db3a2b83858e0425d978819836d105de4d09","modified":1554402128599},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554402128598},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/.git/logs/refs/remotes/origin/HEAD","hash":"d8a5db3a2b83858e0425d978819836d105de4d09","modified":1554402128598},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-0847a38cebb5c57e3d2294813d627af418d8ec46.pack","hash":"4da939dd7d2ac3cdd5c48a30d105d5b42ff10d30","modified":1554565240000},{"_id":"public/atom.xml","hash":"74298bdc2e525082e11a6d8f81d90fbda6ad5f8d","modified":1554649430837},{"_id":"public/content.json","hash":"602cc280adcf947f26c0ef9e5d06246b38f9e4a5","modified":1554649430845},{"_id":"public/search.xml","hash":"0dc8ea8d1b98c6dbc2295c1d50a0f371e82f2e43","modified":1554649430845},{"_id":"public/404.html","hash":"55c9319604fd892d72be7abc64568f2d1c6b21b8","modified":1554649430851},{"_id":"public/about/index.html","hash":"87c0bcb65472c44ff671cf63f82759896a79fd6f","modified":1554649430851},{"_id":"public/categories/index.html","hash":"351320ab22ddef2a1dd40ca1aa25a6e8b947c417","modified":1554649430851},{"_id":"public/tags/index.html","hash":"30edf9c38ad5149ca393df48675feea18a3c1c30","modified":1554649430851},{"_id":"public/temp/RabbitMQ.html","hash":"2f6a394c3a1440a6ee8c373974cd6ccd7655b491","modified":1554649430851},{"_id":"public/2019/04/01/jvm/深入理解java虚拟机/index.html","hash":"72f015e1b246c5a6af8c0172a33e73acc5387c9d","modified":1554649430851},{"_id":"public/2019/03/10/docker/Docker-02-创建mysql容器/index.html","hash":"8aee456f412b698b33445a3e7c7158c97de46b63","modified":1554649430852},{"_id":"public/2018/04/01/nginx/Nginx中间件/index.html","hash":"cc5d3ae9e5a4b4c16b9f136e1d46fd8a85126d51","modified":1554649430852},{"_id":"public/2018/04/01/uml/UML-类图/index.html","hash":"936f432b17cc106e446bc9a5d6a25393d84d333d","modified":1554649430852},{"_id":"public/2018/03/06/docker/Docker-01-docker介绍/index.html","hash":"37da8e022ff920623e44c3cc95a8cc246362eacf","modified":1554649430852},{"_id":"public/categories/nginx/index.html","hash":"611ba8af6c98ffc8052aa96603fe2f0c7504ed7a","modified":1554649430852},{"_id":"public/categories/uml/index.html","hash":"0805b0b1d737cb991874a2a93c9736ab6b85bf72","modified":1554649430852},{"_id":"public/categories/docker/index.html","hash":"7bd7ca861e2b303a89079b086444aa6364b83fa7","modified":1554649430852},{"_id":"public/categories/jvm/index.html","hash":"9d26bc8f8c1f72e2a32a03bd6ca6a1e76fa93359","modified":1554649430852},{"_id":"public/archives/index.html","hash":"3f3853ab2877c73aefbfa20f6a6da3a6204f9aca","modified":1554649430852},{"_id":"public/archives/2018/index.html","hash":"a52c17f3df57ccb5bd1f5ae71f47069b77a67de7","modified":1554649430852},{"_id":"public/archives/2018/03/index.html","hash":"d1a7610dddb84979d9b8613d19776be36f17d648","modified":1554649430852},{"_id":"public/archives/2018/04/index.html","hash":"09c66b18f607cb2eccd29d909c31948b4a89ce4b","modified":1554649430852},{"_id":"public/archives/2019/index.html","hash":"f7dcf90129aca4ccff7f1e44681feb119e7344f3","modified":1554649430852},{"_id":"public/archives/2019/03/index.html","hash":"3decd0cfba43ef0e86182238195fc6e07b7077f6","modified":1554649430852},{"_id":"public/archives/2019/04/index.html","hash":"bf4dfacea1d253971de4b0c3d2f9f3782bedb5ad","modified":1554649430852},{"_id":"public/index.html","hash":"b7034c62adf473e71f8c45c2523320127503e057","modified":1554649430852},{"_id":"public/tags/nginx/index.html","hash":"393646db737e629a46e3e2893be76f13b9f376ec","modified":1554649430852},{"_id":"public/tags/uml/index.html","hash":"2dfd700699b4fedfa7f9f83f6c5aa57e10039067","modified":1554649430853},{"_id":"public/tags/docker/index.html","hash":"9590cff314c45ee402a0ae70d66ce86cc93e98b0","modified":1554649430853},{"_id":"public/tags/mysql/index.html","hash":"a92133a6c1caae60f5e5f07829c870e8540e1273","modified":1554649430853},{"_id":"public/tags/jvm/index.html","hash":"e82d3b35447c4e2c9c7015b0e604a78f292a84bd","modified":1554649430853},{"_id":"public/lib/blog-encrypt.js","hash":"24b097141e36e24d93a30894eecb94307185141d","modified":1554649430853},{"_id":"public/CNAME","hash":"898105f91480fcf9d5dad1f6d1aeecb7b67a6fdb","modified":1554649430858},{"_id":"public/image/rabbit/delay-mq.jpg","hash":"8ca5da0d2fbe7101f549fccbd9e09a2585ccb2cf","modified":1554649430858},{"_id":"public/image/rabbit/direct.png","hash":"0ba63de33dd09d3a1d6991e137d9ba2b86339e9f","modified":1554649430858},{"_id":"public/image/rabbit/mq-banding.jpg","hash":"518c0b6fdd25743ef8afbd0f6ef715011c5d183c","modified":1554649430858},{"_id":"public/image/rabbit/mq-basic.png","hash":"8dfef652adcbab142f3aa48e016d13638ad51108","modified":1554649430858},{"_id":"public/image/rabbit/mq-exchange.jpg","hash":"f385789ea47f8e12173f2f9ce685671904f6e2b0","modified":1554649430858},{"_id":"public/image/rabbit/mq-fanout.jpg","hash":"592b21617290d0fd5d4208ab1d7c1851092b347f","modified":1554649430858},{"_id":"public/image/rabbit/mq-kafka.png","hash":"be560f12df555a8757a7778f2661507b60223a48","modified":1554649430858},{"_id":"public/image/rabbit/mq-order-old.png","hash":"87be91fd0d02c3caf87a4c0fb1adf5ba358d92ae","modified":1554649430858},{"_id":"public/image/rabbit/mq-miaosha.png","hash":"7df0e1b286581f2a1f50b4edbe83b0173febceef","modified":1554649430858},{"_id":"public/image/rabbit/mq-order.png","hash":"8aa26063b4782184567dd42b8f6623bf2b086adb","modified":1554649430858},{"_id":"public/image/rabbit/mq-p2p.png","hash":"194a5782e42ccd73c2c301207674b6ba825cc054","modified":1554649430858},{"_id":"public/image/rabbit/mq-rabbit.png","hash":"7582cae932ca99a85a28542f861781cf2e0f8ea3","modified":1554649430858},{"_id":"public/image/rabbit/mq-subPush.png","hash":"9f6ecf7551d172e4c4eaac3a9d67071cf6f3b22f","modified":1554649430858},{"_id":"public/image/rabbit/mq-yibu.png","hash":"9d18af2ad27f0a032381e8140dc78de20081c25a","modified":1554649430858},{"_id":"public/image/rabbit/mq-yibubingxing.png","hash":"1e44d0091d38e075c7c1b3542f674a89575d468e","modified":1554649430858},{"_id":"public/image/rabbit/mq-yibuchuanxing.png","hash":"30da36a811fbb3cf862dfdf16a2ae0ba70fb1760","modified":1554649430859},{"_id":"public/image/rabbit/p2p.png","hash":"2b6a18e703af96042fb81c904f60615d5501f3cc","modified":1554649430859},{"_id":"public/image/rabbit/pubsub.png","hash":"582e814ea15a73daa11b55d1c7e235cfa4a58faf","modified":1554649430859},{"_id":"public/image/rabbit/topic.png","hash":"13921a1b47d658785fa568fb2d3d68ceaeb9fdb7","modified":1554649430859},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1554649430859},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1554649430859},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554649430859},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1554649430859},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1554649430859},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1554649430859},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1554649430859},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1554649430860},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1554649430860},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1554649430860},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1554649430860},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1554649430860},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554649430860},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1554649430860},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554649430860},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1554649430860},{"_id":"public/images/headImage.jpg","hash":"22fe9c31602ffe60aacb9f219937e6e63f970377","modified":1554649430860},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1554649430860},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1554649430860},{"_id":"public/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1554649430860},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1554649430860},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1554649430860},{"_id":"public/css/blog-encrypt.css","hash":"262922c3f49cb8cca7b3ea982c49b57de2af53d6","modified":1554649430860},{"_id":"public/image/rabbit/mq-direct.jpg","hash":"52b9ba59d94f1976ffe4aa592daf7c695b1a6121","modified":1554649431358},{"_id":"public/image/rabbit/mq-topic.jpg","hash":"d94534e876eea78ee4a4a22586fa35a4e136b93b","modified":1554649431360},{"_id":"public/images/wechatpay.jpg","hash":"e43cbf5fd13e86d6176a18458e8345b27e5320b7","modified":1554649431361},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554649431361},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554649431361},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1554649431365},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1554649431365},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1554649431365},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1554649431365},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1554649431365},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1554649431365},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1554649431365},{"_id":"public/js/clicklove.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1554649431365},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1554649431365},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1554649431365},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1554649431365},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1554649431365},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1554649431365},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1554649431365},{"_id":"public/lib/needsharebutton/README.html","hash":"16294954bab07c47f87edf3742ab2547c63d5193","modified":1554649431365},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554649431365},{"_id":"public/css/main.css","hash":"3af3ae18fbc54e41a0e138533f2ffb958e177ce5","modified":1554649431365},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"f151bb5ba4a2cd334061bac27a1a155969b62cdb","modified":1554649431365},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554649431366},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554649431366},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554649431366},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554649431366},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"75dee2bb4796ca66693831d769d9a105eed8c290","modified":1554649431366},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554649431366},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554649431366},{"_id":"public/image/11.jpg","hash":"ca343ba9238dfeb636769a56b6a7ba35c7744952","modified":1554649431366},{"_id":"public/images/alipay.jpg","hash":"6f0b5f75575300e4387a3e83a7fccf271e4cf691","modified":1554649431366},{"_id":"public/image/rabbit/mq-yunzhuanliucheng.jpg","hash":"d310f1143d9191c985d5b296d31152da42f725e3","modified":1554649431366},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554649431366},{"_id":"public/lib/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1554649431366}],"Category":[{"name":"nginx","_id":"cju724og90007ixs6c59v5fpd"},{"name":"uml","_id":"cju724ogd000cixs69v5ui1v4"},{"name":"docker","_id":"cju724ogf000gixs6shja6imy"},{"name":"jvm","_id":"cju724ogi000mixs6ila1zum1"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2018-09-13T17:33:39.395Z","updated":"2018-09-13T17:32:00.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cju724o8o0000ixs6jhazzds7","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n"},{"title":"关于","type":"about","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ntype: about\nlayout: \"about\"\ncomments: false\n---\n","date":"2019-04-07T14:18:14.550Z","updated":"2019-04-07T14:18:14.550Z","path":"about/index.html","_id":"cju724oai0001ixs6ryx214hl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\nlayout: \"categories\"\ncomments: false\n---\n","date":"2019-04-07T14:18:14.542Z","updated":"2019-04-07T14:18:14.541Z","path":"categories/index.html","_id":"cju724oai0002ixs6aquyx3ah","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","type":"tags","layout":"tags","comments":0,"_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: tags\nlayout: \"tags\"\ncomments: false\n---\n\n","date":"2019-04-07T14:18:14.547Z","updated":"2019-04-07T14:18:14.547Z","path":"tags/index.html","_id":"cju724oaj0003ixs6luye71c0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RabbitMQ实战","date":"2018-11-27T12:31:16.000Z","tags":["rabbitMQ","消息队列"],"categories":["消息队列"],"_content":"# 消息中间件\n## 什么是消息中间\n消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、\nJSON 等，也可以很复杂，比如内嵌对象。\n\n消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。\n\n消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点\n(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。\n\n目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。\n\n## 消息中间件的作用\n消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消\n息中间件的作用可以概括如下。\n### 解耦\n在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。\n### 冗余〈存储)\n有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。\n### 扩展性\n因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。\n### 削峰\n在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。\n### 可恢复性\n当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。\n### 顺序保证\n在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。\n### 缓冲\n在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。\n### 异步通信\n在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。\n\n# RabbitMQ入门\n## RabbitMQ介绍\nRabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息\n队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。\n\nRabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。\n\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\n## RabbitMQ安装\n- 使用docker安装(3-management版本自带管理后台)\n```bash\n$ docker pull rabbitmq:3-management \n```\n- 启动rabbitMQ并且启动管理后台\n```bash\n$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management\n\n$ docker start rabbitmq\n```\n- 查看管理后台\n在浏览器打开 http://localhost:15672/ 输入用户名:admin 密码:admin 可进入管理后台\n\n\n## 相关概念介绍\n### 生产者和消费者\n- Producer:生产者，就是投递消息的一方。\n生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。\n\n- Consumer:消费者，就是接收消息的一方。\n消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。\n\n- Broker:消息中间件的服务节点。\n对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。\n\nRabbitMQ运转流程\n![RabbitMQ运转流程](/image/rabbit/mq-yunzhuanliucheng.jpg)\n\n### 交换器Exchange，路由RoutingKey，绑定Binding\n- Exchange:交换器\n![交换器](/image/rabbit/mq-exchange.jpg)\nMQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。\nRabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。\n\n- RoutingKey:路由键\n生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。\n\n- Binding:绑定\nRabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:\n![绑定](/image/rabbit/mq-banding.jpg)\n\n### 交换器类型\nRabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提\n到另外两种类型:System和自定义，这里就不详细介绍了。\n#### fanout\n就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：\n![fanout](/image/rabbit/mq-fanout.jpg)\n#### direct(默认的交换器类型)\ndirect类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：\n![direct](/image/rabbit/mq-direct.jpg)\n#### topic\n上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:\n- RoutingKey为一个点号\".\"分隔的字符串(被点号\".\"分隔开的每一段独立的字符串称为一个单词)，如\"com.rabbitmq.client\"，\"java.util.concurrent\",\"com.hidden.client\"等\n- BindingKey也是点号\".\"分隔\n- BindingKey中可以存在两种特殊字符串\"星号\"和\"#\"，用于做模糊匹配，其中\"星号\"用于匹配一个单词，”#\"用于匹配多规格单词(可以是零个)。\n如下图：\n![topic](/image/rabbit/mq-topic.jpg)\n思考: \n1.路由建 \"com.rabbitmq.client\"会路由到哪一个队列？\n2.路由建 \"com.hidden.client\"会路由到哪一个队列？\n3.路由建 \"com.hidden.demo\"会路由到哪一个队列？\n4.路由建 \"java.util.concurrent\"会路由到哪一个队列？\n5.路由建 \"java.rabbitmq.demo\"会路由到哪一个队列？\n\n#### headers(不常用)\nheaders类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中\n的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。\n\n\n## 交换器类型详解\n### \n新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer\npom.xml\n```POM\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n  </dependency>\n```\nrabbit-producer/application.properties\n```\nserver.port=1180\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\nrabbit-producer/application.properties\n```\nserver.port=1181\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\n项目创建完成\n\n### 声明一个队列各个参数的意义\nname: 队列的名称 字符串\ndurable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库\nexclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。\nautoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除\narguments: 队列中的消息什么时候会自动被删除？ 是一个Map<String, Object>，他有如下参数\n   \"x-message-ttl\": 1000  设置队列中的所有消息的生存周期\n   \"x-expires\": 1000  当队列在指定的时间没有被访问就会被删除\n   \"x-max-length\": 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉\n   \"x-max-length-bytes\":  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小\n   \"x-dead-letter-exchange\": \"\" 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉\n   \"x-dead-letter-routing-key\": \"\"  将删除的消息推送到指定交换机的指定路由键的队列中去\n   \"x-max-priority\":  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费\n   \"x-queue-mode\": \"lazy\" 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中\n   \"x-queue-master-locator\"\n\n### fanout代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:35 PM\n */\n@Configuration\npublic class FanoutConfig {\n\n    // 声明一个队列，后面有很多属性\n    @Bean\n    public Queue fanoutQueue1(){\n        return new Queue(\"fanout.queue1\");\n    }\n\n    @Bean\n    public Queue fanoutQueue2(){\n        return new Queue(\"fanout.queue2\");\n    }\n\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange(\"fanout_exchange\");\n    }\n\n    @Bean\n    public Binding fanoutBinding1(){\n        return BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());\n    }\n\n    @Bean\n    public Binding fanoutBinding2(){\n        return BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());\n    }\n\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:40 PM\n */\n@Component\n@Slf4j\npublic class FanoutConsumer {\n\n    @RabbitListener(queues = \"fanout.queue1\")\n    @RabbitHandler\n    public void fanoutConsumer1(String msg){\n        log.info(\"1fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n\n    @RabbitListener(queues = \"fanout.queue2\")\n    @RabbitHandler\n    public void fanoutConsumer2(String msg){\n        log.info(\"2fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class FanoutProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * fanout类型\n     * @param msg 消息内容\n     * @return 消息内容\n     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey\n     * 只是routingKey可以任意指定\n     */\n    @RequestMapping(\"/fanout/{msg}\")\n    public String fanoutProducer(@PathVariable(\"msg\") String msg){\n        log.info(\"fanout生产消息 msg:{}\", msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息\n        template.convertAndSend(\"fanout_exchange\",\"\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/fanout/测试消息 ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。\n\n### direct代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.direct;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author liuyi\n * @date 2018/11/29 1:40 AM\n */\n@Configuration\npublic class DirectConfig {\n\n    /**\n     * 定义两个队列\n     * @return\n     */\n    @Bean\n    public Queue directQueue1() {\n        return new Queue(\"direct.queue1\",true);\n    }\n\n    @Bean\n    public Queue directQueue2() {\n        return new Queue(\"direct.queue2\", true);\n    }\n\n    @Bean\n    public Queue directQueue3() {\n        Map<String, Object> map = new HashMap<>(16);\n        return new Queue(\"direct.queue3\",true,true, true, map);\n    }\n\n\n    /**\n     * 定义 exchange\n     * @return\n     */\n    @Bean\n    public DirectExchange directExchange() {\n        return new DirectExchange(\"direct_exchange\",true,true);\n    }\n\n    /**\n     * 队列1 绑定 exchange 并且设置routingKey为direct.1\n     * @return\n     */\n    @Bean\n    public Binding directBinding1(){\n        return BindingBuilder.bind(directQueue1()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n\n    /**\n     * 队列2 绑定 exchange 并且设置routingKey为direct.2\n     * @return\n     */\n    @Bean\n    public Binding directBinding2(){\n        return BindingBuilder.bind(directQueue2()).to(directExchange()).with(\"direct.routing.key2\");\n    }\n\n    @Bean\n    public Binding directBinding3(){\n        return BindingBuilder.bind(directQueue3()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DirectProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * direct类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/direct/queue1/{msg}\")\n    public String directProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"direct_exchange\", \"direct.routing.key1\", msg);\n        return msg;\n    }\n\n    @RequestMapping(\"/direct/queue2/{msg}\")\n    public String directProducerTwo(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"mq-direct_exchange\", \"direct.routing.key2\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/direct/queue1/测试消息1 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可\n\n### topic代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.topic;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/11/29 8:42 AM\n */\n@Configuration\npublic class TopicConfig {\n\n    /**\n     * 创建队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue topicQueue1() {\n        return new Queue(\"topic.queue1\", true);\n    }\n\n    @Bean\n    public Queue topicQueue2() {\n        return new Queue(\"topic.queue2\", true);\n    }\n\n    /**\n     * 创建交换器\n     */\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(\"topic_exchange\");\n    }\n\n    /**\n     * 绑定\n     */\n    @Bean\n    public Binding topicBinding1() {\n        return BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(\"*.jiafly.*\");\n    }\n\n    @Bean\n    public Binding topicBinding2() {\n        return BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(\"com.jiafly.*\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class TopicProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * topic类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/topic/{msg}\")\n    public String topicProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"topic:生产消息:\" + msg);\n        template.convertAndSend(\"topic_exchange\", \"com.jiafly.test\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/topic/测试消息 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示\n\n\n## 延时队列\n### 延时队列能做什么\n- 订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。\n- 短信通知：下单成功后 60s 之后给用户发送短信通知。\n- 失败重试：业务操作失败后，间隔一定的时间进行失败重试\n\n这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。\n\n在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。\n![延时队列](/image/rabbit/delay-mq.jpg)\n### 死信交换器DLX(Dead-Letter-Exchange)\nDLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。\n\nRouter: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.\n\n具体代码实现:\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\n\n/**\n * @author liuyi\n * @date 2018/12/2 12:44 AM\n */\n@Configuration\npublic class DelayConfig {\n\n    /**\n     * 定义一个交换机\n     *\n     * @return\n     */\n    @Bean\n    public DirectExchange delayExchange() {\n        return new DirectExchange(\"delay_exchange\", true, false);\n    }\n\n    /**\n     * 转发队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue routerQueue() {\n        return new Queue(\"router.queue\", true, false, false);\n    }\n\n    /**\n     * 转发队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding routerBinding() {\n        return BindingBuilder.bind(routerQueue()).to(delayExchange()).with(\"router.routing.key\");\n    }\n\n\n    /**\n     * 死信队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue deadLetterQueue() {\n        HashMap<String, Object> arguments = new HashMap(16);\n        arguments.put(\"x-dead-letter-exchange\", \"delay_exchange\");\n        arguments.put(\"x-dead-letter-routing-key\", \"router.routing.key\");\n        return new Queue(\"dead.letter.queue\", true, false, false, arguments);\n    }\n\n\n    /**\n     * 死信队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding deadLetterBinding() {\n        return BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(\"dead.letter.routing.key\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/3 6:13 PM\n */\n@Component\n@Slf4j\npublic class DelayConsumer {\n\n    @RabbitListener(queues = \"router.queue\")\n    @RabbitHandler\n    public void delayConsumer(String msg) {\n        log.info(\"delay.queue1接收消息:{}\", msg);\n    }\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.amqp.support.converter.AbstractJavaTypeMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/12/3 7:17 PM\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DelayProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * 延迟队列\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/delay/{msg}\")\n    public String delayProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"delay:生产消息:\" + msg);\n        template.convertAndSend(\"delay_exchange\", \"dead.letter.routing.key\", msg, message -> {\n            message.getMessageProperties().setExpiration(30 * 1000 + \"\");\n            return message;\n        });\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/delay/测试消息 ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。\n\n\n## 消息的持久化\n为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。\n创建时候的参数:\n- durable \n是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 \n- execulusive \n表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable \n- autoDelete \n当没有生成者/消费者使用此队列时，此队列会被自动删除。 \n(即当最后一个消费者退订后即被删除)\n\n\n设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。\n\n\n## 消息的确认与拒绝\n消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：\n- 自动确认模式:\n当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。\n\n- 显式确认模式:\n消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息\n\n如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。 \nRabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.","source":"temp/RabbitMQ.md","raw":"\n---\ntitle: RabbitMQ实战\ndate: 2018-11-27 20:31:16\ntags: [rabbitMQ,消息队列]\ncategories: [消息队列]\n---\n# 消息中间件\n## 什么是消息中间\n消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、\nJSON 等，也可以很复杂，比如内嵌对象。\n\n消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。\n\n消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点\n(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。\n\n目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。\n\n## 消息中间件的作用\n消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消\n息中间件的作用可以概括如下。\n### 解耦\n在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。\n### 冗余〈存储)\n有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。\n### 扩展性\n因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。\n### 削峰\n在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。\n### 可恢复性\n当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。\n### 顺序保证\n在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。\n### 缓冲\n在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。\n### 异步通信\n在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。\n\n# RabbitMQ入门\n## RabbitMQ介绍\nRabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息\n队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。\n\nRabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。\n\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\n## RabbitMQ安装\n- 使用docker安装(3-management版本自带管理后台)\n```bash\n$ docker pull rabbitmq:3-management \n```\n- 启动rabbitMQ并且启动管理后台\n```bash\n$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management\n\n$ docker start rabbitmq\n```\n- 查看管理后台\n在浏览器打开 http://localhost:15672/ 输入用户名:admin 密码:admin 可进入管理后台\n\n\n## 相关概念介绍\n### 生产者和消费者\n- Producer:生产者，就是投递消息的一方。\n生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。\n\n- Consumer:消费者，就是接收消息的一方。\n消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。\n\n- Broker:消息中间件的服务节点。\n对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。\n\nRabbitMQ运转流程\n![RabbitMQ运转流程](/image/rabbit/mq-yunzhuanliucheng.jpg)\n\n### 交换器Exchange，路由RoutingKey，绑定Binding\n- Exchange:交换器\n![交换器](/image/rabbit/mq-exchange.jpg)\nMQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。\nRabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。\n\n- RoutingKey:路由键\n生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。\n\n- Binding:绑定\nRabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:\n![绑定](/image/rabbit/mq-banding.jpg)\n\n### 交换器类型\nRabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提\n到另外两种类型:System和自定义，这里就不详细介绍了。\n#### fanout\n就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：\n![fanout](/image/rabbit/mq-fanout.jpg)\n#### direct(默认的交换器类型)\ndirect类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：\n![direct](/image/rabbit/mq-direct.jpg)\n#### topic\n上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:\n- RoutingKey为一个点号\".\"分隔的字符串(被点号\".\"分隔开的每一段独立的字符串称为一个单词)，如\"com.rabbitmq.client\"，\"java.util.concurrent\",\"com.hidden.client\"等\n- BindingKey也是点号\".\"分隔\n- BindingKey中可以存在两种特殊字符串\"星号\"和\"#\"，用于做模糊匹配，其中\"星号\"用于匹配一个单词，”#\"用于匹配多规格单词(可以是零个)。\n如下图：\n![topic](/image/rabbit/mq-topic.jpg)\n思考: \n1.路由建 \"com.rabbitmq.client\"会路由到哪一个队列？\n2.路由建 \"com.hidden.client\"会路由到哪一个队列？\n3.路由建 \"com.hidden.demo\"会路由到哪一个队列？\n4.路由建 \"java.util.concurrent\"会路由到哪一个队列？\n5.路由建 \"java.rabbitmq.demo\"会路由到哪一个队列？\n\n#### headers(不常用)\nheaders类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中\n的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。\n\n\n## 交换器类型详解\n### \n新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer\npom.xml\n```POM\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n  </dependency>\n```\nrabbit-producer/application.properties\n```\nserver.port=1180\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\nrabbit-producer/application.properties\n```\nserver.port=1181\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\n项目创建完成\n\n### 声明一个队列各个参数的意义\nname: 队列的名称 字符串\ndurable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库\nexclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。\nautoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除\narguments: 队列中的消息什么时候会自动被删除？ 是一个Map<String, Object>，他有如下参数\n   \"x-message-ttl\": 1000  设置队列中的所有消息的生存周期\n   \"x-expires\": 1000  当队列在指定的时间没有被访问就会被删除\n   \"x-max-length\": 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉\n   \"x-max-length-bytes\":  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小\n   \"x-dead-letter-exchange\": \"\" 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉\n   \"x-dead-letter-routing-key\": \"\"  将删除的消息推送到指定交换机的指定路由键的队列中去\n   \"x-max-priority\":  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费\n   \"x-queue-mode\": \"lazy\" 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中\n   \"x-queue-master-locator\"\n\n### fanout代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:35 PM\n */\n@Configuration\npublic class FanoutConfig {\n\n    // 声明一个队列，后面有很多属性\n    @Bean\n    public Queue fanoutQueue1(){\n        return new Queue(\"fanout.queue1\");\n    }\n\n    @Bean\n    public Queue fanoutQueue2(){\n        return new Queue(\"fanout.queue2\");\n    }\n\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange(\"fanout_exchange\");\n    }\n\n    @Bean\n    public Binding fanoutBinding1(){\n        return BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());\n    }\n\n    @Bean\n    public Binding fanoutBinding2(){\n        return BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());\n    }\n\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:40 PM\n */\n@Component\n@Slf4j\npublic class FanoutConsumer {\n\n    @RabbitListener(queues = \"fanout.queue1\")\n    @RabbitHandler\n    public void fanoutConsumer1(String msg){\n        log.info(\"1fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n\n    @RabbitListener(queues = \"fanout.queue2\")\n    @RabbitHandler\n    public void fanoutConsumer2(String msg){\n        log.info(\"2fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class FanoutProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * fanout类型\n     * @param msg 消息内容\n     * @return 消息内容\n     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey\n     * 只是routingKey可以任意指定\n     */\n    @RequestMapping(\"/fanout/{msg}\")\n    public String fanoutProducer(@PathVariable(\"msg\") String msg){\n        log.info(\"fanout生产消息 msg:{}\", msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息\n        template.convertAndSend(\"fanout_exchange\",\"\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/fanout/测试消息 ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。\n\n### direct代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.direct;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author liuyi\n * @date 2018/11/29 1:40 AM\n */\n@Configuration\npublic class DirectConfig {\n\n    /**\n     * 定义两个队列\n     * @return\n     */\n    @Bean\n    public Queue directQueue1() {\n        return new Queue(\"direct.queue1\",true);\n    }\n\n    @Bean\n    public Queue directQueue2() {\n        return new Queue(\"direct.queue2\", true);\n    }\n\n    @Bean\n    public Queue directQueue3() {\n        Map<String, Object> map = new HashMap<>(16);\n        return new Queue(\"direct.queue3\",true,true, true, map);\n    }\n\n\n    /**\n     * 定义 exchange\n     * @return\n     */\n    @Bean\n    public DirectExchange directExchange() {\n        return new DirectExchange(\"direct_exchange\",true,true);\n    }\n\n    /**\n     * 队列1 绑定 exchange 并且设置routingKey为direct.1\n     * @return\n     */\n    @Bean\n    public Binding directBinding1(){\n        return BindingBuilder.bind(directQueue1()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n\n    /**\n     * 队列2 绑定 exchange 并且设置routingKey为direct.2\n     * @return\n     */\n    @Bean\n    public Binding directBinding2(){\n        return BindingBuilder.bind(directQueue2()).to(directExchange()).with(\"direct.routing.key2\");\n    }\n\n    @Bean\n    public Binding directBinding3(){\n        return BindingBuilder.bind(directQueue3()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DirectProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * direct类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/direct/queue1/{msg}\")\n    public String directProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"direct_exchange\", \"direct.routing.key1\", msg);\n        return msg;\n    }\n\n    @RequestMapping(\"/direct/queue2/{msg}\")\n    public String directProducerTwo(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"mq-direct_exchange\", \"direct.routing.key2\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/direct/queue1/测试消息1 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可\n\n### topic代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.topic;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/11/29 8:42 AM\n */\n@Configuration\npublic class TopicConfig {\n\n    /**\n     * 创建队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue topicQueue1() {\n        return new Queue(\"topic.queue1\", true);\n    }\n\n    @Bean\n    public Queue topicQueue2() {\n        return new Queue(\"topic.queue2\", true);\n    }\n\n    /**\n     * 创建交换器\n     */\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(\"topic_exchange\");\n    }\n\n    /**\n     * 绑定\n     */\n    @Bean\n    public Binding topicBinding1() {\n        return BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(\"*.jiafly.*\");\n    }\n\n    @Bean\n    public Binding topicBinding2() {\n        return BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(\"com.jiafly.*\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class TopicProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * topic类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/topic/{msg}\")\n    public String topicProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"topic:生产消息:\" + msg);\n        template.convertAndSend(\"topic_exchange\", \"com.jiafly.test\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/topic/测试消息 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示\n\n\n## 延时队列\n### 延时队列能做什么\n- 订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。\n- 短信通知：下单成功后 60s 之后给用户发送短信通知。\n- 失败重试：业务操作失败后，间隔一定的时间进行失败重试\n\n这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。\n\n在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。\n![延时队列](/image/rabbit/delay-mq.jpg)\n### 死信交换器DLX(Dead-Letter-Exchange)\nDLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。\n\nRouter: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.\n\n具体代码实现:\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\n\n/**\n * @author liuyi\n * @date 2018/12/2 12:44 AM\n */\n@Configuration\npublic class DelayConfig {\n\n    /**\n     * 定义一个交换机\n     *\n     * @return\n     */\n    @Bean\n    public DirectExchange delayExchange() {\n        return new DirectExchange(\"delay_exchange\", true, false);\n    }\n\n    /**\n     * 转发队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue routerQueue() {\n        return new Queue(\"router.queue\", true, false, false);\n    }\n\n    /**\n     * 转发队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding routerBinding() {\n        return BindingBuilder.bind(routerQueue()).to(delayExchange()).with(\"router.routing.key\");\n    }\n\n\n    /**\n     * 死信队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue deadLetterQueue() {\n        HashMap<String, Object> arguments = new HashMap(16);\n        arguments.put(\"x-dead-letter-exchange\", \"delay_exchange\");\n        arguments.put(\"x-dead-letter-routing-key\", \"router.routing.key\");\n        return new Queue(\"dead.letter.queue\", true, false, false, arguments);\n    }\n\n\n    /**\n     * 死信队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding deadLetterBinding() {\n        return BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(\"dead.letter.routing.key\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/3 6:13 PM\n */\n@Component\n@Slf4j\npublic class DelayConsumer {\n\n    @RabbitListener(queues = \"router.queue\")\n    @RabbitHandler\n    public void delayConsumer(String msg) {\n        log.info(\"delay.queue1接收消息:{}\", msg);\n    }\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.amqp.support.converter.AbstractJavaTypeMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/12/3 7:17 PM\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DelayProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * 延迟队列\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/delay/{msg}\")\n    public String delayProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"delay:生产消息:\" + msg);\n        template.convertAndSend(\"delay_exchange\", \"dead.letter.routing.key\", msg, message -> {\n            message.getMessageProperties().setExpiration(30 * 1000 + \"\");\n            return message;\n        });\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/delay/测试消息 ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。\n\n\n## 消息的持久化\n为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。\n创建时候的参数:\n- durable \n是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 \n- execulusive \n表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable \n- autoDelete \n当没有生成者/消费者使用此队列时，此队列会被自动删除。 \n(即当最后一个消费者退订后即被删除)\n\n\n设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。\n\n\n## 消息的确认与拒绝\n消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：\n- 自动确认模式:\n当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。\n\n- 显式确认模式:\n消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息\n\n如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。 \nRabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.","updated":"2019-03-05T15:46:06.000Z","path":"temp/RabbitMQ.html","comments":1,"layout":"page","_id":"cju724oaj0004ixs6739mev0e","content":"<h1 id=\"消息中间件\"><a href=\"#消息中间件\" class=\"headerlink\" title=\"消息中间件\"></a>消息中间件</h1><h2 id=\"什么是消息中间\"><a href=\"#什么是消息中间\" class=\"headerlink\" title=\"什么是消息中间\"></a>什么是消息中间</h2><p>消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、<br>JSON 等，也可以很复杂，比如内嵌对象。</p>\n<p>消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p>\n<p>消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点<br>(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。</p>\n<p>目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。</p>\n<h2 id=\"消息中间件的作用\"><a href=\"#消息中间件的作用\" class=\"headerlink\" title=\"消息中间件的作用\"></a>消息中间件的作用</h2><p>消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消<br>息中间件的作用可以概括如下。</p>\n<h3 id=\"解耦\"><a href=\"#解耦\" class=\"headerlink\" title=\"解耦\"></a>解耦</h3><p>在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。</p>\n<h3 id=\"冗余〈存储\"><a href=\"#冗余〈存储\" class=\"headerlink\" title=\"冗余〈存储)\"></a>冗余〈存储)</h3><p>有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。</p>\n<h3 id=\"扩展性\"><a href=\"#扩展性\" class=\"headerlink\" title=\"扩展性\"></a>扩展性</h3><p>因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</p>\n<h3 id=\"削峰\"><a href=\"#削峰\" class=\"headerlink\" title=\"削峰\"></a>削峰</h3><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。</p>\n<h3 id=\"可恢复性\"><a href=\"#可恢复性\" class=\"headerlink\" title=\"可恢复性\"></a>可恢复性</h3><p>当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。</p>\n<h3 id=\"顺序保证\"><a href=\"#顺序保证\" class=\"headerlink\" title=\"顺序保证\"></a>顺序保证</h3><p>在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</p>\n<h3 id=\"缓冲\"><a href=\"#缓冲\" class=\"headerlink\" title=\"缓冲\"></a>缓冲</h3><p>在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。</p>\n<h3 id=\"异步通信\"><a href=\"#异步通信\" class=\"headerlink\" title=\"异步通信\"></a>异步通信</h3><p>在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。</p>\n<h1 id=\"RabbitMQ入门\"><a href=\"#RabbitMQ入门\" class=\"headerlink\" title=\"RabbitMQ入门\"></a>RabbitMQ入门</h1><h2 id=\"RabbitMQ介绍\"><a href=\"#RabbitMQ介绍\" class=\"headerlink\" title=\"RabbitMQ介绍\"></a>RabbitMQ介绍</h2><p>RabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息<br>队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。</p>\n<p>RabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p>\n<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n<h2 id=\"RabbitMQ安装\"><a href=\"#RabbitMQ安装\" class=\"headerlink\" title=\"RabbitMQ安装\"></a>RabbitMQ安装</h2><ul>\n<li><p>使用docker安装(3-management版本自带管理后台)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动rabbitMQ并且启动管理后台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start rabbitmq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看管理后台<br>在浏览器打开 <a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 输入用户名:admin 密码:admin 可进入管理后台</p>\n</li>\n</ul>\n<h2 id=\"相关概念介绍\"><a href=\"#相关概念介绍\" class=\"headerlink\" title=\"相关概念介绍\"></a>相关概念介绍</h2><h3 id=\"生产者和消费者\"><a href=\"#生产者和消费者\" class=\"headerlink\" title=\"生产者和消费者\"></a>生产者和消费者</h3><ul>\n<li><p>Producer:生产者，就是投递消息的一方。<br>生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。</p>\n</li>\n<li><p>Consumer:消费者，就是接收消息的一方。<br>消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。</p>\n</li>\n<li><p>Broker:消息中间件的服务节点。<br>对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。</p>\n</li>\n</ul>\n<p>RabbitMQ运转流程<br><img src=\"/image/rabbit/mq-yunzhuanliucheng.jpg\" alt=\"RabbitMQ运转流程\"></p>\n<h3 id=\"交换器Exchange，路由RoutingKey，绑定Binding\"><a href=\"#交换器Exchange，路由RoutingKey，绑定Binding\" class=\"headerlink\" title=\"交换器Exchange，路由RoutingKey，绑定Binding\"></a>交换器Exchange，路由RoutingKey，绑定Binding</h3><ul>\n<li><p>Exchange:交换器<br><img src=\"/image/rabbit/mq-exchange.jpg\" alt=\"交换器\"><br>MQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。<br>RabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。</p>\n</li>\n<li><p>RoutingKey:路由键<br>生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。</p>\n</li>\n<li><p>Binding:绑定<br>RabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:<br><img src=\"/image/rabbit/mq-banding.jpg\" alt=\"绑定\"></p>\n</li>\n</ul>\n<h3 id=\"交换器类型\"><a href=\"#交换器类型\" class=\"headerlink\" title=\"交换器类型\"></a>交换器类型</h3><p>RabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提<br>到另外两种类型:System和自定义，这里就不详细介绍了。</p>\n<h4 id=\"fanout\"><a href=\"#fanout\" class=\"headerlink\" title=\"fanout\"></a>fanout</h4><p>就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：<br><img src=\"/image/rabbit/mq-fanout.jpg\" alt=\"fanout\"></p>\n<h4 id=\"direct-默认的交换器类型\"><a href=\"#direct-默认的交换器类型\" class=\"headerlink\" title=\"direct(默认的交换器类型)\"></a>direct(默认的交换器类型)</h4><p>direct类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：<br><img src=\"/image/rabbit/mq-direct.jpg\" alt=\"direct\"></p>\n<h4 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h4><p>上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:</p>\n<ul>\n<li>RoutingKey为一个点号”.”分隔的字符串(被点号”.”分隔开的每一段独立的字符串称为一个单词)，如”com.rabbitmq.client”，”java.util.concurrent”,”com.hidden.client”等</li>\n<li>BindingKey也是点号”.”分隔</li>\n<li>BindingKey中可以存在两种特殊字符串”星号”和”#”，用于做模糊匹配，其中”星号”用于匹配一个单词，”#”用于匹配多规格单词(可以是零个)。<br>如下图：<br><img src=\"/image/rabbit/mq-topic.jpg\" alt=\"topic\"><br>思考:<br>1.路由建 “com.rabbitmq.client”会路由到哪一个队列？<br>2.路由建 “com.hidden.client”会路由到哪一个队列？<br>3.路由建 “com.hidden.demo”会路由到哪一个队列？<br>4.路由建 “java.util.concurrent”会路由到哪一个队列？<br>5.路由建 “java.rabbitmq.demo”会路由到哪一个队列？</li>\n</ul>\n<h4 id=\"headers-不常用\"><a href=\"#headers-不常用\" class=\"headerlink\" title=\"headers(不常用)\"></a>headers(不常用)</h4><p>headers类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中<br>的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。</p>\n<h2 id=\"交换器类型详解\"><a href=\"#交换器类型详解\" class=\"headerlink\" title=\"交换器类型详解\"></a>交换器类型详解</h2><p>###<br>新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer<br>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1180</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1181</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>项目创建完成</p>\n<h3 id=\"声明一个队列各个参数的意义\"><a href=\"#声明一个队列各个参数的意义\" class=\"headerlink\" title=\"声明一个队列各个参数的意义\"></a>声明一个队列各个参数的意义</h3><p>name: 队列的名称 字符串<br>durable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库<br>exclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。<br>autoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除<br>arguments: 队列中的消息什么时候会自动被删除？ 是一个Map&lt;String, Object&gt;，他有如下参数<br>   “x-message-ttl”: 1000  设置队列中的所有消息的生存周期<br>   “x-expires”: 1000  当队列在指定的时间没有被访问就会被删除<br>   “x-max-length”: 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉<br>   “x-max-length-bytes”:  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小<br>   “x-dead-letter-exchange”: “” 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉<br>   “x-dead-letter-routing-key”: “”  将删除的消息推送到指定交换机的指定路由键的队列中去<br>   “x-max-priority”:  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费<br>   “x-queue-mode”: “lazy” 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中<br>   “x-queue-master-locator”</p>\n<h3 id=\"fanout代码实现\"><a href=\"#fanout代码实现\" class=\"headerlink\" title=\"fanout代码实现\"></a>fanout代码实现</h3><h4 id=\"在消费者项目中添加一个配置类\"><a href=\"#在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:35 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 声明一个队列，后面有很多属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"fanout_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类\"><a href=\"#在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:40 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue1\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"1fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue2\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"2fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller\"><a href=\"#在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fanout类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey</span></span><br><span class=\"line\"><span class=\"comment\">     * 只是routingKey可以任意指定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/fanout/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fanoutProducer</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg)</span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"fanout生产消息 msg:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"fanout_exchange\"</span>,<span class=\"string\">\"\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/fanout/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/fanout/测试消息</a> ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。</p>\n<h3 id=\"direct代码实现\"><a href=\"#direct代码实现\" class=\"headerlink\" title=\"direct代码实现\"></a>direct代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-1\"><a href=\"#在消费者项目中添加一个配置类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.direct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 1:40 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义两个队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue1\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue3\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义 exchange</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"direct_exchange\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列1 绑定 exchange 并且设置routingKey为direct.1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列2 绑定 exchange 并且设置routingKey为direct.2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue3()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-1\"><a href=\"#在消费者项目中添加一个消息监听类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-1\"><a href=\"#在生产者项目中添加一个消息发送controller-1\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * direct类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue1/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key1\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue2/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerTwo</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"mq-direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key2\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/direct/queue1/测试消息1\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/direct/queue1/测试消息1</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可</p>\n<h3 id=\"topic代码实现\"><a href=\"#topic代码实现\" class=\"headerlink\" title=\"topic代码实现\"></a>topic代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-2\"><a href=\"#在消费者项目中添加一个配置类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 8:42 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue1\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"topic_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class=\"string\">\"*.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class=\"string\">\"com.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-2\"><a href=\"#在消费者项目中添加一个消息监听类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-2\"><a href=\"#在生产者项目中添加一个消息发送controller-2\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * topic类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/topic/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">topicProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"topic:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"topic_exchange\"</span>, <span class=\"string\">\"com.jiafly.test\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-2\"><a href=\"#测试-2\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/topic/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/topic/测试消息</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示</p>\n<h2 id=\"延时队列\"><a href=\"#延时队列\" class=\"headerlink\" title=\"延时队列\"></a>延时队列</h2><h3 id=\"延时队列能做什么\"><a href=\"#延时队列能做什么\" class=\"headerlink\" title=\"延时队列能做什么\"></a>延时队列能做什么</h3><ul>\n<li>订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。</li>\n<li>短信通知：下单成功后 60s 之后给用户发送短信通知。</li>\n<li>失败重试：业务操作失败后，间隔一定的时间进行失败重试</li>\n</ul>\n<p>这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。</p>\n<p>在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。<br><img src=\"/image/rabbit/delay-mq.jpg\" alt=\"延时队列\"></p>\n<h3 id=\"死信交换器DLX-Dead-Letter-Exchange\"><a href=\"#死信交换器DLX-Dead-Letter-Exchange\" class=\"headerlink\" title=\"死信交换器DLX(Dead-Letter-Exchange)\"></a>死信交换器DLX(Dead-Letter-Exchange)</h3><p>DLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。</p>\n<p>Router: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.</p>\n<p>具体代码实现:</p>\n<h4 id=\"在消费者项目中添加一个配置类-3\"><a href=\"#在消费者项目中添加一个配置类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/2 12:44 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">delayExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">routerQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"router.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">routerBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(routerQueue()).to(delayExchange()).with(<span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">deadLetterQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; arguments = <span class=\"keyword\">new</span> HashMap(<span class=\"number\">16</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>, <span class=\"string\">\"delay_exchange\"</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>, <span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dead.letter.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">deadLetterBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(<span class=\"string\">\"dead.letter.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-3\"><a href=\"#在消费者项目中添加一个消息监听类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 6:13 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"router.queue\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delayConsumer</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay.queue1接收消息:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-3\"><a href=\"#在生产者项目中添加一个消息发送controller-3\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.support.converter.AbstractJavaTypeMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 7:17 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 延迟队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/delay/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delayProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"string\">\"dead.letter.routing.key\"</span>, msg, message -&gt; &#123;</span><br><span class=\"line\">            message.getMessageProperties().setExpiration(<span class=\"number\">30</span> * <span class=\"number\">1000</span> + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-3\"><a href=\"#测试-3\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/delay/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/delay/测试消息</a> ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。</p>\n<h2 id=\"消息的持久化\"><a href=\"#消息的持久化\" class=\"headerlink\" title=\"消息的持久化\"></a>消息的持久化</h2><p>为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。<br>创建时候的参数:</p>\n<ul>\n<li>durable<br>是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 </li>\n<li>execulusive<br>表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable </li>\n<li>autoDelete<br>当没有生成者/消费者使用此队列时，此队列会被自动删除。<br>(即当最后一个消费者退订后即被删除)</li>\n</ul>\n<p>设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。</p>\n<h2 id=\"消息的确认与拒绝\"><a href=\"#消息的确认与拒绝\" class=\"headerlink\" title=\"消息的确认与拒绝\"></a>消息的确认与拒绝</h2><p>消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：</p>\n<ul>\n<li><p>自动确认模式:<br>当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。</p>\n</li>\n<li><p>显式确认模式:<br>消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息</p>\n</li>\n</ul>\n<p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。<br>RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"消息中间件\"><a href=\"#消息中间件\" class=\"headerlink\" title=\"消息中间件\"></a>消息中间件</h1><h2 id=\"什么是消息中间\"><a href=\"#什么是消息中间\" class=\"headerlink\" title=\"什么是消息中间\"></a>什么是消息中间</h2><p>消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、<br>JSON 等，也可以很复杂，比如内嵌对象。</p>\n<p>消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p>\n<p>消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点<br>(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。</p>\n<p>目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。</p>\n<h2 id=\"消息中间件的作用\"><a href=\"#消息中间件的作用\" class=\"headerlink\" title=\"消息中间件的作用\"></a>消息中间件的作用</h2><p>消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消<br>息中间件的作用可以概括如下。</p>\n<h3 id=\"解耦\"><a href=\"#解耦\" class=\"headerlink\" title=\"解耦\"></a>解耦</h3><p>在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。</p>\n<h3 id=\"冗余〈存储\"><a href=\"#冗余〈存储\" class=\"headerlink\" title=\"冗余〈存储)\"></a>冗余〈存储)</h3><p>有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。</p>\n<h3 id=\"扩展性\"><a href=\"#扩展性\" class=\"headerlink\" title=\"扩展性\"></a>扩展性</h3><p>因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</p>\n<h3 id=\"削峰\"><a href=\"#削峰\" class=\"headerlink\" title=\"削峰\"></a>削峰</h3><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。</p>\n<h3 id=\"可恢复性\"><a href=\"#可恢复性\" class=\"headerlink\" title=\"可恢复性\"></a>可恢复性</h3><p>当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。</p>\n<h3 id=\"顺序保证\"><a href=\"#顺序保证\" class=\"headerlink\" title=\"顺序保证\"></a>顺序保证</h3><p>在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</p>\n<h3 id=\"缓冲\"><a href=\"#缓冲\" class=\"headerlink\" title=\"缓冲\"></a>缓冲</h3><p>在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。</p>\n<h3 id=\"异步通信\"><a href=\"#异步通信\" class=\"headerlink\" title=\"异步通信\"></a>异步通信</h3><p>在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。</p>\n<h1 id=\"RabbitMQ入门\"><a href=\"#RabbitMQ入门\" class=\"headerlink\" title=\"RabbitMQ入门\"></a>RabbitMQ入门</h1><h2 id=\"RabbitMQ介绍\"><a href=\"#RabbitMQ介绍\" class=\"headerlink\" title=\"RabbitMQ介绍\"></a>RabbitMQ介绍</h2><p>RabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息<br>队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。</p>\n<p>RabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p>\n<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n<h2 id=\"RabbitMQ安装\"><a href=\"#RabbitMQ安装\" class=\"headerlink\" title=\"RabbitMQ安装\"></a>RabbitMQ安装</h2><ul>\n<li><p>使用docker安装(3-management版本自带管理后台)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动rabbitMQ并且启动管理后台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start rabbitmq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看管理后台<br>在浏览器打开 <a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 输入用户名:admin 密码:admin 可进入管理后台</p>\n</li>\n</ul>\n<h2 id=\"相关概念介绍\"><a href=\"#相关概念介绍\" class=\"headerlink\" title=\"相关概念介绍\"></a>相关概念介绍</h2><h3 id=\"生产者和消费者\"><a href=\"#生产者和消费者\" class=\"headerlink\" title=\"生产者和消费者\"></a>生产者和消费者</h3><ul>\n<li><p>Producer:生产者，就是投递消息的一方。<br>生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。</p>\n</li>\n<li><p>Consumer:消费者，就是接收消息的一方。<br>消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。</p>\n</li>\n<li><p>Broker:消息中间件的服务节点。<br>对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。</p>\n</li>\n</ul>\n<p>RabbitMQ运转流程<br><img src=\"/image/rabbit/mq-yunzhuanliucheng.jpg\" alt=\"RabbitMQ运转流程\"></p>\n<h3 id=\"交换器Exchange，路由RoutingKey，绑定Binding\"><a href=\"#交换器Exchange，路由RoutingKey，绑定Binding\" class=\"headerlink\" title=\"交换器Exchange，路由RoutingKey，绑定Binding\"></a>交换器Exchange，路由RoutingKey，绑定Binding</h3><ul>\n<li><p>Exchange:交换器<br><img src=\"/image/rabbit/mq-exchange.jpg\" alt=\"交换器\"><br>MQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。<br>RabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。</p>\n</li>\n<li><p>RoutingKey:路由键<br>生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。</p>\n</li>\n<li><p>Binding:绑定<br>RabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:<br><img src=\"/image/rabbit/mq-banding.jpg\" alt=\"绑定\"></p>\n</li>\n</ul>\n<h3 id=\"交换器类型\"><a href=\"#交换器类型\" class=\"headerlink\" title=\"交换器类型\"></a>交换器类型</h3><p>RabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提<br>到另外两种类型:System和自定义，这里就不详细介绍了。</p>\n<h4 id=\"fanout\"><a href=\"#fanout\" class=\"headerlink\" title=\"fanout\"></a>fanout</h4><p>就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：<br><img src=\"/image/rabbit/mq-fanout.jpg\" alt=\"fanout\"></p>\n<h4 id=\"direct-默认的交换器类型\"><a href=\"#direct-默认的交换器类型\" class=\"headerlink\" title=\"direct(默认的交换器类型)\"></a>direct(默认的交换器类型)</h4><p>direct类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：<br><img src=\"/image/rabbit/mq-direct.jpg\" alt=\"direct\"></p>\n<h4 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h4><p>上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:</p>\n<ul>\n<li>RoutingKey为一个点号”.”分隔的字符串(被点号”.”分隔开的每一段独立的字符串称为一个单词)，如”com.rabbitmq.client”，”java.util.concurrent”,”com.hidden.client”等</li>\n<li>BindingKey也是点号”.”分隔</li>\n<li>BindingKey中可以存在两种特殊字符串”星号”和”#”，用于做模糊匹配，其中”星号”用于匹配一个单词，”#”用于匹配多规格单词(可以是零个)。<br>如下图：<br><img src=\"/image/rabbit/mq-topic.jpg\" alt=\"topic\"><br>思考:<br>1.路由建 “com.rabbitmq.client”会路由到哪一个队列？<br>2.路由建 “com.hidden.client”会路由到哪一个队列？<br>3.路由建 “com.hidden.demo”会路由到哪一个队列？<br>4.路由建 “java.util.concurrent”会路由到哪一个队列？<br>5.路由建 “java.rabbitmq.demo”会路由到哪一个队列？</li>\n</ul>\n<h4 id=\"headers-不常用\"><a href=\"#headers-不常用\" class=\"headerlink\" title=\"headers(不常用)\"></a>headers(不常用)</h4><p>headers类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中<br>的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。</p>\n<h2 id=\"交换器类型详解\"><a href=\"#交换器类型详解\" class=\"headerlink\" title=\"交换器类型详解\"></a>交换器类型详解</h2><p>###<br>新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer<br>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1180</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1181</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>项目创建完成</p>\n<h3 id=\"声明一个队列各个参数的意义\"><a href=\"#声明一个队列各个参数的意义\" class=\"headerlink\" title=\"声明一个队列各个参数的意义\"></a>声明一个队列各个参数的意义</h3><p>name: 队列的名称 字符串<br>durable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库<br>exclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。<br>autoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除<br>arguments: 队列中的消息什么时候会自动被删除？ 是一个Map&lt;String, Object&gt;，他有如下参数<br>   “x-message-ttl”: 1000  设置队列中的所有消息的生存周期<br>   “x-expires”: 1000  当队列在指定的时间没有被访问就会被删除<br>   “x-max-length”: 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉<br>   “x-max-length-bytes”:  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小<br>   “x-dead-letter-exchange”: “” 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉<br>   “x-dead-letter-routing-key”: “”  将删除的消息推送到指定交换机的指定路由键的队列中去<br>   “x-max-priority”:  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费<br>   “x-queue-mode”: “lazy” 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中<br>   “x-queue-master-locator”</p>\n<h3 id=\"fanout代码实现\"><a href=\"#fanout代码实现\" class=\"headerlink\" title=\"fanout代码实现\"></a>fanout代码实现</h3><h4 id=\"在消费者项目中添加一个配置类\"><a href=\"#在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:35 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 声明一个队列，后面有很多属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"fanout_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类\"><a href=\"#在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:40 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue1\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"1fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue2\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"2fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller\"><a href=\"#在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fanout类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey</span></span><br><span class=\"line\"><span class=\"comment\">     * 只是routingKey可以任意指定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/fanout/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fanoutProducer</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg)</span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"fanout生产消息 msg:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"fanout_exchange\"</span>,<span class=\"string\">\"\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/fanout/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/fanout/测试消息</a> ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。</p>\n<h3 id=\"direct代码实现\"><a href=\"#direct代码实现\" class=\"headerlink\" title=\"direct代码实现\"></a>direct代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-1\"><a href=\"#在消费者项目中添加一个配置类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.direct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 1:40 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义两个队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue1\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue3\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义 exchange</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"direct_exchange\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列1 绑定 exchange 并且设置routingKey为direct.1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列2 绑定 exchange 并且设置routingKey为direct.2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue3()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-1\"><a href=\"#在消费者项目中添加一个消息监听类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-1\"><a href=\"#在生产者项目中添加一个消息发送controller-1\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * direct类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue1/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key1\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue2/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerTwo</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"mq-direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key2\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/direct/queue1/测试消息1\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/direct/queue1/测试消息1</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可</p>\n<h3 id=\"topic代码实现\"><a href=\"#topic代码实现\" class=\"headerlink\" title=\"topic代码实现\"></a>topic代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-2\"><a href=\"#在消费者项目中添加一个配置类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 8:42 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue1\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"topic_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class=\"string\">\"*.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class=\"string\">\"com.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-2\"><a href=\"#在消费者项目中添加一个消息监听类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-2\"><a href=\"#在生产者项目中添加一个消息发送controller-2\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * topic类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/topic/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">topicProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"topic:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"topic_exchange\"</span>, <span class=\"string\">\"com.jiafly.test\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-2\"><a href=\"#测试-2\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/topic/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/topic/测试消息</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示</p>\n<h2 id=\"延时队列\"><a href=\"#延时队列\" class=\"headerlink\" title=\"延时队列\"></a>延时队列</h2><h3 id=\"延时队列能做什么\"><a href=\"#延时队列能做什么\" class=\"headerlink\" title=\"延时队列能做什么\"></a>延时队列能做什么</h3><ul>\n<li>订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。</li>\n<li>短信通知：下单成功后 60s 之后给用户发送短信通知。</li>\n<li>失败重试：业务操作失败后，间隔一定的时间进行失败重试</li>\n</ul>\n<p>这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。</p>\n<p>在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。<br><img src=\"/image/rabbit/delay-mq.jpg\" alt=\"延时队列\"></p>\n<h3 id=\"死信交换器DLX-Dead-Letter-Exchange\"><a href=\"#死信交换器DLX-Dead-Letter-Exchange\" class=\"headerlink\" title=\"死信交换器DLX(Dead-Letter-Exchange)\"></a>死信交换器DLX(Dead-Letter-Exchange)</h3><p>DLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。</p>\n<p>Router: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.</p>\n<p>具体代码实现:</p>\n<h4 id=\"在消费者项目中添加一个配置类-3\"><a href=\"#在消费者项目中添加一个配置类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/2 12:44 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">delayExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">routerQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"router.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">routerBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(routerQueue()).to(delayExchange()).with(<span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">deadLetterQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; arguments = <span class=\"keyword\">new</span> HashMap(<span class=\"number\">16</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>, <span class=\"string\">\"delay_exchange\"</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>, <span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dead.letter.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">deadLetterBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(<span class=\"string\">\"dead.letter.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-3\"><a href=\"#在消费者项目中添加一个消息监听类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 6:13 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"router.queue\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delayConsumer</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay.queue1接收消息:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-3\"><a href=\"#在生产者项目中添加一个消息发送controller-3\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.support.converter.AbstractJavaTypeMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 7:17 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 延迟队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/delay/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delayProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"string\">\"dead.letter.routing.key\"</span>, msg, message -&gt; &#123;</span><br><span class=\"line\">            message.getMessageProperties().setExpiration(<span class=\"number\">30</span> * <span class=\"number\">1000</span> + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-3\"><a href=\"#测试-3\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/delay/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/delay/测试消息</a> ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。</p>\n<h2 id=\"消息的持久化\"><a href=\"#消息的持久化\" class=\"headerlink\" title=\"消息的持久化\"></a>消息的持久化</h2><p>为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。<br>创建时候的参数:</p>\n<ul>\n<li>durable<br>是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 </li>\n<li>execulusive<br>表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable </li>\n<li>autoDelete<br>当没有生成者/消费者使用此队列时，此队列会被自动删除。<br>(即当最后一个消费者退订后即被删除)</li>\n</ul>\n<p>设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。</p>\n<h2 id=\"消息的确认与拒绝\"><a href=\"#消息的确认与拒绝\" class=\"headerlink\" title=\"消息的确认与拒绝\"></a>消息的确认与拒绝</h2><p>消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：</p>\n<ul>\n<li><p>自动确认模式:<br>当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。</p>\n</li>\n<li><p>显式确认模式:<br>消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息</p>\n</li>\n</ul>\n<p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。<br>RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.</p>\n"}],"Post":[{"title":"Nginx中间件","date":"2018-03-31T17:23:16.000Z","_content":"# 1. 前言\n## 1.1 Nginx简述\nNginx是一个开源且高性能、可靠的HTTP中间件、代理服务。\n\n## 1.2 常见的HTTP服务\n- HTTPD - Apache基金会\n- IIS - 微软\n- GWS - Google Web Server\n从07年之后Nginx的市场占有率慢慢增加了。下面我将详细的介绍下为什么越来越多的企业选择使用Nginx。\n<!-- more -->\n## 1.3 为什么选择Nginx\n我们为什么使用Nginx，肯定是因为它相比于其他的产品具有它独特的优势，下面呢我们就来谈谈具体的原因。\n- 原因一：IO多路复用epoll\n首先我们来了解下什么是io复用，其实io复用解决的就是一个并发性的问题，比如我们都去请求某宝购物，这时候对于服务端后台而言就会产生多个请求，处理多个并发请求，对于中间件就要产生多个IO流对系统进行读写\n- 原因二：\n\n","source":"_posts/nginx/Nginx中间件.md","raw":"---\ntitle: Nginx中间件\ndate: 2018-04-01 01:23:16\ntags: \n    - nginx\ncategories: \n    - nginx\n---\n# 1. 前言\n## 1.1 Nginx简述\nNginx是一个开源且高性能、可靠的HTTP中间件、代理服务。\n\n## 1.2 常见的HTTP服务\n- HTTPD - Apache基金会\n- IIS - 微软\n- GWS - Google Web Server\n从07年之后Nginx的市场占有率慢慢增加了。下面我将详细的介绍下为什么越来越多的企业选择使用Nginx。\n<!-- more -->\n## 1.3 为什么选择Nginx\n我们为什么使用Nginx，肯定是因为它相比于其他的产品具有它独特的优势，下面呢我们就来谈谈具体的原因。\n- 原因一：IO多路复用epoll\n首先我们来了解下什么是io复用，其实io复用解决的就是一个并发性的问题，比如我们都去请求某宝购物，这时候对于服务端后台而言就会产生多个请求，处理多个并发请求，对于中间件就要产生多个IO流对系统进行读写\n- 原因二：\n\n","slug":"nginx/Nginx中间件","published":1,"updated":"2019-04-07T15:02:57.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju724og40005ixs65j219pq2","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><h2 id=\"1-1-Nginx简述\"><a href=\"#1-1-Nginx简述\" class=\"headerlink\" title=\"1.1 Nginx简述\"></a>1.1 Nginx简述</h2><p>Nginx是一个开源且高性能、可靠的HTTP中间件、代理服务。</p>\n<h2 id=\"1-2-常见的HTTP服务\"><a href=\"#1-2-常见的HTTP服务\" class=\"headerlink\" title=\"1.2 常见的HTTP服务\"></a>1.2 常见的HTTP服务</h2><ul>\n<li>HTTPD - Apache基金会</li>\n<li>IIS - 微软</li>\n<li>GWS - Google Web Server<br>从07年之后Nginx的市场占有率慢慢增加了。下面我将详细的介绍下为什么越来越多的企业选择使用Nginx。<a id=\"more\"></a>\n<h2 id=\"1-3-为什么选择Nginx\"><a href=\"#1-3-为什么选择Nginx\" class=\"headerlink\" title=\"1.3 为什么选择Nginx\"></a>1.3 为什么选择Nginx</h2>我们为什么使用Nginx，肯定是因为它相比于其他的产品具有它独特的优势，下面呢我们就来谈谈具体的原因。</li>\n<li>原因一：IO多路复用epoll<br>首先我们来了解下什么是io复用，其实io复用解决的就是一个并发性的问题，比如我们都去请求某宝购物，这时候对于服务端后台而言就会产生多个请求，处理多个并发请求，对于中间件就要产生多个IO流对系统进行读写</li>\n<li>原因二：</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><h2 id=\"1-1-Nginx简述\"><a href=\"#1-1-Nginx简述\" class=\"headerlink\" title=\"1.1 Nginx简述\"></a>1.1 Nginx简述</h2><p>Nginx是一个开源且高性能、可靠的HTTP中间件、代理服务。</p>\n<h2 id=\"1-2-常见的HTTP服务\"><a href=\"#1-2-常见的HTTP服务\" class=\"headerlink\" title=\"1.2 常见的HTTP服务\"></a>1.2 常见的HTTP服务</h2><ul>\n<li>HTTPD - Apache基金会</li>\n<li>IIS - 微软</li>\n<li>GWS - Google Web Server<br>从07年之后Nginx的市场占有率慢慢增加了。下面我将详细的介绍下为什么越来越多的企业选择使用Nginx。","more":"<h2 id=\"1-3-为什么选择Nginx\"><a href=\"#1-3-为什么选择Nginx\" class=\"headerlink\" title=\"1.3 为什么选择Nginx\"></a>1.3 为什么选择Nginx</h2>我们为什么使用Nginx，肯定是因为它相比于其他的产品具有它独特的优势，下面呢我们就来谈谈具体的原因。</li>\n<li>原因一：IO多路复用epoll<br>首先我们来了解下什么是io复用，其实io复用解决的就是一个并发性的问题，比如我们都去请求某宝购物，这时候对于服务端后台而言就会产生多个请求，处理多个并发请求，对于中间件就要产生多个IO流对系统进行读写</li>\n<li>原因二：</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Apr 07 2019 23:02:57 GMT+0800 (CST)","title":"Nginx中间件","path":"2018/04/01/nginx/Nginx中间件/","eyeCatchImage":null,"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><h2 id=\"1-1-Nginx简述\"><a href=\"#1-1-Nginx简述\" class=\"headerlink\" title=\"1.1 Nginx简述\"></a>1.1 Nginx简述</h2><p>Nginx是一个开源且高性能、可靠的HTTP中间件、代理服务。</p>\n<h2 id=\"1-2-常见的HTTP服务\"><a href=\"#1-2-常见的HTTP服务\" class=\"headerlink\" title=\"1.2 常见的HTTP服务\"></a>1.2 常见的HTTP服务</h2><ul>\n<li>HTTPD - Apache基金会</li>\n<li>IIS - 微软</li>\n<li>GWS - Google Web Server<br>从07年之后Nginx的市场占有率慢慢增加了。下面我将详细的介绍下为什么越来越多的企业选择使用Nginx。","date":"2018-03-31T17:23:16.000Z","pv":0,"totalPV":0,"categories":"nginx","tags":["nginx"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"五分钟弄懂UML-类图","date":"2018-03-31T17:23:16.000Z","_content":"# 1. 前言\n\n# 2. UML介绍\n平时阅读一些远吗分析类文章或是设计应用架构时没少与UML类图打交道。实际上，UML类图中最常用到的元素五分钟就能掌握，下面赶紧来一起认识一下它吧：\n\n<!-- more -->","source":"_posts/uml/UML-类图.md","raw":"\n---\ntitle: 五分钟弄懂UML-类图\ndate: 2018-04-01 01:23:16\ntags: \n    - uml\ncategories: \n    - uml\n---\n# 1. 前言\n\n# 2. UML介绍\n平时阅读一些远吗分析类文章或是设计应用架构时没少与UML类图打交道。实际上，UML类图中最常用到的元素五分钟就能掌握，下面赶紧来一起认识一下它吧：\n\n<!-- more -->","slug":"uml/UML-类图","published":1,"updated":"2019-04-07T15:03:24.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju724og70006ixs6qalgceg7","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><h1 id=\"2-UML介绍\"><a href=\"#2-UML介绍\" class=\"headerlink\" title=\"2. UML介绍\"></a>2. UML介绍</h1><p>平时阅读一些远吗分析类文章或是设计应用架构时没少与UML类图打交道。实际上，UML类图中最常用到的元素五分钟就能掌握，下面赶紧来一起认识一下它吧：</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><h1 id=\"2-UML介绍\"><a href=\"#2-UML介绍\" class=\"headerlink\" title=\"2. UML介绍\"></a>2. UML介绍</h1><p>平时阅读一些远吗分析类文章或是设计应用架构时没少与UML类图打交道。实际上，UML类图中最常用到的元素五分钟就能掌握，下面赶紧来一起认识一下它吧：</p>","more":"","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Apr 07 2019 23:03:24 GMT+0800 (CST)","title":"五分钟弄懂UML-类图","path":"2018/04/01/uml/UML-类图/","eyeCatchImage":null,"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><h1 id=\"2-UML介绍\"><a href=\"#2-UML介绍\" class=\"headerlink\" title=\"2. UML介绍\"></a>2. UML介绍</h1><p>平时阅读一些远吗分析类文章或是设计应用架构时没少与UML类图打交道。实际上，UML类图中最常用到的元素五分钟就能掌握，下面赶紧来一起认识一下它吧：</p>","date":"2018-03-31T17:23:16.000Z","pv":0,"totalPV":0,"categories":"uml","tags":["uml"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Docker-02-创建mysql容器","date":"2019-03-10T09:45:22.000Z","_content":"# 1. 前言\n我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。\n个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。\n<!-- more -->\n# 2. 准备工作\n## 2.1 安装Docker\n无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。\n## 2.2 拉取mysql的镜像(这里使用mysql5.7)\n```bash\n$ docker pull mysql:5.7\n```\n\n## 2.3 启动mysql\n当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看\n```bash\n$ docker images \n```\n这个命令就列出了当前主机上已经下载的所有镜像。\n## 2.4 在宿主机上创建数据存储文件夹\n个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。\n例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录\n```bash\n$ mkdir /data/docker/mysql/mysql001\n```\n### 2.5 创建容器\n```bash\n$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7 \n```\n\n这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。\n- docker run \n这是启动一个容器\n- --name mysql001 \n启动的容器名称为mysql001，这个名称在后面操作可直接使用名称\n- -p 3306:3306\n映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口\n- -e MYSQL_ROOT_PASSWORD=root\n设置mysql的登录密码为root\n- -v /etc/localtime:/etc/localtime\n这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时\n- -v /data/docker/mysql/mysql001:/var/lib/mysql\n这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里\n- -d mysql:5.7\n-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样\n\n### 启动容器\n执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器\n```bash\n$ docker start mysql001\n```\n或者将name修改为image_id，image_id可以通过 docker images命令去查看。\n\n## 访问mysql数据库\n- 方式一\n```bash\n$ mysql-cli -h 127.0.0.1 -u root -p root\n```\n- 方式二\n使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。\n\n### 删除容器\n删除容器必须要保证容器是stop的可以通过下面的命令查看\n- 查看正在运行的容器\n```bash\n$ docker ps \n```\n- 查看所有运行过的容器包括正在运行的容器\n```bash\n$ docker ps -a\n```\n根据上面的命令可以查找到容器id，执行命令删除容器\n```bash\n$ docker rm 容器id\n```\n\n\n","source":"_posts/docker/Docker-02-创建mysql容器.md","raw":"---\ntitle: Docker-02-创建mysql容器\ndate: 2019-03-10 17:45:22\ntags: \n    - docker\n    - mysql\ncategories: \n    - docker\n---\n# 1. 前言\n我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。\n个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。\n<!-- more -->\n# 2. 准备工作\n## 2.1 安装Docker\n无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。\n## 2.2 拉取mysql的镜像(这里使用mysql5.7)\n```bash\n$ docker pull mysql:5.7\n```\n\n## 2.3 启动mysql\n当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看\n```bash\n$ docker images \n```\n这个命令就列出了当前主机上已经下载的所有镜像。\n## 2.4 在宿主机上创建数据存储文件夹\n个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。\n例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录\n```bash\n$ mkdir /data/docker/mysql/mysql001\n```\n### 2.5 创建容器\n```bash\n$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7 \n```\n\n这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。\n- docker run \n这是启动一个容器\n- --name mysql001 \n启动的容器名称为mysql001，这个名称在后面操作可直接使用名称\n- -p 3306:3306\n映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口\n- -e MYSQL_ROOT_PASSWORD=root\n设置mysql的登录密码为root\n- -v /etc/localtime:/etc/localtime\n这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时\n- -v /data/docker/mysql/mysql001:/var/lib/mysql\n这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里\n- -d mysql:5.7\n-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样\n\n### 启动容器\n执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器\n```bash\n$ docker start mysql001\n```\n或者将name修改为image_id，image_id可以通过 docker images命令去查看。\n\n## 访问mysql数据库\n- 方式一\n```bash\n$ mysql-cli -h 127.0.0.1 -u root -p root\n```\n- 方式二\n使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。\n\n### 删除容器\n删除容器必须要保证容器是stop的可以通过下面的命令查看\n- 查看正在运行的容器\n```bash\n$ docker ps \n```\n- 查看所有运行过的容器包括正在运行的容器\n```bash\n$ docker ps -a\n```\n根据上面的命令可以查找到容器id，执行命令删除容器\n```bash\n$ docker rm 容器id\n```\n\n\n","slug":"docker/Docker-02-创建mysql容器","published":1,"updated":"2019-04-07T15:02:41.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju724ogb0009ixs6g0czi1xc","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。<br>个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。<br><a id=\"more\"></a></p>\n<h1 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h1><h2 id=\"2-1-安装Docker\"><a href=\"#2-1-安装Docker\" class=\"headerlink\" title=\"2.1 安装Docker\"></a>2.1 安装Docker</h2><p>无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。</p>\n<h2 id=\"2-2-拉取mysql的镜像-这里使用mysql5-7\"><a href=\"#2-2-拉取mysql的镜像-这里使用mysql5-7\" class=\"headerlink\" title=\"2.2 拉取mysql的镜像(这里使用mysql5.7)\"></a>2.2 拉取mysql的镜像(这里使用mysql5.7)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-启动mysql\"><a href=\"#2-3-启动mysql\" class=\"headerlink\" title=\"2.3 启动mysql\"></a>2.3 启动mysql</h2><p>当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure></p>\n<p>这个命令就列出了当前主机上已经下载的所有镜像。</p>\n<h2 id=\"2-4-在宿主机上创建数据存储文件夹\"><a href=\"#2-4-在宿主机上创建数据存储文件夹\" class=\"headerlink\" title=\"2.4 在宿主机上创建数据存储文件夹\"></a>2.4 在宿主机上创建数据存储文件夹</h2><p>个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。<br>例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /data/docker/mysql/mysql001</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5-创建容器\"><a href=\"#2-5-创建容器\" class=\"headerlink\" title=\"2.5 创建容器\"></a>2.5 创建容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7</span><br></pre></td></tr></table></figure>\n<p>这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。</p>\n<ul>\n<li>docker run<br>这是启动一个容器</li>\n<li>–name mysql001<br>启动的容器名称为mysql001，这个名称在后面操作可直接使用名称</li>\n<li>-p 3306:3306<br>映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口</li>\n<li>-e MYSQL_ROOT_PASSWORD=root<br>设置mysql的登录密码为root</li>\n<li>-v /etc/localtime:/etc/localtime<br>这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时</li>\n<li>-v /data/docker/mysql/mysql001:/var/lib/mysql<br>这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里</li>\n<li>-d mysql:5.7<br>-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样</li>\n</ul>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><p>执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start mysql001</span><br></pre></td></tr></table></figure></p>\n<p>或者将name修改为image_id，image_id可以通过 docker images命令去查看。</p>\n<h2 id=\"访问mysql数据库\"><a href=\"#访问mysql数据库\" class=\"headerlink\" title=\"访问mysql数据库\"></a>访问mysql数据库</h2><ul>\n<li><p>方式一</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql-cli -h 127.0.0.1 -u root -p root</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式二<br>使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。</p>\n</li>\n</ul>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>删除容器必须要保证容器是stop的可以通过下面的命令查看</p>\n<ul>\n<li><p>查看正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有运行过的容器包括正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>根据上面的命令可以查找到容器id，执行命令删除容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm 容器id</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。<br>个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。<br>","more":"</p>\n<h1 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h1><h2 id=\"2-1-安装Docker\"><a href=\"#2-1-安装Docker\" class=\"headerlink\" title=\"2.1 安装Docker\"></a>2.1 安装Docker</h2><p>无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。</p>\n<h2 id=\"2-2-拉取mysql的镜像-这里使用mysql5-7\"><a href=\"#2-2-拉取mysql的镜像-这里使用mysql5-7\" class=\"headerlink\" title=\"2.2 拉取mysql的镜像(这里使用mysql5.7)\"></a>2.2 拉取mysql的镜像(这里使用mysql5.7)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-启动mysql\"><a href=\"#2-3-启动mysql\" class=\"headerlink\" title=\"2.3 启动mysql\"></a>2.3 启动mysql</h2><p>当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure></p>\n<p>这个命令就列出了当前主机上已经下载的所有镜像。</p>\n<h2 id=\"2-4-在宿主机上创建数据存储文件夹\"><a href=\"#2-4-在宿主机上创建数据存储文件夹\" class=\"headerlink\" title=\"2.4 在宿主机上创建数据存储文件夹\"></a>2.4 在宿主机上创建数据存储文件夹</h2><p>个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。<br>例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /data/docker/mysql/mysql001</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5-创建容器\"><a href=\"#2-5-创建容器\" class=\"headerlink\" title=\"2.5 创建容器\"></a>2.5 创建容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7</span><br></pre></td></tr></table></figure>\n<p>这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。</p>\n<ul>\n<li>docker run<br>这是启动一个容器</li>\n<li>–name mysql001<br>启动的容器名称为mysql001，这个名称在后面操作可直接使用名称</li>\n<li>-p 3306:3306<br>映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口</li>\n<li>-e MYSQL_ROOT_PASSWORD=root<br>设置mysql的登录密码为root</li>\n<li>-v /etc/localtime:/etc/localtime<br>这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时</li>\n<li>-v /data/docker/mysql/mysql001:/var/lib/mysql<br>这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里</li>\n<li>-d mysql:5.7<br>-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样</li>\n</ul>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><p>执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start mysql001</span><br></pre></td></tr></table></figure></p>\n<p>或者将name修改为image_id，image_id可以通过 docker images命令去查看。</p>\n<h2 id=\"访问mysql数据库\"><a href=\"#访问mysql数据库\" class=\"headerlink\" title=\"访问mysql数据库\"></a>访问mysql数据库</h2><ul>\n<li><p>方式一</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql-cli -h 127.0.0.1 -u root -p root</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式二<br>使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。</p>\n</li>\n</ul>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>删除容器必须要保证容器是stop的可以通过下面的命令查看</p>\n<ul>\n<li><p>查看正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有运行过的容器包括正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>根据上面的命令可以查找到容器id，执行命令删除容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm 容器id</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Apr 07 2019 23:02:41 GMT+0800 (CST)","title":"Docker-02-创建mysql容器","path":"2019/03/10/docker/Docker-02-创建mysql容器/","eyeCatchImage":null,"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。<br>个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。<br>","date":"2019-03-10T09:45:22.000Z","pv":0,"totalPV":0,"categories":"docker","tags":["docker","mysql"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Docker-01-Docker介绍","date":"2018-03-05T17:45:16.000Z","_content":"# 1.前言\n## 1.1 什么是Docker？\n\nDocker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为**容器**。\nDocker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。\n传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。\n<!-- more -->\n## 1.2 为什么要使用docker？\n作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。\n\n- **更高效的利用系统资源**\n\n由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。\n\n\n- **更快速的启动时间**\n\n传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。\n\n\n- **一致的运行环境**\n\n开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。\n\n\n- **持续交付和部署**\n\n使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。\n\n\n- **更轻松的迁移**\n\n由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。\n\n\n- **更轻松的维护和扩展**\n\nDocker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。\n\n\n- **对比传统虚拟机总结**\n\n| 特性 | 容器 | 虚拟机 |\n| ----- | :-----: | :-----: |\n| **启动** | 秒级 | 分钟级 |\n| **硬盘使用** | 一般为MB | 一般为GB |\n| **性能** | 接近原生 | 弱于|\n| **系统支持量** | 单机支持上千个容器 | 一般几十个 |\n\n\n# 2. Docker的几个基本概念\n\n## 2.1 Docker镜像(image)\n\n我们都知道，**操作系统分为内核和用户空间**。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。\n\n\n因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为**分层存储的架构**。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。\n\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n\n\n**分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。**\n\n\n## 2.2 Docker容器(container)\n\n镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n**容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的*命名空间***。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。\n\n每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n\n容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。\n\n数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。\n\n## 2.3 Docker仓库(registry)\n镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。\n\n下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。\n### 2.3.1 公有仓库\n最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。\n\n由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。\n\n### 2.3.2 私有仓库\n用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。","source":"_posts/docker/Docker-01-docker介绍.md","raw":"---\ntitle: Docker-01-Docker介绍\ndate: 2018-03-06 01:45:16\ntags: \n    - docker\ncategories: \n    - docker\n---\n# 1.前言\n## 1.1 什么是Docker？\n\nDocker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为**容器**。\nDocker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。\n传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。\n<!-- more -->\n## 1.2 为什么要使用docker？\n作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。\n\n- **更高效的利用系统资源**\n\n由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。\n\n\n- **更快速的启动时间**\n\n传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。\n\n\n- **一致的运行环境**\n\n开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。\n\n\n- **持续交付和部署**\n\n使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。\n\n\n- **更轻松的迁移**\n\n由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。\n\n\n- **更轻松的维护和扩展**\n\nDocker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。\n\n\n- **对比传统虚拟机总结**\n\n| 特性 | 容器 | 虚拟机 |\n| ----- | :-----: | :-----: |\n| **启动** | 秒级 | 分钟级 |\n| **硬盘使用** | 一般为MB | 一般为GB |\n| **性能** | 接近原生 | 弱于|\n| **系统支持量** | 单机支持上千个容器 | 一般几十个 |\n\n\n# 2. Docker的几个基本概念\n\n## 2.1 Docker镜像(image)\n\n我们都知道，**操作系统分为内核和用户空间**。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。\n\n\n因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为**分层存储的架构**。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。\n\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n\n\n**分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。**\n\n\n## 2.2 Docker容器(container)\n\n镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n**容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的*命名空间***。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。\n\n每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n\n容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。\n\n数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。\n\n## 2.3 Docker仓库(registry)\n镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。\n\n下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。\n### 2.3.1 公有仓库\n最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。\n\n由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。\n\n### 2.3.2 私有仓库\n用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。","slug":"docker/Docker-01-docker介绍","published":1,"updated":"2019-04-07T15:02:20.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju724ogc000aixs64jahtnm8","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><h2 id=\"1-1-什么是Docker？\"><a href=\"#1-1-什么是Docker？\" class=\"headerlink\" title=\"1.1 什么是Docker？\"></a>1.1 什么是Docker？</h2><p>Docker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为<strong>容器</strong>。<br>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。<br>传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。<br><a id=\"more\"></a></p>\n<h2 id=\"1-2-为什么要使用docker？\"><a href=\"#1-2-为什么要使用docker？\" class=\"headerlink\" title=\"1.2 为什么要使用docker？\"></a>1.2 为什么要使用docker？</h2><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>\n<ul>\n<li><strong>更高效的利用系统资源</strong></li>\n</ul>\n<p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\n<ul>\n<li><strong>更快速的启动时间</strong></li>\n</ul>\n<p>传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。</p>\n<ul>\n<li><strong>一致的运行环境</strong></li>\n</ul>\n<p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。</p>\n<ul>\n<li><strong>持续交付和部署</strong></li>\n</ul>\n<p>使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。</p>\n<ul>\n<li><strong>更轻松的迁移</strong></li>\n</ul>\n<p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n<ul>\n<li><strong>更轻松的维护和扩展</strong></li>\n</ul>\n<p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n<ul>\n<li><strong>对比传统虚拟机总结</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th style=\"text-align:center\">容器</th>\n<th style=\"text-align:center\">虚拟机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>启动</strong></td>\n<td style=\"text-align:center\">秒级</td>\n<td style=\"text-align:center\">分钟级</td>\n</tr>\n<tr>\n<td><strong>硬盘使用</strong></td>\n<td style=\"text-align:center\">一般为MB</td>\n<td style=\"text-align:center\">一般为GB</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td style=\"text-align:center\">接近原生</td>\n<td style=\"text-align:center\">弱于</td>\n</tr>\n<tr>\n<td><strong>系统支持量</strong></td>\n<td style=\"text-align:center\">单机支持上千个容器</td>\n<td style=\"text-align:center\">一般几十个</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"2-Docker的几个基本概念\"><a href=\"#2-Docker的几个基本概念\" class=\"headerlink\" title=\"2. Docker的几个基本概念\"></a>2. Docker的几个基本概念</h1><h2 id=\"2-1-Docker镜像-image\"><a href=\"#2-1-Docker镜像-image\" class=\"headerlink\" title=\"2.1 Docker镜像(image)\"></a>2.1 Docker镜像(image)</h2><p>我们都知道，<strong>操作系统分为内核和用户空间</strong>。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。</p>\n<p>因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为<strong>分层存储的架构</strong>。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p><strong>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</strong></p>\n<h2 id=\"2-2-Docker容器-container\"><a href=\"#2-2-Docker容器-container\" class=\"headerlink\" title=\"2.2 Docker容器(container)\"></a>2.2 Docker容器(container)</h2><p>镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p><strong>容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的<em>命名空间</em></strong>。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。</p>\n<p>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。</p>\n<h2 id=\"2-3-Docker仓库-registry\"><a href=\"#2-3-Docker仓库-registry\" class=\"headerlink\" title=\"2.3 Docker仓库(registry)\"></a>2.3 Docker仓库(registry)</h2><p>镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</p>\n<p>下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。</p>\n<h3 id=\"2-3-1-公有仓库\"><a href=\"#2-3-1-公有仓库\" class=\"headerlink\" title=\"2.3.1 公有仓库\"></a>2.3.1 公有仓库</h3><p>最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。</p>\n<p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。</p>\n<h3 id=\"2-3-2-私有仓库\"><a href=\"#2-3-2-私有仓库\" class=\"headerlink\" title=\"2.3.2 私有仓库\"></a>2.3.2 私有仓库</h3><p>用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><h2 id=\"1-1-什么是Docker？\"><a href=\"#1-1-什么是Docker？\" class=\"headerlink\" title=\"1.1 什么是Docker？\"></a>1.1 什么是Docker？</h2><p>Docker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为<strong>容器</strong>。<br>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。<br>传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。<br>","more":"</p>\n<h2 id=\"1-2-为什么要使用docker？\"><a href=\"#1-2-为什么要使用docker？\" class=\"headerlink\" title=\"1.2 为什么要使用docker？\"></a>1.2 为什么要使用docker？</h2><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>\n<ul>\n<li><strong>更高效的利用系统资源</strong></li>\n</ul>\n<p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\n<ul>\n<li><strong>更快速的启动时间</strong></li>\n</ul>\n<p>传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。</p>\n<ul>\n<li><strong>一致的运行环境</strong></li>\n</ul>\n<p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。</p>\n<ul>\n<li><strong>持续交付和部署</strong></li>\n</ul>\n<p>使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。</p>\n<ul>\n<li><strong>更轻松的迁移</strong></li>\n</ul>\n<p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n<ul>\n<li><strong>更轻松的维护和扩展</strong></li>\n</ul>\n<p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n<ul>\n<li><strong>对比传统虚拟机总结</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th style=\"text-align:center\">容器</th>\n<th style=\"text-align:center\">虚拟机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>启动</strong></td>\n<td style=\"text-align:center\">秒级</td>\n<td style=\"text-align:center\">分钟级</td>\n</tr>\n<tr>\n<td><strong>硬盘使用</strong></td>\n<td style=\"text-align:center\">一般为MB</td>\n<td style=\"text-align:center\">一般为GB</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td style=\"text-align:center\">接近原生</td>\n<td style=\"text-align:center\">弱于</td>\n</tr>\n<tr>\n<td><strong>系统支持量</strong></td>\n<td style=\"text-align:center\">单机支持上千个容器</td>\n<td style=\"text-align:center\">一般几十个</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"2-Docker的几个基本概念\"><a href=\"#2-Docker的几个基本概念\" class=\"headerlink\" title=\"2. Docker的几个基本概念\"></a>2. Docker的几个基本概念</h1><h2 id=\"2-1-Docker镜像-image\"><a href=\"#2-1-Docker镜像-image\" class=\"headerlink\" title=\"2.1 Docker镜像(image)\"></a>2.1 Docker镜像(image)</h2><p>我们都知道，<strong>操作系统分为内核和用户空间</strong>。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。</p>\n<p>因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为<strong>分层存储的架构</strong>。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p><strong>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</strong></p>\n<h2 id=\"2-2-Docker容器-container\"><a href=\"#2-2-Docker容器-container\" class=\"headerlink\" title=\"2.2 Docker容器(container)\"></a>2.2 Docker容器(container)</h2><p>镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p><strong>容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的<em>命名空间</em></strong>。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。</p>\n<p>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。</p>\n<h2 id=\"2-3-Docker仓库-registry\"><a href=\"#2-3-Docker仓库-registry\" class=\"headerlink\" title=\"2.3 Docker仓库(registry)\"></a>2.3 Docker仓库(registry)</h2><p>镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</p>\n<p>下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。</p>\n<h3 id=\"2-3-1-公有仓库\"><a href=\"#2-3-1-公有仓库\" class=\"headerlink\" title=\"2.3.1 公有仓库\"></a>2.3.1 公有仓库</h3><p>最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。</p>\n<p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。</p>\n<h3 id=\"2-3-2-私有仓库\"><a href=\"#2-3-2-私有仓库\" class=\"headerlink\" title=\"2.3.2 私有仓库\"></a>2.3.2 私有仓库</h3><p>用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Apr 07 2019 23:02:20 GMT+0800 (CST)","title":"Docker-01-Docker介绍","path":"2018/03/06/docker/Docker-01-docker介绍/","eyeCatchImage":null,"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><h2 id=\"1-1-什么是Docker？\"><a href=\"#1-1-什么是Docker？\" class=\"headerlink\" title=\"1.1 什么是Docker？\"></a>1.1 什么是Docker？</h2><p>Docker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为<strong>容器</strong>。<br>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。<br>传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。<br>","date":"2018-03-05T17:45:16.000Z","pv":0,"totalPV":0,"categories":"docker","tags":["docker"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"深入理解Java虚拟机","date":"2019-03-31T17:45:16.000Z","_content":"# 1.前言\n- 了解历史\n- 内存结构 内存溢出\n- 垃圾回收机制\n- 性能监控工具\n- 性能调优案例实战\n- 认识类的文件结构\n- 类加载机制\n- 字节码执行引擎\n- 虚拟机编译及运行时优化\n- Java线程高级\n<!-- more -->","source":"_posts/jvm/深入理解java虚拟机.md","raw":"---\ntitle: 深入理解Java虚拟机\ndate: 2019-04-01 01:45:16\ntags: \n    - jvm\ncategories: \n    - jvm\n---\n# 1.前言\n- 了解历史\n- 内存结构 内存溢出\n- 垃圾回收机制\n- 性能监控工具\n- 性能调优案例实战\n- 认识类的文件结构\n- 类加载机制\n- 字节码执行引擎\n- 虚拟机编译及运行时优化\n- Java线程高级\n<!-- more -->","slug":"jvm/深入理解java虚拟机","published":1,"updated":"2019-04-07T14:10:29.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju724ogd000bixs6d9a18dxs","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><ul>\n<li>了解历史</li>\n<li>内存结构 内存溢出</li>\n<li>垃圾回收机制</li>\n<li>性能监控工具</li>\n<li>性能调优案例实战</li>\n<li>认识类的文件结构</li>\n<li>类加载机制</li>\n<li>字节码执行引擎</li>\n<li>虚拟机编译及运行时优化</li>\n<li>Java线程高级<a id=\"more\"></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><ul>\n<li>了解历史</li>\n<li>内存结构 内存溢出</li>\n<li>垃圾回收机制</li>\n<li>性能监控工具</li>\n<li>性能调优案例实战</li>\n<li>认识类的文件结构</li>\n<li>类加载机制</li>\n<li>字节码执行引擎</li>\n<li>虚拟机编译及运行时优化</li>\n<li>Java线程高级","more":"</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Apr 07 2019 22:10:29 GMT+0800 (CST)","title":"深入理解Java虚拟机","path":"2019/04/01/jvm/深入理解java虚拟机/","eyeCatchImage":null,"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><ul>\n<li>了解历史</li>\n<li>内存结构 内存溢出</li>\n<li>垃圾回收机制</li>\n<li>性能监控工具</li>\n<li>性能调优案例实战</li>\n<li>认识类的文件结构</li>\n<li>类加载机制</li>\n<li>字节码执行引擎</li>\n<li>虚拟机编译及运行时优化</li>\n<li>Java线程高级","date":"2019-03-31T17:45:16.000Z","pv":0,"totalPV":0,"categories":"jvm","tags":["jvm"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"cju724og40005ixs65j219pq2","category_id":"cju724og90007ixs6c59v5fpd","_id":"cju724ogf000fixs69qyhioic"},{"post_id":"cju724og70006ixs6qalgceg7","category_id":"cju724ogd000cixs69v5ui1v4","_id":"cju724ogf000jixs62lrwng4i"},{"post_id":"cju724ogb0009ixs6g0czi1xc","category_id":"cju724ogf000gixs6shja6imy","_id":"cju724ogi000nixs6oihammli"},{"post_id":"cju724ogc000aixs64jahtnm8","category_id":"cju724ogf000gixs6shja6imy","_id":"cju724ogi000qixs6488dk63n"},{"post_id":"cju724ogd000bixs6d9a18dxs","category_id":"cju724ogi000mixs6ila1zum1","_id":"cju724ogj000uixs6dmbkgt7a"}],"PostTag":[{"post_id":"cju724og40005ixs65j219pq2","tag_id":"cju724ogb0008ixs6uu1qigjw","_id":"cju724oge000eixs6gvpcxaz9"},{"post_id":"cju724og70006ixs6qalgceg7","tag_id":"cju724oge000dixs6rnwibm3f","_id":"cju724ogf000iixs6qajqhx4b"},{"post_id":"cju724ogb0009ixs6g0czi1xc","tag_id":"cju724ogf000hixs6upgnffg5","_id":"cju724ogi000pixs6st1ltist"},{"post_id":"cju724ogb0009ixs6g0czi1xc","tag_id":"cju724ogg000lixs60y9af4ol","_id":"cju724ogi000rixs6miuaooef"},{"post_id":"cju724ogc000aixs64jahtnm8","tag_id":"cju724ogf000hixs6upgnffg5","_id":"cju724ogj000tixs6wr0npqte"},{"post_id":"cju724ogd000bixs6d9a18dxs","tag_id":"cju724ogi000sixs6dytd7hdj","_id":"cju724ogj000vixs6wr1jimos"}],"Tag":[{"name":"nginx","_id":"cju724ogb0008ixs6uu1qigjw"},{"name":"uml","_id":"cju724oge000dixs6rnwibm3f"},{"name":"docker","_id":"cju724ogf000hixs6upgnffg5"},{"name":"mysql","_id":"cju724ogg000lixs60y9af4ol"},{"name":"jvm","_id":"cju724ogi000sixs6dytd7hdj"}]}}