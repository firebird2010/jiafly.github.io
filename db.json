{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/image/docker.jpg","path":"image/docker.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/robots.txt","path":"robots.txt","modified":0,"renderable":1},{"_id":"source/image/java8Stream.jpg","path":"image/java8Stream.jpg","modified":0,"renderable":0},{"_id":"source/image/11.jpg","path":"image/11.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/delay-mq.jpg","path":"image/rabbit/delay-mq.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-basic.png","path":"image/rabbit/mq-basic.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-banding.jpg","path":"image/rabbit/mq-banding.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/direct.png","path":"image/rabbit/direct.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-exchange.jpg","path":"image/rabbit/mq-exchange.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-login.jpg","path":"image/rabbit/mq-login.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-fanout.jpg","path":"image/rabbit/mq-fanout.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-kafka.png","path":"image/rabbit/mq-kafka.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-miaosha.png","path":"image/rabbit/mq-miaosha.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-order-old.png","path":"image/rabbit/mq-order-old.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-order.png","path":"image/rabbit/mq-order.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-rabbit.png","path":"image/rabbit/mq-rabbit.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-p2p.png","path":"image/rabbit/mq-p2p.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-subPush.png","path":"image/rabbit/mq-subPush.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-yibu.png","path":"image/rabbit/mq-yibu.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/p2p.png","path":"image/rabbit/p2p.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-yibubingxing.png","path":"image/rabbit/mq-yibubingxing.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-yibuchuanxing.png","path":"image/rabbit/mq-yibuchuanxing.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/pubsub.png","path":"image/rabbit/pubsub.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/topic.png","path":"image/rabbit/topic.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/headImage.jpg","path":"images/headImage.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/clicklove.js","path":"js/clicklove.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"source/image/jvm/jvm-memory.png","path":"image/jvm/jvm-memory.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-direct.jpg","path":"image/rabbit/mq-direct.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-topic.jpg","path":"image/rabbit/mq-topic.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/addwechat.jpg","path":"images/addwechat.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"source/image/rabbit/mq-yunzhuanliucheng.jpg","path":"image/rabbit/mq-yunzhuanliucheng.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","path":"lib/needsharebutton/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/README.md","path":"lib/needsharebutton/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"source/image/docker/docker-util.jpg","path":"image/docker/docker-util.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1558773534072},{"_id":"themes/next/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1558773533787},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1558773534053},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1558773534109},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1558773534108},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1558773534084},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1558773534160},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1558773534159},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1558773533784},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1558773534110},{"_id":"themes/next/[{\"courseId\":26,\"curriculumNodes\":[],\"id\":628,\"nam","hash":"926d114a8ec37145f1b215431de9588c431880d0","modified":1558773534085},{"_id":"themes/next/bower.json","hash":"8fa4f26f5205cbc64d33318d1be5d35b2667398c","modified":1558773534052},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1558773534084},{"_id":"themes/next/_config.yml","hash":"65a1e6f4274d3ac2bff6fab32d1023a143b3f07e","modified":1558810486478},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1558773533854},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1558773534072},{"_id":"themes/next/package.json","hash":"888bcacea284ec536a1428ad957a78dfb3ec255d","modified":1558773534084},{"_id":"source/about/index.md","hash":"4e75c28e36e3f65aa031966513e032016bcd3541","modified":1558800780889},{"_id":"source/categories/index.md","hash":"9900a263336f1c5d8a5946cf571abd221ff8166b","modified":1558800795467},{"_id":"source/_posts/RabbitMQ.md","hash":"3512740db8a245e71beaae85c4b3c673b489ddf4","modified":1555669307110},{"_id":"source/image/docker.jpg","hash":"3e9e58e51a40d3a3b5508d1071e4583ae0e958c6","modified":1555661931266},{"_id":"source/tags/index.md","hash":"8899b6a603d30b25bf4f1e9e41aac92f6976cc7c","modified":1558800805908},{"_id":"source/temp/Linux.md","hash":"e5f94e85894eae38edec19fc9fc122a529bfe853","modified":1558804414015},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558773534138},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558773534144},{"_id":"themes/next/.git/config","hash":"167559d3912dc1dfd6f77f753565aa4adac0de05","modified":1558773534112},{"_id":"themes/next/.git/index","hash":"1d50b0c878b74440904ad3816588030398ed7987","modified":1558852678526},{"_id":"themes/next/.git/packed-refs","hash":"51626a7ab2fab0b9ea0029ff5dd5d29f0df3cf2d","modified":1558773534159},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1558773534104},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1558773534097},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1558773534103},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1558773534104},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1558773534101},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1558773534099},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1558773534102},{"_id":"themes/next/.github/mergeable.yml","hash":"8e3a6abc74b5cba57f9586fe6d98762fd4fc9b04","modified":1558773534100},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1558773534108},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1558773534107},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1558773534099},{"_id":"themes/next/.github/release-drafter.yml","hash":"b4476ada5c62ee7d63ba2e59ead2ec4897086e3c","modified":1558773534103},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1558773534101},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1558773534098},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1558773534056},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1558773534059},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1558773534058},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1558773534064},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1558773534072},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1558773534071},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1558773534071},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1558773534058},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1558773534062},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1558773534077},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1558773534074},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1558773534074},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1558773534079},{"_id":"themes/next/languages/fr.yml","hash":"d37a5d82b499a2f082fe9bbf3ad9f11b36b6b837","modified":1558773534081},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1558773534076},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1558773534079},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1558773534078},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1558773534075},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1558773534083},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1558773534074},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1558773534077},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1558773534081},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1558773534073},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1558773534080},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1558773534082},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1558773534083},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1558773534081},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1558773534080},{"_id":"themes/next/layout/_layout.swig","hash":"74d27ff11c2ab7df5b91cdead0650ce106f34747","modified":1558773533799},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1558773533799},{"_id":"themes/next/layout/index.swig","hash":"45de58da26651866ad8c5f3df8940ca61e618e7c","modified":1558773533811},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1558773533828},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1558773533810},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1558773533809},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1558773533794},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1558773533793},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1558773534088},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1558773534088},{"_id":"themes/next/source/CNAME","hash":"898105f91480fcf9d5dad1f6d1aeecb7b67a6fdb","modified":1558773533917},{"_id":"themes/next/source/.DS_Store","hash":"ed01a06d1fea8a9217f5ded5c1a17a6196faca2d","modified":1558773533855},{"_id":"themes/next/source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1558773533946},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1558773533792},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1558773533791},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1558773533791},{"_id":"themes/next/source/robots.txt","hash":"8e716818f765437134fdab50e02a5efe0d434b2b","modified":1558808648395},{"_id":"source/image/java8Stream.jpg","hash":"7c28477dc1588daaf410ba6f288859bfbb12c443","modified":1558019702836},{"_id":"themes/next/layout/_custom/header.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558773533796},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558773534052},{"_id":"source/_posts/docker/Docker-02-创建mysql容器.md","hash":"d95f27340709cc771802e8701d9be2e37c79ed7f","modified":1554649361502},{"_id":"source/_posts/docker/Docker-01-docker介绍.md","hash":"d5069bf99ff66670df1aa4c515fe27e3d57e8050","modified":1554649340673},{"_id":"source/_posts/docker/Docker安装常用镜像.md","hash":"a3e7de86356fd506b671a5e9fd48ec8095a350ff","modified":1557982667341},{"_id":"source/image/11.jpg","hash":"ca343ba9238dfeb636769a56b6a7ba35c7744952","modified":1539241307000},{"_id":"source/_posts/java/Java8-Stream中常用操作.md","hash":"213aa17adc074fb452fa3390ea2ab89f4cad5afc","modified":1558020232358},{"_id":"source/image/rabbit/delay-mq.jpg","hash":"8ca5da0d2fbe7101f549fccbd9e09a2585ccb2cf","modified":1543803092477},{"_id":"source/image/rabbit/mq-basic.png","hash":"8dfef652adcbab142f3aa48e016d13638ad51108","modified":1543332258179},{"_id":"source/image/rabbit/mq-banding.jpg","hash":"518c0b6fdd25743ef8afbd0f6ef715011c5d183c","modified":1543424238102},{"_id":"source/image/rabbit/direct.png","hash":"0ba63de33dd09d3a1d6991e137d9ba2b86339e9f","modified":1543340300105},{"_id":"source/image/rabbit/mq-exchange.jpg","hash":"f385789ea47f8e12173f2f9ce685671904f6e2b0","modified":1543423659701},{"_id":"source/image/rabbit/mq-login.jpg","hash":"1383b024f759d4cf80345115076010eb2827aab6","modified":1555661435745},{"_id":"source/image/rabbit/mq-fanout.jpg","hash":"592b21617290d0fd5d4208ab1d7c1851092b347f","modified":1543652937916},{"_id":"source/image/rabbit/mq-kafka.png","hash":"be560f12df555a8757a7778f2661507b60223a48","modified":1543337322774},{"_id":"source/image/rabbit/mq-miaosha.png","hash":"7df0e1b286581f2a1f50b4edbe83b0173febceef","modified":1543336497865},{"_id":"source/image/rabbit/mq-order-old.png","hash":"87be91fd0d02c3caf87a4c0fb1adf5ba358d92ae","modified":1543337267534},{"_id":"source/image/rabbit/mq-order.png","hash":"8aa26063b4782184567dd42b8f6623bf2b086adb","modified":1543337143964},{"_id":"source/image/rabbit/mq-rabbit.png","hash":"7582cae932ca99a85a28542f861781cf2e0f8ea3","modified":1543333148764},{"_id":"source/image/rabbit/mq-p2p.png","hash":"194a5782e42ccd73c2c301207674b6ba825cc054","modified":1543337565154},{"_id":"source/image/rabbit/mq-subPush.png","hash":"9f6ecf7551d172e4c4eaac3a9d67071cf6f3b22f","modified":1543337575464},{"_id":"source/image/rabbit/mq-yibu.png","hash":"9d18af2ad27f0a032381e8140dc78de20081c25a","modified":1543336262327},{"_id":"source/image/rabbit/p2p.png","hash":"2b6a18e703af96042fb81c904f60615d5501f3cc","modified":1543337822632},{"_id":"source/image/rabbit/mq-yibubingxing.png","hash":"1e44d0091d38e075c7c1b3542f674a89575d468e","modified":1543336234041},{"_id":"source/image/rabbit/mq-yibuchuanxing.png","hash":"30da36a811fbb3cf862dfdf16a2ae0ba70fb1760","modified":1543336125224},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1558773534147},{"_id":"source/image/rabbit/pubsub.png","hash":"582e814ea15a73daa11b55d1c7e235cfa4a58faf","modified":1543337884964},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558773534145},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558773534151},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1558773534153},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1558773534148},{"_id":"source/image/rabbit/topic.png","hash":"13921a1b47d658785fa568fb2d3d68ceaeb9fdb7","modified":1543370313534},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1558773534147},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1558773534146},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1558773534149},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1558773534154},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1558773534150},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1558773534154},{"_id":"themes/next/.git/logs/HEAD","hash":"0932e61761099a1dd8fb76b914870ee32e1056e1","modified":1558773534140},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558773534139},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1558773534106},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1558773534106},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1558773534107},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1558773534105},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1558773534061},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1558773534070},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1558773534060},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1558773534067},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1558773534065},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1558773534067},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1558773534060},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1558773534070},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1558773534062},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1558773534069},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1558773534068},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1558773534066},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1b5bd6ae5781137d81dc8667e912d3df6eeab260","modified":1558773534068},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1558773533797},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1558773533795},{"_id":"themes/next/layout/_partials/comments.swig","hash":"9948453f086d29822122afd6164a3e6621e8a5a8","modified":1558851378164},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1558773533854},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1558852301042},{"_id":"themes/next/layout/_macro/post.swig","hash":"10187fafe566b3e5bfa4e7e10c77ea9026d9081d","modified":1558773533852},{"_id":"themes/next/layout/_partials/footer.swig","hash":"361400a7ac092cfb30f9c181d30362c91ba29084","modified":1558807037780},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1558773533811},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1558773533816},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1558773533807},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1558773533822},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1558773533804},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1558773533804},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1558773533805},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1558773533806},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1558773533804},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1558773533840},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1558773533836},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1558773533834},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01ded5e1bad89a6f8d64cd063e3e4e42c20d33bc","modified":1558773533835},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1558773533841},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1558773533840},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1558773533842},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1558773533834},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1558773533833},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1558773533842},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1558773533833},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1558773533836},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1558773534087},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1558773534095},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1558773534096},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1558773534093},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1558773534090},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1558773534095},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1558773534093},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1558773534094},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1558773534091},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1558773534094},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1558773534089},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1558773534092},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1558773534089},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1558773534090},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1558773534092},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1558773533899},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1558773533928},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1558773533924},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1558773533921},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1558773533933},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1558773533926},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1558773533921},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1558773533920},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1558773533926},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1558773533930},{"_id":"themes/next/source/images/headImage.jpg","hash":"22fe9c31602ffe60aacb9f219937e6e63f970377","modified":1558773533936},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1558773533931},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1558773533928},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1558773533928},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1558773533934},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558773533927},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1558773533927},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558773533918},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1558773533946},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1558773533922},{"_id":"themes/next/source/js/clicklove.js","hash":"effa770d8085f7e7fb903de217ce521dff163780","modified":1558773533939},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1558773533929},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1558773533945},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1558773533942},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1558773533941},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1558773533943},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1558773533944},{"_id":"themes/next/source/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1558773533944},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1558773533942},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1558773533941},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1558773533940},{"_id":"source/image/jvm/jvm-memory.png","hash":"861c58b56291e4f60e67fc431770d80df6a3e66b","modified":1558026568130},{"_id":"source/image/rabbit/mq-direct.jpg","hash":"52b9ba59d94f1976ffe4aa592daf7c695b1a6121","modified":1543424560234},{"_id":"source/image/rabbit/mq-topic.jpg","hash":"d94534e876eea78ee4a4a22586fa35a4e136b93b","modified":1543425218792},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558773533915},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558773533916},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558773533914},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558773533898},{"_id":"themes/next/source/images/addwechat.jpg","hash":"5ad41d062bad9130b079b864e59148fbe8561984","modified":1558802898537},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"e43cbf5fd13e86d6176a18458e8345b27e5320b7","modified":1558773533935},{"_id":"source/image/rabbit/mq-yunzhuanliucheng.jpg","hash":"d310f1143d9191c985d5b296d31152da42f725e3","modified":1543422975284},{"_id":"themes/next/.git/objects/2a/a85a684077167566576594d5e5963d4a5fb233","hash":"c4fff3d84fce8fcb9ef438b74baf28d06f20dfac","modified":1558773534131},{"_id":"themes/next/.git/objects/83/93df43c1a6fffc27596c2bd2f31870c6d46441","hash":"50d12dcb5555c319321a065cb25e22f811c0cf0e","modified":1558773534137},{"_id":"themes/next/.git/objects/3b/c66030efb399ceedbd5093da23296f3558f913","hash":"8ddbd4d19781cbf0bf5e9af434f296a77c5c7684","modified":1558773534115},{"_id":"themes/next/.git/objects/cd/f22df1d823e6ead3ba2c4fadc6717a8a2af817","hash":"89010b32a9b14871c346f6f5c82ff032cf98058d","modified":1558773534132},{"_id":"themes/next/.git/objects/df/85bc02994d88fc15207c27d9fccd9ab44d840d","hash":"1d22bd36d8365130cb900428afa8eebf3bb93d6f","modified":1558773534115},{"_id":"themes/next/.git/objects/c6/4e3a458402b5e35f429d9c34b23d2fb17a58d1","hash":"52afc7d435c867a546e0077d229af4e5df5f50f2","modified":1558773534118},{"_id":"themes/next/.git/objects/ed/11a1959c68df3f95b3f7e61701f5ca15ff1d15","hash":"1c990a9835c27ec303a1ddf21001adf4547ca38e","modified":1558773534117},{"_id":"themes/next/.git/objects/e9/10ecae0e95579601664badc8538ef1bd5da0eb","hash":"52d335604ab8c1f27c36448effc09df01766a69e","modified":1558773534134},{"_id":"themes/next/.git/objects/f6/72b00bbdd0efc644978c4353e7207b8dabb6b3","hash":"75306104a7a2e1a9cbc1389d16f288bedfc067df","modified":1558773534133},{"_id":"themes/next/.git/objects/85/c604138d430d4be2ab9a1f2d9983bf39cf9fca","hash":"a31783da49cafab99eeb587401d1a28e988e3228","modified":1558773534138},{"_id":"themes/next/.git/refs/heads/master","hash":"b10714c9a553f2bca2b4861425e55e9f339cdfb4","modified":1558773534155},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1558773533853},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1558773533853},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"d8d728febeb5102887b78e76089a54e8fb1e1a3b","modified":1558773533820},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1558773533821},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1558852245193},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1558851902518},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1558851793047},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"7d86096f676e365985e9df81a72825f5358ae50c","modified":1558852240504},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1558852242136},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1558851810431},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1558773533815},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1558852238271},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1558773533816},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1558773533817},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1558773533818},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1558773533815},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1558773533814},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1558773533819},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1558773533817},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"755cc4b2edb5f19e9f6733fe7d44e9bc96e08f35","modified":1558851292392},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1558851363876},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1558773533827},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1558773533801},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1558773533809},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1558773533802},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1558773533803},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1558773533802},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1558773533848},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1558773533845},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1558773533848},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1558773533844},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1558773533850},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1558773533847},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1558773533849},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1558773533844},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1558773533851},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1558773533846},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1558773533850},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1558773533848},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1558773533849},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1558773533843},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1558773533832},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1558773533829},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1558773533831},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1558773533831},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1558773533830},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1558773533829},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1558773533832},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1558773533838},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1558773533830},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1558773533837},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1558773533838},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1558773533840},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1558773533839},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1558773533839},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"242e6772eae13fbc3287ea66637fa7628c40c828","modified":1558805782807},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1558773533916},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"bb744c9264e8e79ae96431a5463f65fe8de5828a","modified":1558773533916},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1558773533915},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1558773533898},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d0e97b205d3320421c380f2eee445457430c8152","modified":1558773533897},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"443ff7b428fdedb85dab737c80b774360308b972","modified":1558773533896},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1558773533896},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1558773533897},{"_id":"themes/next/source/images/alipay.jpg","hash":"6f0b5f75575300e4387a3e83a7fccf271e4cf691","modified":1558773533932},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1558773533939},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1558773534046},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1558773533938},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1558773534045},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1558773534040},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1558773534044},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1558773534047},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"f151bb5ba4a2cd334061bac27a1a155969b62cdb","modified":1558773533953},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"75dee2bb4796ca66693831d769d9a105eed8c290","modified":1558773533949},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558773533948},{"_id":"themes/next/source/lib/needsharebutton/README.md","hash":"46bb223bdf714a47a1449666f4f70556447786d1","modified":1558773533949},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558773534035},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558773534036},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558773534036},{"_id":"themes/next/.git/objects/46/39a1f9664da5a15ccbc8f2ed8fc2a744145a9d","hash":"7910ff69b26d44f5b9ffeb8d5e898c50dbac7b1c","modified":1558773534136},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558773534034},{"_id":"themes/next/.git/objects/fc/840adb6e7426dbd4fbcf10d79d60ae1bc27f45","hash":"74ca2be98568365fbd39543b952d850d21826589","modified":1558773534116},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0932e61761099a1dd8fb76b914870ee32e1056e1","modified":1558773534142},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1558773534157},{"_id":"themes/next/.git/objects/pack/pack-0847a38cebb5c57e3d2294813d627af418d8ec46.idx","hash":"3ae0c6f4bc788f37141cd88fea45db1e79846a8a","modified":1558773534128},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"7729491514f8ccdf96777de8f71420e6873c5423","modified":1558773533876},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1558773533877},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1558773533877},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"8175b9a275d04718f6caf6dc6ae483035ad71b0c","modified":1558773533882},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1558773533861},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1558773533877},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1558773533881},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1558773533881},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1558773533894},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1558773533857},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1558773533857},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"bb9b753d3cc3a816340bd697512a83e757f907fb","modified":1558773533860},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1558773533859},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1558773533861},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1558773533860},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1558773533906},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1558773533913},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1558773533911},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1558773533914},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1558773533914},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1558773533911},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1558773533913},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1558773533910},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1558773533904},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1558773533901},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1558773533902},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1558773533909},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1558773533906},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1558773533904},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1558773533908},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1558773533908},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1558773533907},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1558773533908},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1558773533902},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1558773534043},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1558773534043},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1558773534042},{"_id":"themes/next/source/lib/needsharebutton/.git/FETCH_HEAD","hash":"6d52f3ef3989e94b912b4f9530cf6d75752da9cf","modified":1558773534033},{"_id":"themes/next/source/lib/needsharebutton/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558773534001},{"_id":"themes/next/source/lib/needsharebutton/.git/ORIG_HEAD","hash":"414a643b841a756253dc0c2472b2f7a6e9b14778","modified":1558773533955},{"_id":"themes/next/source/lib/needsharebutton/.git/config","hash":"3bd2fc1363cc36b469c252931084daa7b046d52a","modified":1558773533956},{"_id":"themes/next/source/lib/needsharebutton/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558773534013},{"_id":"themes/next/source/lib/needsharebutton/.git/index","hash":"12e0a8f420b6a97843b7abb2ba8e5fbfef650cdd","modified":1558773534030},{"_id":"themes/next/source/lib/needsharebutton/.git/packed-refs","hash":"018b03f9d6b9a0c7174e34007d73f0e086898663","modified":1558773534031},{"_id":"themes/next/source/lib/needsharebutton/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1558773533951},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1558773534048},{"_id":"source/image/docker/docker-util.jpg","hash":"930f68cef819c8ca5ad9f55f45f19c36431ddaa1","modified":1557930096099},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558773534038},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0932e61761099a1dd8fb76b914870ee32e1056e1","modified":1558773534143},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1558773534050},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1558773533867},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1558773533892},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1558773533892},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1558773533891},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1558773533890},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1558773533891},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1558773533891},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1558773533876},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1558773533875},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1558773533875},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1558773533889},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1558773533889},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1558773533889},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1558773533888},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1558773533888},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1558773533887},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1558773533888},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1558773533872},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1558773533874},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1558773533873},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1558773533874},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1558773533871},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1558773533869},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1558773533870},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1558773533873},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1558773533868},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1558773533868},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1558773533871},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1558773533872},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1558773533870},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"3aae9df21cf171accb93c9352842e0ee6445d23d","modified":1558773533871},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1558773533874},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1558773533869},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1558773533880},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1558773533878},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1558773533880},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1558773533879},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1558773533880},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1558773533878},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1558773533879},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1558773533878},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1558773533862},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1558773533864},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1558773533863},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1558773533866},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1558773533863},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1558773533865},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"e425433b81da2714d6fa17c138e1fa750ad810ec","modified":1558773533866},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1558773533865},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1558773533864},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1558773533883},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1558773533883},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1558773533885},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1558773533863},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1558773533886},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1558773533886},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1558773533885},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1558773533882},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1558773533887},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1558773533884},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1558773533883},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1558773533912},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558773533910},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558773533900},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1558773534017},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558773534014},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1558773534018},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558773534022},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1558773534023},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1558773534016},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1558773534023},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1558773534015},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1558773534019},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1558773534024},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1558773534020},{"_id":"themes/next/source/lib/needsharebutton/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558773534002},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/HEAD","hash":"d8a5db3a2b83858e0425d978819836d105de4d09","modified":1558773534003},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1558773534051},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/0c/97d452adf1f9aa29468c10dc5aca581c40d35d","hash":"8247b73544627904f1c49b2d48e8a5ca24c49d94","modified":1558773533959},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/10/7997cd9f09e787407d6a579bb0ead61ba0c44e","hash":"a7bb772e0f541b9f0c5e4682f88881faef7d2b87","modified":1558773533976},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1558773533959},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/1f/9bfac8ac3b22f100c85bb82877c7af973f011a","hash":"74f0088767a48b5b8874bb5e8953604058233105","modified":1558773533973},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/37/e84bbc9c853d9abc39b18361a67d09402a9fec","hash":"330ba4772d5feaf23bd85aa38be94a1b254cac8a","modified":1558773533984},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/35/b5765a89abcc57439ad0e7b60dc67225e76570","hash":"b020fa3885506f64651a4a63d42b32c7874a072a","modified":1558773533960},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1558773533978},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/34/73a532c76c2ec7eaafc9bba9bc37851cb5a349","hash":"991d675a7982030fef4e8103ecdf717e2e153143","modified":1558773533964},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/40/a8a2ab6075fb13a489aa2585f55518e03440cc","hash":"40a879b454bae72ba30ab918e7cbb3dee04c45c4","modified":1558773534000},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/3c/673c6e10073f4cf715526c3ab99edf7461b267","hash":"9362453f89eefcc6988cd3a39548c90402f616a8","modified":1558773533962},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/41/f2acffe002ce9fa94904bdbb105c62697c08bf","hash":"6aca807e726bf9bbffdab1b97cae1132dd3570c8","modified":1558773533995},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/46/66508d485306f48ac866f4a0eded896b01adb0","hash":"a37ee79e50b83b3a5a7f736cfc6b8eafc210ebca","modified":1558773533993},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/49/c5d2b0c8ded3a5465f659504d5654759b45ce9","hash":"133f2916c8dd706d9ea44203f671d42abed6d183","modified":1558773533998},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/49/e08108a89c7bf4f1e03fdf9d23fa1841ddc40a","hash":"3a32bfdf83debfa739a05a12c77c9c8c9fad6baf","modified":1558773533999},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/51/e4a626dc726971ce48b9d29531ec4fa11ab93c","hash":"8bc98d2bd4f224fbba56e0339ba9e1abfbd0e676","modified":1558773533963},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/63/ce5669cda10d9c600a65df1c509155a9dce354","hash":"e7eefb05c18a77c99c1044dc53cc0b33bc4bc723","modified":1558773533987},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/72/38adfc9f0b65e7dd8e7eb39b53fd8dbd05728d","hash":"67f5fb35cbbb4625e049368c8ef7fef03e21315d","modified":1558773533977},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/77/ad104add4d67baba615eccfcc7876bdf60256f","hash":"787497f0b2a074be846ae940ba58475a830690d4","modified":1558773533996},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1558773533961},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/77/b1d62571d3374de0902fdf14c3fd925263c295","hash":"f0d087a62296e14072d250d0db5bfeb01e3e0f4c","modified":1558773533997},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/80/8d63b637e30043e74f5150047c232028ffa3bf","hash":"c7cd9201316a2cf66b63cd0f520dc827912d8be8","modified":1558773533974},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/8a/e95435136e887fc30227f9fdab68ff72689315","hash":"f1225345f08eb5abbf849a40efdec16839268c9b","modified":1558773533975},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/91/85a82ce05e0c4c6287e3ce6c31d79049a6c5de","hash":"d40af8a4f325b8b2d6eeb1f51497d2313aade46d","modified":1558773533982},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/99/ac01b3cae78a765c45566d5540596f71f0f9ed","hash":"394e54788569a0aef47f5c1867b7a617d314b677","modified":1558773533987},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/96/b1227c70e63f95b099993321043a2e05abdbea","hash":"d1f0885e3a68fdfc87e68e5ba6b60de116c3c7a5","modified":1558773533983},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9a/563a770314159840897f1852b05f183911ae71","hash":"0949c3c36849e955c84cc66f544fbeeca266ae19","modified":1558773533981},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9c/850e429959950cfd82a30843ad130dfd24331a","hash":"001c3423e8a4bf2ccd3e0ad3080d5cace613d42c","modified":1558773533964},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9f/e80d3fee719ad9953c0e8e8dec472bb727d17d","hash":"09516f8a3f62a9e286f3ac1985969d0913d53271","modified":1558773533980},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/a1/5c0ab3f7ca37d06a7a3dc28f6375ac8fcaffe1","hash":"3aa24fa2254a71f9b408a01ad7154cc1cbf7cde6","modified":1558773533991},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/a7/df932fbaa27cde88a4e1b6b222e445d24d88a9","hash":"65ed1fff3d6ea0eed90011b6c9c892381c0b4837","modified":1558773533990},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/aa/f4e31e1d4ea073ad9f6926e146fea3c6d8b423","hash":"7c412d2a2243907dff0a1940f13a539675d76428","modified":1558773533990},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/b2/8efd888e853a00d7c8ba8fc827ddb0edb6668b","hash":"8c17e115b7c8a860650191fc1b74e7861ab0f7b9","modified":1558773533965},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/b4/8a9ad41dbacf220607a3854e23f2136ced96fb","hash":"81ee83b48edb7df4f08573cdd14200be5f62128a","modified":1558773533967},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/e3/096992403adfd6ad955585273915bdeae3dc32","hash":"356ee4003511e7f9c9c4badd52af674adceec2d9","modified":1558773533969},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/bf/839b1a2dfd79af314506907196f817d1d540b0","hash":"196a52782c02c03b787cca10ca172a6be6ddb8e0","modified":1558773533989},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/da/3a5548a43813122821bf626fdd51a15f89afe3","hash":"1d8c39585806e5c7b051eb58d566a399b0e77006","modified":1558773533966},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/eb/83c3470835cc056d65fbaec5ba59fc01a341c6","hash":"a48447a56db4dce3b2ce99fcfd4cbb5d5902877f","modified":1558773533967},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/ec/efb0da782cd6bdfbd7aec14e8e186c2010beb3","hash":"002214074d8349ca4765414ee39cbeb0a3a443d6","modified":1558773533971},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/e7/169e14c00f267f49acb69c1ba41dc9a3229d36","hash":"2b79081ef52aec5ca3896894e25e330aed84ac6f","modified":1558773533992},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/ec/fd49187c43c81ad64c250eac1d63893c073e38","hash":"0e6f432ab1ec9a413655267ad3f62205e2e71f99","modified":1558773533971},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/f5/a400ecc881307dc0faa24170ae0a9bcbba861c","hash":"4b82935622bd12041cf7665503ae8e060705e7fd","modified":1558773533968},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/f5/fc2c417f7156d25437bbe069fa10645b4c3a63","hash":"377e0fce80cab14d6966371260926ee78da12b09","modified":1558773533969},{"_id":"themes/next/source/lib/needsharebutton/.git/refs/heads/master","hash":"414a643b841a756253dc0c2472b2f7a6e9b14778","modified":1558773534026},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/refs/heads/master","hash":"d8a5db3a2b83858e0425d978819836d105de4d09","modified":1558773534007},{"_id":"themes/next/source/lib/needsharebutton/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1558773534028},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/refs/remotes/origin/HEAD","hash":"d8a5db3a2b83858e0425d978819836d105de4d09","modified":1558773534012},{"_id":"themes/next/.git/objects/pack/pack-0847a38cebb5c57e3d2294813d627af418d8ec46.pack","hash":"4da939dd7d2ac3cdd5c48a30d105d5b42ff10d30","modified":1558773534124}],"Category":[{"name":"消息队列","_id":"cjw4kin4r0003892nw9flyi93"},{"name":"docker","_id":"cjw4kinc8000d892nkqampmm4"},{"name":"java","_id":"cjw4kincf000n892n53cgruxi"}],"Data":[],"Page":[{"title":"关于","type":"about","layout":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ntype: about\nlayout: \"about\"\ncomments: false\n---","date":"2019-05-25T16:13:00.889Z","updated":"2019-05-25T16:13:00.889Z","path":"about/index.html","_id":"cjw4kin4m0000892n5ebt7z81","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\nlayout: \"categories\"\ncomments: false\n---","date":"2019-05-25T16:13:15.467Z","updated":"2019-05-25T16:13:15.467Z","path":"categories/index.html","_id":"cjw4kin4p0002892nzho70ntt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: tags\nlayout: \"tags\"\ncomments: false\n---","date":"2019-05-25T16:13:25.908Z","updated":"2019-05-25T16:13:25.908Z","path":"tags/index.html","_id":"cjw4kin4t0005892nw5w1xot7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Linux","date":"2018-04-18T17:23:16.000Z","tags":["Linux"],"categories":["Linux"],"notshow":true,"_content":"","source":"temp/Linux.md","raw":"---\ntitle: Linux\ndate: 2018-04-19 01:23:16\ntags: \n    - Linux\ncategories: \n    - Linux\nnotshow: true\n---\n","updated":"2019-05-25T17:13:34.015Z","path":"temp/Linux.html","comments":1,"layout":"page","_id":"cjw4kin4t0006892ncvu9d7qh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"RabbitMQ实战","date":"2018-11-27T12:31:16.000Z","_content":"![RabbitMQ](/image/rabbit/mq-login.jpg)\n# 1.消息中间件\n## 1.1 什么是消息中间\n`消息` (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、\nJSON 等，也可以很复杂，比如内嵌对象。\n\n`消息队列中间件` (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。\n\n消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:\n- `点对点` (P2P, Point-to-Point) 模式\n- `发布/订阅` (Pub/Sub) 模式。\n<!--more -->\n`点对点`是基于队列的，消息生产者发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的步传输成为可能。`发布订阅`定义了如何向一个内容节点发布和订阅消息，这个内容节点称为`主题`(topic)，`主题`可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而`消息订阅者`则从主题中订阅消息。`主题`使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。\n\n目前开源的消息中间件有很多，比较主流的有 `RabbitMQ`、 `Kafka`、 `ActiveMQ`、 `RocketMQ`等。\n\n## 1.2 消息中间件的作用\n消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用。总的来说，消息中间件的作用可以概括如下:\n### 1.2.1 `解耦`\n在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。\n\n### 1.2.2 `冗余〈存储)`\n有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。\n\n### 1.2.3 `扩展性`\n因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。\n\n### 1.2.4 `削峰`\n在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。\n\n### 1.2.5 `可恢复性`\n当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后进行处理。\n\n### 1.2.6 `顺序保证`\n在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。\n\n### 1.2.7 `缓冲`\n在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。\n\n### 1.2.8 `异步通信`\n在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。\n\n# 2.RabbitMQ入门\n## 2.1 RabbitMQ介绍\n`RabbitMQ`是采用`Erlang`语言实现`AMQP`(Advanced Message Queuing Protocol，高级消息\n队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。\n\nRabbitMQ主要是为了实现系统之间的`双向解耦`而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。\n\n`AMQP`是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是 **面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全**。\n\n## 2.2 RabbitMQ安装\n- 使用`docker`安装(3-management版本自带管理后台)\n```bash\n$ docker pull rabbitmq:3-management \n```\n- 启动RabbitMQ并且启动管理后台\n```bash\n$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management\n\n$ docker start rabbitmq\n```\n- 查看管理后台\n在浏览器打开 [http://localhost:15672/](http://localhost:15672/) 输入用户名:admin 密码:admin 可进入管理后台\n\n\n## 2.3 相关概念介绍\n### 2.3.1 生产者和消费者\n- `Producer`:生产者，就是投递消息的一方。\n生产者创建消息，然后发布到RabbitMQ中。消息一般可以包含2个部分:`消息体和标签(Label)`。消息体也可以称之为payload，在实际应用中，**消息体一般是一个带有业务逻辑结构的数据**，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ之后会根据标签把消息发送给感兴趣的消费者(Consumer)。\n\n- `Consumer`:消费者，就是接收消息的一方。\n消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload)在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。\n\n- `Broker`:消息中间件的服务节点。\n对于RabbitMQ来说，一个RabbitMQ Broker可以简单地看作一个`RabbitMQ服务节点`，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。\n\n**RabbitMQ运转流程**\n![RabbitMQ运转流程](/image/rabbit/mq-yunzhuanliucheng.jpg)\n\n### 2.3.2 交换器Exchange，路由RoutingKey，绑定Binding\n- `Exchange`:交换器\n![交换器](/image/rabbit/mq-exchange.jpg)\nMQ中我们暂时可以理解成 **生产者将消息投递到队列中**，但是实际上这个在RabbitMQ中不会发生。真实情况是，**生产者将消息发送到`Exchange(交换器)`，由交换器将消息路由到一个或者多个`队列`中。如果路由不到，或许会返回给生产者，或许直接丢弃**。\nRabbitMQ中的交换器有四种类型，下面将会一一介绍，并且会附上代码详细说明。\n\n- `RoutingKey`:路由键\n生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。\n\n- `Binding`:绑定\nRabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:\n![绑定](/image/rabbit/mq-banding.jpg)\n\n### 2.3.3 交换器类型\nRabbitMQ常用的交换器类型有`fanout`、`direct`、`topic`和`headers`这四种。AMQP协议里其实还提\n到另外两种类型:`System`和`自定义`，在这里就不作详细介绍了。\n#### 2.3.3.1 `fanout`\n就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：\n![fanout](/image/rabbit/mq-fanout.jpg)\n#### 2.3.3.2 `direct`(RabbitMQ默认的交换器类型)\ndirect类型的交换器路由规则也很简单，它会把消息路由到那些BindingKey和RoutingKey完全匹配的队列中。如下图：\n![direct](/image/rabbit/mq-direct.jpg)\n#### 2.3.3.3 topic\n上面讲到`direct类型`的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。`topic类型`的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:\n- RoutingKey为一个点号`.`分隔的字符串(被点号`.`分隔开的每一段独立的字符串称为一个单词)，如\"com.rabbitmq.client\"，\"java.util.concurrent\",\"com.hidden.client\"等\n- BindingKey也是点号`.`分隔\n- BindingKey中可以存在两种特殊字符串`*`和`#`，用于做模糊匹配，其中`*`用于匹配一个单词，`#`用于匹配多规格单词(可以是零个)。\n如下图：\n![topic](/image/rabbit/mq-topic.jpg)\n思考: \n1.路由建 \"com.rabbitmq.client\"会路由到哪一个队列？\n2.路由建 \"com.hidden.client\"会路由到哪一个队列？\n3.路由建 \"com.hidden.demo\"会路由到哪一个队列？\n4.路由建 \"java.util.concurrent\"会路由到哪一个队列？\n5.路由建 \"java.rabbitmq.demo\"会路由到哪一个队列？\n\n#### 2.3.3.4 headers(不常用)\n`headers类型`的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。**headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在** 所以对于headers类型交换器我们只需要了解即可，知道有这么个类型存在。\n\n\n## 2.4 交换器类型详解\n### 2.4.1 新建\n新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer\npom.xml\n```POM\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n  </dependency>\n```\nrabbit-producer/application.properties\n```\nserver.port=1180\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\nrabbit-producer/application.properties\n```\nserver.port=1181\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\n项目创建完成\n\n### 2.4.2 声明一个队列各个参数的意义\n- `name`: 队列的名称 字符串;\n- `durable`: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库;\n- `exclusive`: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。\n- `autoDelete`: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除\n- `arguments`: 队列中的消息什么时候会自动被删除？ 是一个Map<String, Object>，它有如下参数:\n   - \"x-message-ttl\": 1000  设置队列中的所有消息的生存周期\n   - \"x-expires\": 1000  当队列在指定的时间没有被访问就会被删除\n   - \"x-max-length\": 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉\n   - \"x-max-length-bytes\":  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小\n   - \"x-dead-letter-exchange\": \"\" 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉\n   - \"x-dead-letter-routing-key\": \"\"  将删除的消息推送到指定交换机的指定路由键的队列中去\n   - \"x-max-priority\":  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费\n   - \"x-queue-mode\": \"lazy\" 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中\n   - \"x-queue-master-locator\"\n\n### 2.4.3 fanout代码实现\n#### 2.4.3.1 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:35 PM\n */\n@Configuration\npublic class FanoutConfig {\n\n    // 声明一个队列，后面有很多属性\n    @Bean\n    public Queue fanoutQueue1(){\n        return new Queue(\"fanout.queue1\");\n    }\n\n    @Bean\n    public Queue fanoutQueue2(){\n        return new Queue(\"fanout.queue2\");\n    }\n\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange(\"fanout_exchange\");\n    }\n\n    @Bean\n    public Binding fanoutBinding1(){\n        return BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());\n    }\n\n    @Bean\n    public Binding fanoutBinding2(){\n        return BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());\n    }\n\n}\n```\n#### 2.4.3.2 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:40 PM\n */\n@Component\n@Slf4j\npublic class FanoutConsumer {\n\n    @RabbitListener(queues = \"fanout.queue1\")\n    @RabbitHandler\n    public void fanoutConsumer1(String msg){\n        log.info(\"1fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n\n    @RabbitListener(queues = \"fanout.queue2\")\n    @RabbitHandler\n    public void fanoutConsumer2(String msg){\n        log.info(\"2fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n}\n```\n#### 2.4.3.3 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class FanoutProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * fanout类型\n     * @param msg 消息内容\n     * @return 消息内容\n     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey\n     * 只是routingKey可以任意指定\n     */\n    @RequestMapping(\"/fanout/{msg}\")\n    public String fanoutProducer(@PathVariable(\"msg\") String msg){\n        log.info(\"fanout生产消息 msg:{}\", msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息\n        template.convertAndSend(\"fanout_exchange\",\"\", msg);\n        return msg;\n    }\n}\n```\n#### 2.4.3.4 测试\n分别启动这两个项目，在浏览器的路径上输入[http://localhost:1180/fanout/测试消息](http://localhost:1180/fanout/测试消息)，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。\n\n### 2.4.4 direct代码实现\n#### 2.4.4.1 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.direct;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author liuyi\n * @date 2018/11/29 1:40 AM\n */\n@Configuration\npublic class DirectConfig {\n\n    /**\n     * 定义两个队列\n     * @return\n     */\n    @Bean\n    public Queue directQueue1() {\n        return new Queue(\"direct.queue1\",true);\n    }\n\n    @Bean\n    public Queue directQueue2() {\n        return new Queue(\"direct.queue2\", true);\n    }\n\n    @Bean\n    public Queue directQueue3() {\n        Map<String, Object> map = new HashMap<>(16);\n        return new Queue(\"direct.queue3\",true,true, true, map);\n    }\n\n\n    /**\n     * 定义 exchange\n     * @return\n     */\n    @Bean\n    public DirectExchange directExchange() {\n        return new DirectExchange(\"direct_exchange\",true,true);\n    }\n\n    /**\n     * 队列1 绑定 exchange 并且设置routingKey为direct.1\n     * @return\n     */\n    @Bean\n    public Binding directBinding1(){\n        return BindingBuilder.bind(directQueue1()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n\n    /**\n     * 队列2 绑定 exchange 并且设置routingKey为direct.2\n     * @return\n     */\n    @Bean\n    public Binding directBinding2(){\n        return BindingBuilder.bind(directQueue2()).to(directExchange()).with(\"direct.routing.key2\");\n    }\n\n    @Bean\n    public Binding directBinding3(){\n        return BindingBuilder.bind(directQueue3()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n}\n```\n#### 2.4.4.2 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 2.4.4.3 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DirectProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * direct类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/direct/queue1/{msg}\")\n    public String directProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"direct_exchange\", \"direct.routing.key1\", msg);\n        return msg;\n    }\n\n    @RequestMapping(\"/direct/queue2/{msg}\")\n    public String directProducerTwo(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"mq-direct_exchange\", \"direct.routing.key2\", msg);\n        return msg;\n    }\n}\n```\n#### 2.4.4.4 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/direct/queue1/测试消息1 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可\n\n### 2.4.5 topic代码实现\n#### 2.4.5.1 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.topic;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/11/29 8:42 AM\n */\n@Configuration\npublic class TopicConfig {\n\n    /**\n     * 创建队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue topicQueue1() {\n        return new Queue(\"topic.queue1\", true);\n    }\n\n    @Bean\n    public Queue topicQueue2() {\n        return new Queue(\"topic.queue2\", true);\n    }\n\n    /**\n     * 创建交换器\n     */\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(\"topic_exchange\");\n    }\n\n    /**\n     * 绑定\n     */\n    @Bean\n    public Binding topicBinding1() {\n        return BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(\"*.jiafly.*\");\n    }\n\n    @Bean\n    public Binding topicBinding2() {\n        return BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(\"com.jiafly.*\");\n    }\n}\n```\n#### 2.4.5.2 在消费者项目中添加一个消息监听类\n```JAVA\n// 和fanout类型相同，只是监听的队列不同而已\n```\n#### 2.4.5.3 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class TopicProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * topic类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/topic/{msg}\")\n    public String topicProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"topic:生产消息:\" + msg);\n        template.convertAndSend(\"topic_exchange\", \"com.jiafly.test\", msg);\n        return msg;\n    }\n}\n```\n#### 2.4.5.4 测试\n分别启动两个项目，在浏览器的路径上输入[http://localhost:1180/topic/测试消息](http://localhost:1180/topic/测试消息) ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用`*`或者`#`表示\n\n\n## 2.5 延时队列\n### 2.5.1 延时队列能做什么\n- 订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。\n- 短信通知：下单成功后 60s 之后给用户发送短信通知。\n- 失败重试：业务操作失败后，间隔一定的时间进行失败重试\n\n这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。\n\n在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。\n![延时队列](/image/rabbit/delay-mq.jpg)\n### 2.5.2 死信交换器DLX(Dead-Letter-Exchange)\nDLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。\n\nRouter: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.\n\n具体代码实现:\n#### 2.5.2.1 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\n\n/**\n * @author liuyi\n * @date 2018/12/2 12:44 AM\n */\n@Configuration\npublic class DelayConfig {\n\n    /**\n     * 定义一个交换机\n     *\n     * @return\n     */\n    @Bean\n    public DirectExchange delayExchange() {\n        return new DirectExchange(\"delay_exchange\", true, false);\n    }\n\n    /**\n     * 转发队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue routerQueue() {\n        return new Queue(\"router.queue\", true, false, false);\n    }\n\n    /**\n     * 转发队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding routerBinding() {\n        return BindingBuilder.bind(routerQueue()).to(delayExchange()).with(\"router.routing.key\");\n    }\n\n\n    /**\n     * 死信队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue deadLetterQueue() {\n        HashMap<String, Object> arguments = new HashMap(16);\n        arguments.put(\"x-dead-letter-exchange\", \"delay_exchange\");\n        arguments.put(\"x-dead-letter-routing-key\", \"router.routing.key\");\n        return new Queue(\"dead.letter.queue\", true, false, false, arguments);\n    }\n\n\n    /**\n     * 死信队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding deadLetterBinding() {\n        return BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(\"dead.letter.routing.key\");\n    }\n}\n```\n#### 2.5.2.2 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/3 6:13 PM\n */\n@Component\n@Slf4j\npublic class DelayConsumer {\n\n    @RabbitListener(queues = \"router.queue\")\n    @RabbitHandler\n    public void delayConsumer(String msg) {\n        log.info(\"delay.queue1接收消息:{}\", msg);\n    }\n}\n```\n#### 2.5.2.3 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.amqp.support.converter.AbstractJavaTypeMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/12/3 7:17 PM\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DelayProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * 延迟队列\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/delay/{msg}\")\n    public String delayProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"delay:生产消息:\" + msg);\n        template.convertAndSend(\"delay_exchange\", \"dead.letter.routing.key\", msg, message -> {\n            message.getMessageProperties().setExpiration(30 * 1000 + \"\");\n            return message;\n        });\n        return msg;\n    }\n}\n```\n#### 2.5.2.4 测试\n分别启动两个项目，在浏览器的路径上输入[http://localhost:1180/delay/测试消息](http://localhost:1180/delay/测试消息)，就可在消费者项目中看到打印的信息。30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。\n\n\n## 2.6 消息的持久化\n为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。\n创建时候的参数:\n- `durable` \n是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 \n- `execulusive` \n表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable \n- `autoDelete` \n当没有生成者/消费者使用此队列时，此队列会被自动删除。 \n(即当最后一个消费者退订后即被删除)\n\n\n**设置消息持久化必须先设置队列持久化**，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。`消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的`。其实在前面就已经使用持久化了。我们在管理后台去看一下。\n\n\n## 2.7 消息的确认与拒绝\n消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：\n- `自动确认模式`:\n当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。\n\n- `显式确认模式`:\n消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息\n\n如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间。\n\n\n\n","source":"_posts/RabbitMQ.md","raw":"---\ntitle: RabbitMQ实战\ndate: 2018-11-27 20:31:16\ntags:\n    - RabbitMQ\n    - 消息队列\ncategories: \n    - 消息队列\n---\n![RabbitMQ](/image/rabbit/mq-login.jpg)\n# 1.消息中间件\n## 1.1 什么是消息中间\n`消息` (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、\nJSON 等，也可以很复杂，比如内嵌对象。\n\n`消息队列中间件` (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。\n\n消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:\n- `点对点` (P2P, Point-to-Point) 模式\n- `发布/订阅` (Pub/Sub) 模式。\n<!--more -->\n`点对点`是基于队列的，消息生产者发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的步传输成为可能。`发布订阅`定义了如何向一个内容节点发布和订阅消息，这个内容节点称为`主题`(topic)，`主题`可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而`消息订阅者`则从主题中订阅消息。`主题`使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。\n\n目前开源的消息中间件有很多，比较主流的有 `RabbitMQ`、 `Kafka`、 `ActiveMQ`、 `RocketMQ`等。\n\n## 1.2 消息中间件的作用\n消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用。总的来说，消息中间件的作用可以概括如下:\n### 1.2.1 `解耦`\n在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。\n\n### 1.2.2 `冗余〈存储)`\n有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。\n\n### 1.2.3 `扩展性`\n因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。\n\n### 1.2.4 `削峰`\n在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。\n\n### 1.2.5 `可恢复性`\n当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后进行处理。\n\n### 1.2.6 `顺序保证`\n在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。\n\n### 1.2.7 `缓冲`\n在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。\n\n### 1.2.8 `异步通信`\n在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。\n\n# 2.RabbitMQ入门\n## 2.1 RabbitMQ介绍\n`RabbitMQ`是采用`Erlang`语言实现`AMQP`(Advanced Message Queuing Protocol，高级消息\n队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。\n\nRabbitMQ主要是为了实现系统之间的`双向解耦`而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。\n\n`AMQP`是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是 **面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全**。\n\n## 2.2 RabbitMQ安装\n- 使用`docker`安装(3-management版本自带管理后台)\n```bash\n$ docker pull rabbitmq:3-management \n```\n- 启动RabbitMQ并且启动管理后台\n```bash\n$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management\n\n$ docker start rabbitmq\n```\n- 查看管理后台\n在浏览器打开 [http://localhost:15672/](http://localhost:15672/) 输入用户名:admin 密码:admin 可进入管理后台\n\n\n## 2.3 相关概念介绍\n### 2.3.1 生产者和消费者\n- `Producer`:生产者，就是投递消息的一方。\n生产者创建消息，然后发布到RabbitMQ中。消息一般可以包含2个部分:`消息体和标签(Label)`。消息体也可以称之为payload，在实际应用中，**消息体一般是一个带有业务逻辑结构的数据**，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ之后会根据标签把消息发送给感兴趣的消费者(Consumer)。\n\n- `Consumer`:消费者，就是接收消息的一方。\n消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload)在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。\n\n- `Broker`:消息中间件的服务节点。\n对于RabbitMQ来说，一个RabbitMQ Broker可以简单地看作一个`RabbitMQ服务节点`，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。\n\n**RabbitMQ运转流程**\n![RabbitMQ运转流程](/image/rabbit/mq-yunzhuanliucheng.jpg)\n\n### 2.3.2 交换器Exchange，路由RoutingKey，绑定Binding\n- `Exchange`:交换器\n![交换器](/image/rabbit/mq-exchange.jpg)\nMQ中我们暂时可以理解成 **生产者将消息投递到队列中**，但是实际上这个在RabbitMQ中不会发生。真实情况是，**生产者将消息发送到`Exchange(交换器)`，由交换器将消息路由到一个或者多个`队列`中。如果路由不到，或许会返回给生产者，或许直接丢弃**。\nRabbitMQ中的交换器有四种类型，下面将会一一介绍，并且会附上代码详细说明。\n\n- `RoutingKey`:路由键\n生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。\n\n- `Binding`:绑定\nRabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:\n![绑定](/image/rabbit/mq-banding.jpg)\n\n### 2.3.3 交换器类型\nRabbitMQ常用的交换器类型有`fanout`、`direct`、`topic`和`headers`这四种。AMQP协议里其实还提\n到另外两种类型:`System`和`自定义`，在这里就不作详细介绍了。\n#### 2.3.3.1 `fanout`\n就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：\n![fanout](/image/rabbit/mq-fanout.jpg)\n#### 2.3.3.2 `direct`(RabbitMQ默认的交换器类型)\ndirect类型的交换器路由规则也很简单，它会把消息路由到那些BindingKey和RoutingKey完全匹配的队列中。如下图：\n![direct](/image/rabbit/mq-direct.jpg)\n#### 2.3.3.3 topic\n上面讲到`direct类型`的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。`topic类型`的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:\n- RoutingKey为一个点号`.`分隔的字符串(被点号`.`分隔开的每一段独立的字符串称为一个单词)，如\"com.rabbitmq.client\"，\"java.util.concurrent\",\"com.hidden.client\"等\n- BindingKey也是点号`.`分隔\n- BindingKey中可以存在两种特殊字符串`*`和`#`，用于做模糊匹配，其中`*`用于匹配一个单词，`#`用于匹配多规格单词(可以是零个)。\n如下图：\n![topic](/image/rabbit/mq-topic.jpg)\n思考: \n1.路由建 \"com.rabbitmq.client\"会路由到哪一个队列？\n2.路由建 \"com.hidden.client\"会路由到哪一个队列？\n3.路由建 \"com.hidden.demo\"会路由到哪一个队列？\n4.路由建 \"java.util.concurrent\"会路由到哪一个队列？\n5.路由建 \"java.rabbitmq.demo\"会路由到哪一个队列？\n\n#### 2.3.3.4 headers(不常用)\n`headers类型`的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。**headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在** 所以对于headers类型交换器我们只需要了解即可，知道有这么个类型存在。\n\n\n## 2.4 交换器类型详解\n### 2.4.1 新建\n新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer\npom.xml\n```POM\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n  </dependency>\n```\nrabbit-producer/application.properties\n```\nserver.port=1180\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\nrabbit-producer/application.properties\n```\nserver.port=1181\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\n项目创建完成\n\n### 2.4.2 声明一个队列各个参数的意义\n- `name`: 队列的名称 字符串;\n- `durable`: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库;\n- `exclusive`: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。\n- `autoDelete`: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除\n- `arguments`: 队列中的消息什么时候会自动被删除？ 是一个Map<String, Object>，它有如下参数:\n   - \"x-message-ttl\": 1000  设置队列中的所有消息的生存周期\n   - \"x-expires\": 1000  当队列在指定的时间没有被访问就会被删除\n   - \"x-max-length\": 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉\n   - \"x-max-length-bytes\":  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小\n   - \"x-dead-letter-exchange\": \"\" 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉\n   - \"x-dead-letter-routing-key\": \"\"  将删除的消息推送到指定交换机的指定路由键的队列中去\n   - \"x-max-priority\":  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费\n   - \"x-queue-mode\": \"lazy\" 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中\n   - \"x-queue-master-locator\"\n\n### 2.4.3 fanout代码实现\n#### 2.4.3.1 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:35 PM\n */\n@Configuration\npublic class FanoutConfig {\n\n    // 声明一个队列，后面有很多属性\n    @Bean\n    public Queue fanoutQueue1(){\n        return new Queue(\"fanout.queue1\");\n    }\n\n    @Bean\n    public Queue fanoutQueue2(){\n        return new Queue(\"fanout.queue2\");\n    }\n\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange(\"fanout_exchange\");\n    }\n\n    @Bean\n    public Binding fanoutBinding1(){\n        return BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());\n    }\n\n    @Bean\n    public Binding fanoutBinding2(){\n        return BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());\n    }\n\n}\n```\n#### 2.4.3.2 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:40 PM\n */\n@Component\n@Slf4j\npublic class FanoutConsumer {\n\n    @RabbitListener(queues = \"fanout.queue1\")\n    @RabbitHandler\n    public void fanoutConsumer1(String msg){\n        log.info(\"1fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n\n    @RabbitListener(queues = \"fanout.queue2\")\n    @RabbitHandler\n    public void fanoutConsumer2(String msg){\n        log.info(\"2fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n}\n```\n#### 2.4.3.3 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class FanoutProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * fanout类型\n     * @param msg 消息内容\n     * @return 消息内容\n     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey\n     * 只是routingKey可以任意指定\n     */\n    @RequestMapping(\"/fanout/{msg}\")\n    public String fanoutProducer(@PathVariable(\"msg\") String msg){\n        log.info(\"fanout生产消息 msg:{}\", msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息\n        template.convertAndSend(\"fanout_exchange\",\"\", msg);\n        return msg;\n    }\n}\n```\n#### 2.4.3.4 测试\n分别启动这两个项目，在浏览器的路径上输入[http://localhost:1180/fanout/测试消息](http://localhost:1180/fanout/测试消息)，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。\n\n### 2.4.4 direct代码实现\n#### 2.4.4.1 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.direct;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author liuyi\n * @date 2018/11/29 1:40 AM\n */\n@Configuration\npublic class DirectConfig {\n\n    /**\n     * 定义两个队列\n     * @return\n     */\n    @Bean\n    public Queue directQueue1() {\n        return new Queue(\"direct.queue1\",true);\n    }\n\n    @Bean\n    public Queue directQueue2() {\n        return new Queue(\"direct.queue2\", true);\n    }\n\n    @Bean\n    public Queue directQueue3() {\n        Map<String, Object> map = new HashMap<>(16);\n        return new Queue(\"direct.queue3\",true,true, true, map);\n    }\n\n\n    /**\n     * 定义 exchange\n     * @return\n     */\n    @Bean\n    public DirectExchange directExchange() {\n        return new DirectExchange(\"direct_exchange\",true,true);\n    }\n\n    /**\n     * 队列1 绑定 exchange 并且设置routingKey为direct.1\n     * @return\n     */\n    @Bean\n    public Binding directBinding1(){\n        return BindingBuilder.bind(directQueue1()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n\n    /**\n     * 队列2 绑定 exchange 并且设置routingKey为direct.2\n     * @return\n     */\n    @Bean\n    public Binding directBinding2(){\n        return BindingBuilder.bind(directQueue2()).to(directExchange()).with(\"direct.routing.key2\");\n    }\n\n    @Bean\n    public Binding directBinding3(){\n        return BindingBuilder.bind(directQueue3()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n}\n```\n#### 2.4.4.2 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 2.4.4.3 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DirectProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * direct类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/direct/queue1/{msg}\")\n    public String directProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"direct_exchange\", \"direct.routing.key1\", msg);\n        return msg;\n    }\n\n    @RequestMapping(\"/direct/queue2/{msg}\")\n    public String directProducerTwo(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"mq-direct_exchange\", \"direct.routing.key2\", msg);\n        return msg;\n    }\n}\n```\n#### 2.4.4.4 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/direct/queue1/测试消息1 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可\n\n### 2.4.5 topic代码实现\n#### 2.4.5.1 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.topic;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/11/29 8:42 AM\n */\n@Configuration\npublic class TopicConfig {\n\n    /**\n     * 创建队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue topicQueue1() {\n        return new Queue(\"topic.queue1\", true);\n    }\n\n    @Bean\n    public Queue topicQueue2() {\n        return new Queue(\"topic.queue2\", true);\n    }\n\n    /**\n     * 创建交换器\n     */\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(\"topic_exchange\");\n    }\n\n    /**\n     * 绑定\n     */\n    @Bean\n    public Binding topicBinding1() {\n        return BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(\"*.jiafly.*\");\n    }\n\n    @Bean\n    public Binding topicBinding2() {\n        return BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(\"com.jiafly.*\");\n    }\n}\n```\n#### 2.4.5.2 在消费者项目中添加一个消息监听类\n```JAVA\n// 和fanout类型相同，只是监听的队列不同而已\n```\n#### 2.4.5.3 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class TopicProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * topic类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/topic/{msg}\")\n    public String topicProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"topic:生产消息:\" + msg);\n        template.convertAndSend(\"topic_exchange\", \"com.jiafly.test\", msg);\n        return msg;\n    }\n}\n```\n#### 2.4.5.4 测试\n分别启动两个项目，在浏览器的路径上输入[http://localhost:1180/topic/测试消息](http://localhost:1180/topic/测试消息) ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用`*`或者`#`表示\n\n\n## 2.5 延时队列\n### 2.5.1 延时队列能做什么\n- 订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。\n- 短信通知：下单成功后 60s 之后给用户发送短信通知。\n- 失败重试：业务操作失败后，间隔一定的时间进行失败重试\n\n这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。\n\n在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。\n![延时队列](/image/rabbit/delay-mq.jpg)\n### 2.5.2 死信交换器DLX(Dead-Letter-Exchange)\nDLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。\n\nRouter: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.\n\n具体代码实现:\n#### 2.5.2.1 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\n\n/**\n * @author liuyi\n * @date 2018/12/2 12:44 AM\n */\n@Configuration\npublic class DelayConfig {\n\n    /**\n     * 定义一个交换机\n     *\n     * @return\n     */\n    @Bean\n    public DirectExchange delayExchange() {\n        return new DirectExchange(\"delay_exchange\", true, false);\n    }\n\n    /**\n     * 转发队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue routerQueue() {\n        return new Queue(\"router.queue\", true, false, false);\n    }\n\n    /**\n     * 转发队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding routerBinding() {\n        return BindingBuilder.bind(routerQueue()).to(delayExchange()).with(\"router.routing.key\");\n    }\n\n\n    /**\n     * 死信队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue deadLetterQueue() {\n        HashMap<String, Object> arguments = new HashMap(16);\n        arguments.put(\"x-dead-letter-exchange\", \"delay_exchange\");\n        arguments.put(\"x-dead-letter-routing-key\", \"router.routing.key\");\n        return new Queue(\"dead.letter.queue\", true, false, false, arguments);\n    }\n\n\n    /**\n     * 死信队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding deadLetterBinding() {\n        return BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(\"dead.letter.routing.key\");\n    }\n}\n```\n#### 2.5.2.2 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/3 6:13 PM\n */\n@Component\n@Slf4j\npublic class DelayConsumer {\n\n    @RabbitListener(queues = \"router.queue\")\n    @RabbitHandler\n    public void delayConsumer(String msg) {\n        log.info(\"delay.queue1接收消息:{}\", msg);\n    }\n}\n```\n#### 2.5.2.3 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.amqp.support.converter.AbstractJavaTypeMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/12/3 7:17 PM\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DelayProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * 延迟队列\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/delay/{msg}\")\n    public String delayProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"delay:生产消息:\" + msg);\n        template.convertAndSend(\"delay_exchange\", \"dead.letter.routing.key\", msg, message -> {\n            message.getMessageProperties().setExpiration(30 * 1000 + \"\");\n            return message;\n        });\n        return msg;\n    }\n}\n```\n#### 2.5.2.4 测试\n分别启动两个项目，在浏览器的路径上输入[http://localhost:1180/delay/测试消息](http://localhost:1180/delay/测试消息)，就可在消费者项目中看到打印的信息。30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。\n\n\n## 2.6 消息的持久化\n为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。\n创建时候的参数:\n- `durable` \n是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 \n- `execulusive` \n表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable \n- `autoDelete` \n当没有生成者/消费者使用此队列时，此队列会被自动删除。 \n(即当最后一个消费者退订后即被删除)\n\n\n**设置消息持久化必须先设置队列持久化**，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。`消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的`。其实在前面就已经使用持久化了。我们在管理后台去看一下。\n\n\n## 2.7 消息的确认与拒绝\n消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：\n- `自动确认模式`:\n当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。\n\n- `显式确认模式`:\n消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息\n\n如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间。\n\n\n\n","slug":"RabbitMQ","published":1,"updated":"2019-04-19T10:21:47.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw4kin4n0001892ndoie6jnr","content":"<p><img src=\"/image/rabbit/mq-login.jpg\" alt=\"RabbitMQ\"></p>\n<h1 id=\"1-消息中间件\"><a href=\"#1-消息中间件\" class=\"headerlink\" title=\"1.消息中间件\"></a>1.消息中间件</h1><h2 id=\"1-1-什么是消息中间\"><a href=\"#1-1-什么是消息中间\" class=\"headerlink\" title=\"1.1 什么是消息中间\"></a>1.1 什么是消息中间</h2><p><code>消息</code> (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、<br>JSON 等，也可以很复杂，比如内嵌对象。</p>\n<p><code>消息队列中间件</code> (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p>\n<p>消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:</p>\n<ul>\n<li><code>点对点</code> (P2P, Point-to-Point) 模式</li>\n<li><code>发布/订阅</code> (Pub/Sub) 模式。<a id=\"more\"></a>\n<code>点对点</code>是基于队列的，消息生产者发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的步传输成为可能。<code>发布订阅</code>定义了如何向一个内容节点发布和订阅消息，这个内容节点称为<code>主题</code>(topic)，<code>主题</code>可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而<code>消息订阅者</code>则从主题中订阅消息。<code>主题</code>使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。</li>\n</ul>\n<p>目前开源的消息中间件有很多，比较主流的有 <code>RabbitMQ</code>、 <code>Kafka</code>、 <code>ActiveMQ</code>、 <code>RocketMQ</code>等。</p>\n<h2 id=\"1-2-消息中间件的作用\"><a href=\"#1-2-消息中间件的作用\" class=\"headerlink\" title=\"1.2 消息中间件的作用\"></a>1.2 消息中间件的作用</h2><p>消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用。总的来说，消息中间件的作用可以概括如下:</p>\n<h3 id=\"1-2-1-解耦\"><a href=\"#1-2-1-解耦\" class=\"headerlink\" title=\"1.2.1 解耦\"></a>1.2.1 <code>解耦</code></h3><p>在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。</p>\n<h3 id=\"1-2-2-冗余〈存储\"><a href=\"#1-2-2-冗余〈存储\" class=\"headerlink\" title=\"1.2.2 冗余〈存储)\"></a>1.2.2 <code>冗余〈存储)</code></h3><p>有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。</p>\n<h3 id=\"1-2-3-扩展性\"><a href=\"#1-2-3-扩展性\" class=\"headerlink\" title=\"1.2.3 扩展性\"></a>1.2.3 <code>扩展性</code></h3><p>因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</p>\n<h3 id=\"1-2-4-削峰\"><a href=\"#1-2-4-削峰\" class=\"headerlink\" title=\"1.2.4 削峰\"></a>1.2.4 <code>削峰</code></h3><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。</p>\n<h3 id=\"1-2-5-可恢复性\"><a href=\"#1-2-5-可恢复性\" class=\"headerlink\" title=\"1.2.5 可恢复性\"></a>1.2.5 <code>可恢复性</code></h3><p>当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后进行处理。</p>\n<h3 id=\"1-2-6-顺序保证\"><a href=\"#1-2-6-顺序保证\" class=\"headerlink\" title=\"1.2.6 顺序保证\"></a>1.2.6 <code>顺序保证</code></h3><p>在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</p>\n<h3 id=\"1-2-7-缓冲\"><a href=\"#1-2-7-缓冲\" class=\"headerlink\" title=\"1.2.7 缓冲\"></a>1.2.7 <code>缓冲</code></h3><p>在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。</p>\n<h3 id=\"1-2-8-异步通信\"><a href=\"#1-2-8-异步通信\" class=\"headerlink\" title=\"1.2.8 异步通信\"></a>1.2.8 <code>异步通信</code></h3><p>在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。</p>\n<h1 id=\"2-RabbitMQ入门\"><a href=\"#2-RabbitMQ入门\" class=\"headerlink\" title=\"2.RabbitMQ入门\"></a>2.RabbitMQ入门</h1><h2 id=\"2-1-RabbitMQ介绍\"><a href=\"#2-1-RabbitMQ介绍\" class=\"headerlink\" title=\"2.1 RabbitMQ介绍\"></a>2.1 RabbitMQ介绍</h2><p><code>RabbitMQ</code>是采用<code>Erlang</code>语言实现<code>AMQP</code>(Advanced Message Queuing Protocol，高级消息<br>队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。</p>\n<p>RabbitMQ主要是为了实现系统之间的<code>双向解耦</code>而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p>\n<p><code>AMQP</code>是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是 <strong>面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全</strong>。</p>\n<h2 id=\"2-2-RabbitMQ安装\"><a href=\"#2-2-RabbitMQ安装\" class=\"headerlink\" title=\"2.2 RabbitMQ安装\"></a>2.2 RabbitMQ安装</h2><ul>\n<li><p>使用<code>docker</code>安装(3-management版本自带管理后台)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动RabbitMQ并且启动管理后台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start rabbitmq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看管理后台<br>在浏览器打开 <a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 输入用户名:admin 密码:admin 可进入管理后台</p>\n</li>\n</ul>\n<h2 id=\"2-3-相关概念介绍\"><a href=\"#2-3-相关概念介绍\" class=\"headerlink\" title=\"2.3 相关概念介绍\"></a>2.3 相关概念介绍</h2><h3 id=\"2-3-1-生产者和消费者\"><a href=\"#2-3-1-生产者和消费者\" class=\"headerlink\" title=\"2.3.1 生产者和消费者\"></a>2.3.1 生产者和消费者</h3><ul>\n<li><p><code>Producer</code>:生产者，就是投递消息的一方。<br>生产者创建消息，然后发布到RabbitMQ中。消息一般可以包含2个部分:<code>消息体和标签(Label)</code>。消息体也可以称之为payload，在实际应用中，<strong>消息体一般是一个带有业务逻辑结构的数据</strong>，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ之后会根据标签把消息发送给感兴趣的消费者(Consumer)。</p>\n</li>\n<li><p><code>Consumer</code>:消费者，就是接收消息的一方。<br>消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload)在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。</p>\n</li>\n<li><p><code>Broker</code>:消息中间件的服务节点。<br>对于RabbitMQ来说，一个RabbitMQ Broker可以简单地看作一个<code>RabbitMQ服务节点</code>，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。</p>\n</li>\n</ul>\n<p><strong>RabbitMQ运转流程</strong><br><img src=\"/image/rabbit/mq-yunzhuanliucheng.jpg\" alt=\"RabbitMQ运转流程\"></p>\n<h3 id=\"2-3-2-交换器Exchange，路由RoutingKey，绑定Binding\"><a href=\"#2-3-2-交换器Exchange，路由RoutingKey，绑定Binding\" class=\"headerlink\" title=\"2.3.2 交换器Exchange，路由RoutingKey，绑定Binding\"></a>2.3.2 交换器Exchange，路由RoutingKey，绑定Binding</h3><ul>\n<li><p><code>Exchange</code>:交换器<br><img src=\"/image/rabbit/mq-exchange.jpg\" alt=\"交换器\"><br>MQ中我们暂时可以理解成 <strong>生产者将消息投递到队列中</strong>，但是实际上这个在RabbitMQ中不会发生。真实情况是，<strong>生产者将消息发送到<code>Exchange(交换器)</code>，由交换器将消息路由到一个或者多个<code>队列</code>中。如果路由不到，或许会返回给生产者，或许直接丢弃</strong>。<br>RabbitMQ中的交换器有四种类型，下面将会一一介绍，并且会附上代码详细说明。</p>\n</li>\n<li><p><code>RoutingKey</code>:路由键<br>生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。</p>\n</li>\n<li><p><code>Binding</code>:绑定<br>RabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:<br><img src=\"/image/rabbit/mq-banding.jpg\" alt=\"绑定\"></p>\n</li>\n</ul>\n<h3 id=\"2-3-3-交换器类型\"><a href=\"#2-3-3-交换器类型\" class=\"headerlink\" title=\"2.3.3 交换器类型\"></a>2.3.3 交换器类型</h3><p>RabbitMQ常用的交换器类型有<code>fanout</code>、<code>direct</code>、<code>topic</code>和<code>headers</code>这四种。AMQP协议里其实还提<br>到另外两种类型:<code>System</code>和<code>自定义</code>，在这里就不作详细介绍了。</p>\n<h4 id=\"2-3-3-1-fanout\"><a href=\"#2-3-3-1-fanout\" class=\"headerlink\" title=\"2.3.3.1 fanout\"></a>2.3.3.1 <code>fanout</code></h4><p>就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：<br><img src=\"/image/rabbit/mq-fanout.jpg\" alt=\"fanout\"></p>\n<h4 id=\"2-3-3-2-direct-RabbitMQ默认的交换器类型\"><a href=\"#2-3-3-2-direct-RabbitMQ默认的交换器类型\" class=\"headerlink\" title=\"2.3.3.2 direct(RabbitMQ默认的交换器类型)\"></a>2.3.3.2 <code>direct</code>(RabbitMQ默认的交换器类型)</h4><p>direct类型的交换器路由规则也很简单，它会把消息路由到那些BindingKey和RoutingKey完全匹配的队列中。如下图：<br><img src=\"/image/rabbit/mq-direct.jpg\" alt=\"direct\"></p>\n<h4 id=\"2-3-3-3-topic\"><a href=\"#2-3-3-3-topic\" class=\"headerlink\" title=\"2.3.3.3 topic\"></a>2.3.3.3 topic</h4><p>上面讲到<code>direct类型</code>的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。<code>topic类型</code>的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:</p>\n<ul>\n<li>RoutingKey为一个点号<code>.</code>分隔的字符串(被点号<code>.</code>分隔开的每一段独立的字符串称为一个单词)，如”com.rabbitmq.client”，”java.util.concurrent”,”com.hidden.client”等</li>\n<li>BindingKey也是点号<code>.</code>分隔</li>\n<li>BindingKey中可以存在两种特殊字符串<code>*</code>和<code>#</code>，用于做模糊匹配，其中<code>*</code>用于匹配一个单词，<code>#</code>用于匹配多规格单词(可以是零个)。<br>如下图：<br><img src=\"/image/rabbit/mq-topic.jpg\" alt=\"topic\"><br>思考:<br>1.路由建 “com.rabbitmq.client”会路由到哪一个队列？<br>2.路由建 “com.hidden.client”会路由到哪一个队列？<br>3.路由建 “com.hidden.demo”会路由到哪一个队列？<br>4.路由建 “java.util.concurrent”会路由到哪一个队列？<br>5.路由建 “java.rabbitmq.demo”会路由到哪一个队列？</li>\n</ul>\n<h4 id=\"2-3-3-4-headers-不常用\"><a href=\"#2-3-3-4-headers-不常用\" class=\"headerlink\" title=\"2.3.3.4 headers(不常用)\"></a>2.3.3.4 headers(不常用)</h4><p><code>headers类型</code>的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。<strong>headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在</strong> 所以对于headers类型交换器我们只需要了解即可，知道有这么个类型存在。</p>\n<h2 id=\"2-4-交换器类型详解\"><a href=\"#2-4-交换器类型详解\" class=\"headerlink\" title=\"2.4 交换器类型详解\"></a>2.4 交换器类型详解</h2><h3 id=\"2-4-1-新建\"><a href=\"#2-4-1-新建\" class=\"headerlink\" title=\"2.4.1 新建\"></a>2.4.1 新建</h3><p>新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer<br>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1180</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1181</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>项目创建完成</p>\n<h3 id=\"2-4-2-声明一个队列各个参数的意义\"><a href=\"#2-4-2-声明一个队列各个参数的意义\" class=\"headerlink\" title=\"2.4.2 声明一个队列各个参数的意义\"></a>2.4.2 声明一个队列各个参数的意义</h3><ul>\n<li><code>name</code>: 队列的名称 字符串;</li>\n<li><code>durable</code>: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库;</li>\n<li><code>exclusive</code>: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。</li>\n<li><code>autoDelete</code>: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除</li>\n<li><code>arguments</code>: 队列中的消息什么时候会自动被删除？ 是一个Map&lt;String, Object&gt;，它有如下参数:<ul>\n<li>“x-message-ttl”: 1000  设置队列中的所有消息的生存周期</li>\n<li>“x-expires”: 1000  当队列在指定的时间没有被访问就会被删除</li>\n<li>“x-max-length”: 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉</li>\n<li>“x-max-length-bytes”:  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小</li>\n<li>“x-dead-letter-exchange”: “” 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉</li>\n<li>“x-dead-letter-routing-key”: “”  将删除的消息推送到指定交换机的指定路由键的队列中去</li>\n<li>“x-max-priority”:  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费</li>\n<li>“x-queue-mode”: “lazy” 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中</li>\n<li>“x-queue-master-locator”</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-3-fanout代码实现\"><a href=\"#2-4-3-fanout代码实现\" class=\"headerlink\" title=\"2.4.3 fanout代码实现\"></a>2.4.3 fanout代码实现</h3><h4 id=\"2-4-3-1-在消费者项目中添加一个配置类\"><a href=\"#2-4-3-1-在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"2.4.3.1 在消费者项目中添加一个配置类\"></a>2.4.3.1 在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:35 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 声明一个队列，后面有很多属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"fanout_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-3-2-在消费者项目中添加一个消息监听类\"><a href=\"#2-4-3-2-在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"2.4.3.2 在消费者项目中添加一个消息监听类\"></a>2.4.3.2 在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:40 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue1\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"1fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue2\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"2fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-3-3-在生产者项目中添加一个消息发送controller\"><a href=\"#2-4-3-3-在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"2.4.3.3 在生产者项目中添加一个消息发送controller\"></a>2.4.3.3 在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fanout类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey</span></span><br><span class=\"line\"><span class=\"comment\">     * 只是routingKey可以任意指定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/fanout/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fanoutProducer</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg)</span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"fanout生产消息 msg:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"fanout_exchange\"</span>,<span class=\"string\">\"\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-3-4-测试\"><a href=\"#2-4-3-4-测试\" class=\"headerlink\" title=\"2.4.3.4 测试\"></a>2.4.3.4 测试</h4><p>分别启动这两个项目，在浏览器的路径上输入<a href=\"http://localhost:1180/fanout/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/fanout/测试消息</a>，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。</p>\n<h3 id=\"2-4-4-direct代码实现\"><a href=\"#2-4-4-direct代码实现\" class=\"headerlink\" title=\"2.4.4 direct代码实现\"></a>2.4.4 direct代码实现</h3><h4 id=\"2-4-4-1-在消费者项目中添加一个配置类\"><a href=\"#2-4-4-1-在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"2.4.4.1 在消费者项目中添加一个配置类\"></a>2.4.4.1 在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.direct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 1:40 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义两个队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue1\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue3\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义 exchange</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"direct_exchange\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列1 绑定 exchange 并且设置routingKey为direct.1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列2 绑定 exchange 并且设置routingKey为direct.2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue3()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-4-2-在消费者项目中添加一个消息监听类\"><a href=\"#2-4-4-2-在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"2.4.4.2 在消费者项目中添加一个消息监听类\"></a>2.4.4.2 在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-4-3-在生产者项目中添加一个消息发送controller\"><a href=\"#2-4-4-3-在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"2.4.4.3 在生产者项目中添加一个消息发送controller\"></a>2.4.4.3 在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * direct类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue1/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key1\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue2/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerTwo</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"mq-direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key2\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-4-4-测试\"><a href=\"#2-4-4-4-测试\" class=\"headerlink\" title=\"2.4.4.4 测试\"></a>2.4.4.4 测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/direct/queue1/测试消息1\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/direct/queue1/测试消息1</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可</p>\n<h3 id=\"2-4-5-topic代码实现\"><a href=\"#2-4-5-topic代码实现\" class=\"headerlink\" title=\"2.4.5 topic代码实现\"></a>2.4.5 topic代码实现</h3><h4 id=\"2-4-5-1-在消费者项目中添加一个配置类\"><a href=\"#2-4-5-1-在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"2.4.5.1 在消费者项目中添加一个配置类\"></a>2.4.5.1 在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 8:42 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue1\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"topic_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class=\"string\">\"*.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class=\"string\">\"com.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-5-2-在消费者项目中添加一个消息监听类\"><a href=\"#2-4-5-2-在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"2.4.5.2 在消费者项目中添加一个消息监听类\"></a>2.4.5.2 在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和fanout类型相同，只是监听的队列不同而已</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-5-3-在生产者项目中添加一个消息发送controller\"><a href=\"#2-4-5-3-在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"2.4.5.3 在生产者项目中添加一个消息发送controller\"></a>2.4.5.3 在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * topic类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/topic/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">topicProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"topic:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"topic_exchange\"</span>, <span class=\"string\">\"com.jiafly.test\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-5-4-测试\"><a href=\"#2-4-5-4-测试\" class=\"headerlink\" title=\"2.4.5.4 测试\"></a>2.4.5.4 测试</h4><p>分别启动两个项目，在浏览器的路径上输入<a href=\"http://localhost:1180/topic/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/topic/测试消息</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用<code>*</code>或者<code>#</code>表示</p>\n<h2 id=\"2-5-延时队列\"><a href=\"#2-5-延时队列\" class=\"headerlink\" title=\"2.5 延时队列\"></a>2.5 延时队列</h2><h3 id=\"2-5-1-延时队列能做什么\"><a href=\"#2-5-1-延时队列能做什么\" class=\"headerlink\" title=\"2.5.1 延时队列能做什么\"></a>2.5.1 延时队列能做什么</h3><ul>\n<li>订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。</li>\n<li>短信通知：下单成功后 60s 之后给用户发送短信通知。</li>\n<li>失败重试：业务操作失败后，间隔一定的时间进行失败重试</li>\n</ul>\n<p>这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。</p>\n<p>在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。<br><img src=\"/image/rabbit/delay-mq.jpg\" alt=\"延时队列\"></p>\n<h3 id=\"2-5-2-死信交换器DLX-Dead-Letter-Exchange\"><a href=\"#2-5-2-死信交换器DLX-Dead-Letter-Exchange\" class=\"headerlink\" title=\"2.5.2 死信交换器DLX(Dead-Letter-Exchange)\"></a>2.5.2 死信交换器DLX(Dead-Letter-Exchange)</h3><p>DLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。</p>\n<p>Router: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.</p>\n<p>具体代码实现:</p>\n<h4 id=\"2-5-2-1-在消费者项目中添加一个配置类\"><a href=\"#2-5-2-1-在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"2.5.2.1 在消费者项目中添加一个配置类\"></a>2.5.2.1 在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/2 12:44 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">delayExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">routerQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"router.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">routerBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(routerQueue()).to(delayExchange()).with(<span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">deadLetterQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; arguments = <span class=\"keyword\">new</span> HashMap(<span class=\"number\">16</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>, <span class=\"string\">\"delay_exchange\"</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>, <span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dead.letter.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">deadLetterBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(<span class=\"string\">\"dead.letter.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-5-2-2-在消费者项目中添加一个消息监听类\"><a href=\"#2-5-2-2-在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"2.5.2.2 在消费者项目中添加一个消息监听类\"></a>2.5.2.2 在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 6:13 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"router.queue\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delayConsumer</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay.queue1接收消息:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-5-2-3-在生产者项目中添加一个消息发送controller\"><a href=\"#2-5-2-3-在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"2.5.2.3 在生产者项目中添加一个消息发送controller\"></a>2.5.2.3 在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.support.converter.AbstractJavaTypeMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 7:17 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 延迟队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/delay/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delayProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"string\">\"dead.letter.routing.key\"</span>, msg, message -&gt; &#123;</span><br><span class=\"line\">            message.getMessageProperties().setExpiration(<span class=\"number\">30</span> * <span class=\"number\">1000</span> + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-5-2-4-测试\"><a href=\"#2-5-2-4-测试\" class=\"headerlink\" title=\"2.5.2.4 测试\"></a>2.5.2.4 测试</h4><p>分别启动两个项目，在浏览器的路径上输入<a href=\"http://localhost:1180/delay/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/delay/测试消息</a>，就可在消费者项目中看到打印的信息。30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。</p>\n<h2 id=\"2-6-消息的持久化\"><a href=\"#2-6-消息的持久化\" class=\"headerlink\" title=\"2.6 消息的持久化\"></a>2.6 消息的持久化</h2><p>为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。<br>创建时候的参数:</p>\n<ul>\n<li><code>durable</code><br>是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 </li>\n<li><code>execulusive</code><br>表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable </li>\n<li><code>autoDelete</code><br>当没有生成者/消费者使用此队列时，此队列会被自动删除。<br>(即当最后一个消费者退订后即被删除)</li>\n</ul>\n<p><strong>设置消息持久化必须先设置队列持久化</strong>，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。<code>消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的</code>。其实在前面就已经使用持久化了。我们在管理后台去看一下。</p>\n<h2 id=\"2-7-消息的确认与拒绝\"><a href=\"#2-7-消息的确认与拒绝\" class=\"headerlink\" title=\"2.7 消息的确认与拒绝\"></a>2.7 消息的确认与拒绝</h2><p>消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：</p>\n<ul>\n<li><p><code>自动确认模式</code>:<br>当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。</p>\n</li>\n<li><p><code>显式确认模式</code>:<br>消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息</p>\n</li>\n</ul>\n<p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/image/rabbit/mq-login.jpg\" alt=\"RabbitMQ\"></p>\n<h1 id=\"1-消息中间件\"><a href=\"#1-消息中间件\" class=\"headerlink\" title=\"1.消息中间件\"></a>1.消息中间件</h1><h2 id=\"1-1-什么是消息中间\"><a href=\"#1-1-什么是消息中间\" class=\"headerlink\" title=\"1.1 什么是消息中间\"></a>1.1 什么是消息中间</h2><p><code>消息</code> (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、<br>JSON 等，也可以很复杂，比如内嵌对象。</p>\n<p><code>消息队列中间件</code> (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p>\n<p>消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:</p>\n<ul>\n<li><code>点对点</code> (P2P, Point-to-Point) 模式</li>\n<li><code>发布/订阅</code> (Pub/Sub) 模式。","more":"<code>点对点</code>是基于队列的，消息生产者发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的步传输成为可能。<code>发布订阅</code>定义了如何向一个内容节点发布和订阅消息，这个内容节点称为<code>主题</code>(topic)，<code>主题</code>可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而<code>消息订阅者</code>则从主题中订阅消息。<code>主题</code>使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。</li>\n</ul>\n<p>目前开源的消息中间件有很多，比较主流的有 <code>RabbitMQ</code>、 <code>Kafka</code>、 <code>ActiveMQ</code>、 <code>RocketMQ</code>等。</p>\n<h2 id=\"1-2-消息中间件的作用\"><a href=\"#1-2-消息中间件的作用\" class=\"headerlink\" title=\"1.2 消息中间件的作用\"></a>1.2 消息中间件的作用</h2><p>消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用。总的来说，消息中间件的作用可以概括如下:</p>\n<h3 id=\"1-2-1-解耦\"><a href=\"#1-2-1-解耦\" class=\"headerlink\" title=\"1.2.1 解耦\"></a>1.2.1 <code>解耦</code></h3><p>在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。</p>\n<h3 id=\"1-2-2-冗余〈存储\"><a href=\"#1-2-2-冗余〈存储\" class=\"headerlink\" title=\"1.2.2 冗余〈存储)\"></a>1.2.2 <code>冗余〈存储)</code></h3><p>有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。</p>\n<h3 id=\"1-2-3-扩展性\"><a href=\"#1-2-3-扩展性\" class=\"headerlink\" title=\"1.2.3 扩展性\"></a>1.2.3 <code>扩展性</code></h3><p>因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</p>\n<h3 id=\"1-2-4-削峰\"><a href=\"#1-2-4-削峰\" class=\"headerlink\" title=\"1.2.4 削峰\"></a>1.2.4 <code>削峰</code></h3><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。</p>\n<h3 id=\"1-2-5-可恢复性\"><a href=\"#1-2-5-可恢复性\" class=\"headerlink\" title=\"1.2.5 可恢复性\"></a>1.2.5 <code>可恢复性</code></h3><p>当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后进行处理。</p>\n<h3 id=\"1-2-6-顺序保证\"><a href=\"#1-2-6-顺序保证\" class=\"headerlink\" title=\"1.2.6 顺序保证\"></a>1.2.6 <code>顺序保证</code></h3><p>在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</p>\n<h3 id=\"1-2-7-缓冲\"><a href=\"#1-2-7-缓冲\" class=\"headerlink\" title=\"1.2.7 缓冲\"></a>1.2.7 <code>缓冲</code></h3><p>在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。</p>\n<h3 id=\"1-2-8-异步通信\"><a href=\"#1-2-8-异步通信\" class=\"headerlink\" title=\"1.2.8 异步通信\"></a>1.2.8 <code>异步通信</code></h3><p>在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。</p>\n<h1 id=\"2-RabbitMQ入门\"><a href=\"#2-RabbitMQ入门\" class=\"headerlink\" title=\"2.RabbitMQ入门\"></a>2.RabbitMQ入门</h1><h2 id=\"2-1-RabbitMQ介绍\"><a href=\"#2-1-RabbitMQ介绍\" class=\"headerlink\" title=\"2.1 RabbitMQ介绍\"></a>2.1 RabbitMQ介绍</h2><p><code>RabbitMQ</code>是采用<code>Erlang</code>语言实现<code>AMQP</code>(Advanced Message Queuing Protocol，高级消息<br>队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。</p>\n<p>RabbitMQ主要是为了实现系统之间的<code>双向解耦</code>而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p>\n<p><code>AMQP</code>是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是 <strong>面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全</strong>。</p>\n<h2 id=\"2-2-RabbitMQ安装\"><a href=\"#2-2-RabbitMQ安装\" class=\"headerlink\" title=\"2.2 RabbitMQ安装\"></a>2.2 RabbitMQ安装</h2><ul>\n<li><p>使用<code>docker</code>安装(3-management版本自带管理后台)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动RabbitMQ并且启动管理后台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start rabbitmq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看管理后台<br>在浏览器打开 <a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 输入用户名:admin 密码:admin 可进入管理后台</p>\n</li>\n</ul>\n<h2 id=\"2-3-相关概念介绍\"><a href=\"#2-3-相关概念介绍\" class=\"headerlink\" title=\"2.3 相关概念介绍\"></a>2.3 相关概念介绍</h2><h3 id=\"2-3-1-生产者和消费者\"><a href=\"#2-3-1-生产者和消费者\" class=\"headerlink\" title=\"2.3.1 生产者和消费者\"></a>2.3.1 生产者和消费者</h3><ul>\n<li><p><code>Producer</code>:生产者，就是投递消息的一方。<br>生产者创建消息，然后发布到RabbitMQ中。消息一般可以包含2个部分:<code>消息体和标签(Label)</code>。消息体也可以称之为payload，在实际应用中，<strong>消息体一般是一个带有业务逻辑结构的数据</strong>，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ之后会根据标签把消息发送给感兴趣的消费者(Consumer)。</p>\n</li>\n<li><p><code>Consumer</code>:消费者，就是接收消息的一方。<br>消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload)在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。</p>\n</li>\n<li><p><code>Broker</code>:消息中间件的服务节点。<br>对于RabbitMQ来说，一个RabbitMQ Broker可以简单地看作一个<code>RabbitMQ服务节点</code>，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。</p>\n</li>\n</ul>\n<p><strong>RabbitMQ运转流程</strong><br><img src=\"/image/rabbit/mq-yunzhuanliucheng.jpg\" alt=\"RabbitMQ运转流程\"></p>\n<h3 id=\"2-3-2-交换器Exchange，路由RoutingKey，绑定Binding\"><a href=\"#2-3-2-交换器Exchange，路由RoutingKey，绑定Binding\" class=\"headerlink\" title=\"2.3.2 交换器Exchange，路由RoutingKey，绑定Binding\"></a>2.3.2 交换器Exchange，路由RoutingKey，绑定Binding</h3><ul>\n<li><p><code>Exchange</code>:交换器<br><img src=\"/image/rabbit/mq-exchange.jpg\" alt=\"交换器\"><br>MQ中我们暂时可以理解成 <strong>生产者将消息投递到队列中</strong>，但是实际上这个在RabbitMQ中不会发生。真实情况是，<strong>生产者将消息发送到<code>Exchange(交换器)</code>，由交换器将消息路由到一个或者多个<code>队列</code>中。如果路由不到，或许会返回给生产者，或许直接丢弃</strong>。<br>RabbitMQ中的交换器有四种类型，下面将会一一介绍，并且会附上代码详细说明。</p>\n</li>\n<li><p><code>RoutingKey</code>:路由键<br>生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。</p>\n</li>\n<li><p><code>Binding</code>:绑定<br>RabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:<br><img src=\"/image/rabbit/mq-banding.jpg\" alt=\"绑定\"></p>\n</li>\n</ul>\n<h3 id=\"2-3-3-交换器类型\"><a href=\"#2-3-3-交换器类型\" class=\"headerlink\" title=\"2.3.3 交换器类型\"></a>2.3.3 交换器类型</h3><p>RabbitMQ常用的交换器类型有<code>fanout</code>、<code>direct</code>、<code>topic</code>和<code>headers</code>这四种。AMQP协议里其实还提<br>到另外两种类型:<code>System</code>和<code>自定义</code>，在这里就不作详细介绍了。</p>\n<h4 id=\"2-3-3-1-fanout\"><a href=\"#2-3-3-1-fanout\" class=\"headerlink\" title=\"2.3.3.1 fanout\"></a>2.3.3.1 <code>fanout</code></h4><p>就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：<br><img src=\"/image/rabbit/mq-fanout.jpg\" alt=\"fanout\"></p>\n<h4 id=\"2-3-3-2-direct-RabbitMQ默认的交换器类型\"><a href=\"#2-3-3-2-direct-RabbitMQ默认的交换器类型\" class=\"headerlink\" title=\"2.3.3.2 direct(RabbitMQ默认的交换器类型)\"></a>2.3.3.2 <code>direct</code>(RabbitMQ默认的交换器类型)</h4><p>direct类型的交换器路由规则也很简单，它会把消息路由到那些BindingKey和RoutingKey完全匹配的队列中。如下图：<br><img src=\"/image/rabbit/mq-direct.jpg\" alt=\"direct\"></p>\n<h4 id=\"2-3-3-3-topic\"><a href=\"#2-3-3-3-topic\" class=\"headerlink\" title=\"2.3.3.3 topic\"></a>2.3.3.3 topic</h4><p>上面讲到<code>direct类型</code>的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。<code>topic类型</code>的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:</p>\n<ul>\n<li>RoutingKey为一个点号<code>.</code>分隔的字符串(被点号<code>.</code>分隔开的每一段独立的字符串称为一个单词)，如”com.rabbitmq.client”，”java.util.concurrent”,”com.hidden.client”等</li>\n<li>BindingKey也是点号<code>.</code>分隔</li>\n<li>BindingKey中可以存在两种特殊字符串<code>*</code>和<code>#</code>，用于做模糊匹配，其中<code>*</code>用于匹配一个单词，<code>#</code>用于匹配多规格单词(可以是零个)。<br>如下图：<br><img src=\"/image/rabbit/mq-topic.jpg\" alt=\"topic\"><br>思考:<br>1.路由建 “com.rabbitmq.client”会路由到哪一个队列？<br>2.路由建 “com.hidden.client”会路由到哪一个队列？<br>3.路由建 “com.hidden.demo”会路由到哪一个队列？<br>4.路由建 “java.util.concurrent”会路由到哪一个队列？<br>5.路由建 “java.rabbitmq.demo”会路由到哪一个队列？</li>\n</ul>\n<h4 id=\"2-3-3-4-headers-不常用\"><a href=\"#2-3-3-4-headers-不常用\" class=\"headerlink\" title=\"2.3.3.4 headers(不常用)\"></a>2.3.3.4 headers(不常用)</h4><p><code>headers类型</code>的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。<strong>headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在</strong> 所以对于headers类型交换器我们只需要了解即可，知道有这么个类型存在。</p>\n<h2 id=\"2-4-交换器类型详解\"><a href=\"#2-4-交换器类型详解\" class=\"headerlink\" title=\"2.4 交换器类型详解\"></a>2.4 交换器类型详解</h2><h3 id=\"2-4-1-新建\"><a href=\"#2-4-1-新建\" class=\"headerlink\" title=\"2.4.1 新建\"></a>2.4.1 新建</h3><p>新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer<br>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1180</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1181</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>项目创建完成</p>\n<h3 id=\"2-4-2-声明一个队列各个参数的意义\"><a href=\"#2-4-2-声明一个队列各个参数的意义\" class=\"headerlink\" title=\"2.4.2 声明一个队列各个参数的意义\"></a>2.4.2 声明一个队列各个参数的意义</h3><ul>\n<li><code>name</code>: 队列的名称 字符串;</li>\n<li><code>durable</code>: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库;</li>\n<li><code>exclusive</code>: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。</li>\n<li><code>autoDelete</code>: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除</li>\n<li><code>arguments</code>: 队列中的消息什么时候会自动被删除？ 是一个Map&lt;String, Object&gt;，它有如下参数:<ul>\n<li>“x-message-ttl”: 1000  设置队列中的所有消息的生存周期</li>\n<li>“x-expires”: 1000  当队列在指定的时间没有被访问就会被删除</li>\n<li>“x-max-length”: 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉</li>\n<li>“x-max-length-bytes”:  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小</li>\n<li>“x-dead-letter-exchange”: “” 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉</li>\n<li>“x-dead-letter-routing-key”: “”  将删除的消息推送到指定交换机的指定路由键的队列中去</li>\n<li>“x-max-priority”:  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费</li>\n<li>“x-queue-mode”: “lazy” 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中</li>\n<li>“x-queue-master-locator”</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-3-fanout代码实现\"><a href=\"#2-4-3-fanout代码实现\" class=\"headerlink\" title=\"2.4.3 fanout代码实现\"></a>2.4.3 fanout代码实现</h3><h4 id=\"2-4-3-1-在消费者项目中添加一个配置类\"><a href=\"#2-4-3-1-在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"2.4.3.1 在消费者项目中添加一个配置类\"></a>2.4.3.1 在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:35 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 声明一个队列，后面有很多属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"fanout_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-3-2-在消费者项目中添加一个消息监听类\"><a href=\"#2-4-3-2-在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"2.4.3.2 在消费者项目中添加一个消息监听类\"></a>2.4.3.2 在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:40 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue1\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"1fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue2\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"2fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-3-3-在生产者项目中添加一个消息发送controller\"><a href=\"#2-4-3-3-在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"2.4.3.3 在生产者项目中添加一个消息发送controller\"></a>2.4.3.3 在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fanout类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey</span></span><br><span class=\"line\"><span class=\"comment\">     * 只是routingKey可以任意指定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/fanout/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fanoutProducer</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg)</span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"fanout生产消息 msg:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"fanout_exchange\"</span>,<span class=\"string\">\"\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-3-4-测试\"><a href=\"#2-4-3-4-测试\" class=\"headerlink\" title=\"2.4.3.4 测试\"></a>2.4.3.4 测试</h4><p>分别启动这两个项目，在浏览器的路径上输入<a href=\"http://localhost:1180/fanout/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/fanout/测试消息</a>，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。</p>\n<h3 id=\"2-4-4-direct代码实现\"><a href=\"#2-4-4-direct代码实现\" class=\"headerlink\" title=\"2.4.4 direct代码实现\"></a>2.4.4 direct代码实现</h3><h4 id=\"2-4-4-1-在消费者项目中添加一个配置类\"><a href=\"#2-4-4-1-在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"2.4.4.1 在消费者项目中添加一个配置类\"></a>2.4.4.1 在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.direct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 1:40 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义两个队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue1\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue3\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义 exchange</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"direct_exchange\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列1 绑定 exchange 并且设置routingKey为direct.1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列2 绑定 exchange 并且设置routingKey为direct.2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue3()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-4-2-在消费者项目中添加一个消息监听类\"><a href=\"#2-4-4-2-在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"2.4.4.2 在消费者项目中添加一个消息监听类\"></a>2.4.4.2 在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-4-3-在生产者项目中添加一个消息发送controller\"><a href=\"#2-4-4-3-在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"2.4.4.3 在生产者项目中添加一个消息发送controller\"></a>2.4.4.3 在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * direct类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue1/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key1\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue2/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerTwo</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"mq-direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key2\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-4-4-测试\"><a href=\"#2-4-4-4-测试\" class=\"headerlink\" title=\"2.4.4.4 测试\"></a>2.4.4.4 测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/direct/queue1/测试消息1\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/direct/queue1/测试消息1</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可</p>\n<h3 id=\"2-4-5-topic代码实现\"><a href=\"#2-4-5-topic代码实现\" class=\"headerlink\" title=\"2.4.5 topic代码实现\"></a>2.4.5 topic代码实现</h3><h4 id=\"2-4-5-1-在消费者项目中添加一个配置类\"><a href=\"#2-4-5-1-在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"2.4.5.1 在消费者项目中添加一个配置类\"></a>2.4.5.1 在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 8:42 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue1\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"topic_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class=\"string\">\"*.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class=\"string\">\"com.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-5-2-在消费者项目中添加一个消息监听类\"><a href=\"#2-4-5-2-在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"2.4.5.2 在消费者项目中添加一个消息监听类\"></a>2.4.5.2 在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和fanout类型相同，只是监听的队列不同而已</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-5-3-在生产者项目中添加一个消息发送controller\"><a href=\"#2-4-5-3-在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"2.4.5.3 在生产者项目中添加一个消息发送controller\"></a>2.4.5.3 在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * topic类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/topic/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">topicProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"topic:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"topic_exchange\"</span>, <span class=\"string\">\"com.jiafly.test\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-4-5-4-测试\"><a href=\"#2-4-5-4-测试\" class=\"headerlink\" title=\"2.4.5.4 测试\"></a>2.4.5.4 测试</h4><p>分别启动两个项目，在浏览器的路径上输入<a href=\"http://localhost:1180/topic/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/topic/测试消息</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用<code>*</code>或者<code>#</code>表示</p>\n<h2 id=\"2-5-延时队列\"><a href=\"#2-5-延时队列\" class=\"headerlink\" title=\"2.5 延时队列\"></a>2.5 延时队列</h2><h3 id=\"2-5-1-延时队列能做什么\"><a href=\"#2-5-1-延时队列能做什么\" class=\"headerlink\" title=\"2.5.1 延时队列能做什么\"></a>2.5.1 延时队列能做什么</h3><ul>\n<li>订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。</li>\n<li>短信通知：下单成功后 60s 之后给用户发送短信通知。</li>\n<li>失败重试：业务操作失败后，间隔一定的时间进行失败重试</li>\n</ul>\n<p>这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。</p>\n<p>在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。<br><img src=\"/image/rabbit/delay-mq.jpg\" alt=\"延时队列\"></p>\n<h3 id=\"2-5-2-死信交换器DLX-Dead-Letter-Exchange\"><a href=\"#2-5-2-死信交换器DLX-Dead-Letter-Exchange\" class=\"headerlink\" title=\"2.5.2 死信交换器DLX(Dead-Letter-Exchange)\"></a>2.5.2 死信交换器DLX(Dead-Letter-Exchange)</h3><p>DLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。</p>\n<p>Router: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.</p>\n<p>具体代码实现:</p>\n<h4 id=\"2-5-2-1-在消费者项目中添加一个配置类\"><a href=\"#2-5-2-1-在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"2.5.2.1 在消费者项目中添加一个配置类\"></a>2.5.2.1 在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/2 12:44 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">delayExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">routerQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"router.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">routerBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(routerQueue()).to(delayExchange()).with(<span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">deadLetterQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; arguments = <span class=\"keyword\">new</span> HashMap(<span class=\"number\">16</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>, <span class=\"string\">\"delay_exchange\"</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>, <span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dead.letter.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">deadLetterBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(<span class=\"string\">\"dead.letter.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-5-2-2-在消费者项目中添加一个消息监听类\"><a href=\"#2-5-2-2-在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"2.5.2.2 在消费者项目中添加一个消息监听类\"></a>2.5.2.2 在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 6:13 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"router.queue\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delayConsumer</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay.queue1接收消息:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-5-2-3-在生产者项目中添加一个消息发送controller\"><a href=\"#2-5-2-3-在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"2.5.2.3 在生产者项目中添加一个消息发送controller\"></a>2.5.2.3 在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.support.converter.AbstractJavaTypeMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 7:17 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 延迟队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/delay/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delayProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"string\">\"dead.letter.routing.key\"</span>, msg, message -&gt; &#123;</span><br><span class=\"line\">            message.getMessageProperties().setExpiration(<span class=\"number\">30</span> * <span class=\"number\">1000</span> + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-5-2-4-测试\"><a href=\"#2-5-2-4-测试\" class=\"headerlink\" title=\"2.5.2.4 测试\"></a>2.5.2.4 测试</h4><p>分别启动两个项目，在浏览器的路径上输入<a href=\"http://localhost:1180/delay/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/delay/测试消息</a>，就可在消费者项目中看到打印的信息。30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。</p>\n<h2 id=\"2-6-消息的持久化\"><a href=\"#2-6-消息的持久化\" class=\"headerlink\" title=\"2.6 消息的持久化\"></a>2.6 消息的持久化</h2><p>为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。<br>创建时候的参数:</p>\n<ul>\n<li><code>durable</code><br>是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 </li>\n<li><code>execulusive</code><br>表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable </li>\n<li><code>autoDelete</code><br>当没有生成者/消费者使用此队列时，此队列会被自动删除。<br>(即当最后一个消费者退订后即被删除)</li>\n</ul>\n<p><strong>设置消息持久化必须先设置队列持久化</strong>，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。<code>消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的</code>。其实在前面就已经使用持久化了。我们在管理后台去看一下。</p>\n<h2 id=\"2-7-消息的确认与拒绝\"><a href=\"#2-7-消息的确认与拒绝\" class=\"headerlink\" title=\"2.7 消息的确认与拒绝\"></a>2.7 消息的确认与拒绝</h2><p>消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：</p>\n<ul>\n<li><p><code>自动确认模式</code>:<br>当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。</p>\n</li>\n<li><p><code>显式确认模式</code>:<br>消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息</p>\n</li>\n</ul>\n<p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间。</p>"},{"title":"Docker-02-创建mysql容器","date":"2019-03-10T09:45:22.000Z","_content":"# 1. 前言\n我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。\n个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。\n<!-- more -->\n# 2. 准备工作\n## 2.1 安装Docker\n无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。\n## 2.2 拉取mysql的镜像(这里使用mysql5.7)\n```bash\n$ docker pull mysql:5.7\n```\n\n## 2.3 启动mysql\n当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看\n```bash\n$ docker images \n```\n这个命令就列出了当前主机上已经下载的所有镜像。\n## 2.4 在宿主机上创建数据存储文件夹\n个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。\n例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录\n```bash\n$ mkdir /data/docker/mysql/mysql001\n```\n### 2.5 创建容器\n```bash\n$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7 \n```\n\n这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。\n- docker run \n这是启动一个容器\n- --name mysql001 \n启动的容器名称为mysql001，这个名称在后面操作可直接使用名称\n- -p 3306:3306\n映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口\n- -e MYSQL_ROOT_PASSWORD=root\n设置mysql的登录密码为root\n- -v /etc/localtime:/etc/localtime\n这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时\n- -v /data/docker/mysql/mysql001:/var/lib/mysql\n这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里\n- -d mysql:5.7\n-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样\n\n### 启动容器\n执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器\n```bash\n$ docker start mysql001\n```\n或者将name修改为image_id，image_id可以通过 docker images命令去查看。\n\n## 访问mysql数据库\n- 方式一\n```bash\n$ mysql-cli -h 127.0.0.1 -u root -p root\n```\n- 方式二\n使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。\n\n### 删除容器\n删除容器必须要保证容器是stop的可以通过下面的命令查看\n- 查看正在运行的容器\n```bash\n$ docker ps \n```\n- 查看所有运行过的容器包括正在运行的容器\n```bash\n$ docker ps -a\n```\n根据上面的命令可以查找到容器id，执行命令删除容器\n```bash\n$ docker rm 容器id\n```\n\n\n","source":"_posts/docker/Docker-02-创建mysql容器.md","raw":"---\ntitle: Docker-02-创建mysql容器\ndate: 2019-03-10 17:45:22\ntags: \n    - docker\n    - mysql\ncategories: \n    - docker\n---\n# 1. 前言\n我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。\n个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。\n<!-- more -->\n# 2. 准备工作\n## 2.1 安装Docker\n无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。\n## 2.2 拉取mysql的镜像(这里使用mysql5.7)\n```bash\n$ docker pull mysql:5.7\n```\n\n## 2.3 启动mysql\n当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看\n```bash\n$ docker images \n```\n这个命令就列出了当前主机上已经下载的所有镜像。\n## 2.4 在宿主机上创建数据存储文件夹\n个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。\n例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录\n```bash\n$ mkdir /data/docker/mysql/mysql001\n```\n### 2.5 创建容器\n```bash\n$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7 \n```\n\n这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。\n- docker run \n这是启动一个容器\n- --name mysql001 \n启动的容器名称为mysql001，这个名称在后面操作可直接使用名称\n- -p 3306:3306\n映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口\n- -e MYSQL_ROOT_PASSWORD=root\n设置mysql的登录密码为root\n- -v /etc/localtime:/etc/localtime\n这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时\n- -v /data/docker/mysql/mysql001:/var/lib/mysql\n这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里\n- -d mysql:5.7\n-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样\n\n### 启动容器\n执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器\n```bash\n$ docker start mysql001\n```\n或者将name修改为image_id，image_id可以通过 docker images命令去查看。\n\n## 访问mysql数据库\n- 方式一\n```bash\n$ mysql-cli -h 127.0.0.1 -u root -p root\n```\n- 方式二\n使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。\n\n### 删除容器\n删除容器必须要保证容器是stop的可以通过下面的命令查看\n- 查看正在运行的容器\n```bash\n$ docker ps \n```\n- 查看所有运行过的容器包括正在运行的容器\n```bash\n$ docker ps -a\n```\n根据上面的命令可以查找到容器id，执行命令删除容器\n```bash\n$ docker rm 容器id\n```\n\n\n","slug":"docker/Docker-02-创建mysql容器","published":1,"updated":"2019-04-07T15:02:41.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw4kinc6000b892n1uzovuvw","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。<br>个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。<br><a id=\"more\"></a></p>\n<h1 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h1><h2 id=\"2-1-安装Docker\"><a href=\"#2-1-安装Docker\" class=\"headerlink\" title=\"2.1 安装Docker\"></a>2.1 安装Docker</h2><p>无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。</p>\n<h2 id=\"2-2-拉取mysql的镜像-这里使用mysql5-7\"><a href=\"#2-2-拉取mysql的镜像-这里使用mysql5-7\" class=\"headerlink\" title=\"2.2 拉取mysql的镜像(这里使用mysql5.7)\"></a>2.2 拉取mysql的镜像(这里使用mysql5.7)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-启动mysql\"><a href=\"#2-3-启动mysql\" class=\"headerlink\" title=\"2.3 启动mysql\"></a>2.3 启动mysql</h2><p>当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure></p>\n<p>这个命令就列出了当前主机上已经下载的所有镜像。</p>\n<h2 id=\"2-4-在宿主机上创建数据存储文件夹\"><a href=\"#2-4-在宿主机上创建数据存储文件夹\" class=\"headerlink\" title=\"2.4 在宿主机上创建数据存储文件夹\"></a>2.4 在宿主机上创建数据存储文件夹</h2><p>个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。<br>例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /data/docker/mysql/mysql001</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5-创建容器\"><a href=\"#2-5-创建容器\" class=\"headerlink\" title=\"2.5 创建容器\"></a>2.5 创建容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7</span><br></pre></td></tr></table></figure>\n<p>这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。</p>\n<ul>\n<li>docker run<br>这是启动一个容器</li>\n<li>–name mysql001<br>启动的容器名称为mysql001，这个名称在后面操作可直接使用名称</li>\n<li>-p 3306:3306<br>映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口</li>\n<li>-e MYSQL_ROOT_PASSWORD=root<br>设置mysql的登录密码为root</li>\n<li>-v /etc/localtime:/etc/localtime<br>这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时</li>\n<li>-v /data/docker/mysql/mysql001:/var/lib/mysql<br>这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里</li>\n<li>-d mysql:5.7<br>-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样</li>\n</ul>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><p>执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start mysql001</span><br></pre></td></tr></table></figure></p>\n<p>或者将name修改为image_id，image_id可以通过 docker images命令去查看。</p>\n<h2 id=\"访问mysql数据库\"><a href=\"#访问mysql数据库\" class=\"headerlink\" title=\"访问mysql数据库\"></a>访问mysql数据库</h2><ul>\n<li><p>方式一</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql-cli -h 127.0.0.1 -u root -p root</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式二<br>使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。</p>\n</li>\n</ul>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>删除容器必须要保证容器是stop的可以通过下面的命令查看</p>\n<ul>\n<li><p>查看正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有运行过的容器包括正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>根据上面的命令可以查找到容器id，执行命令删除容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm 容器id</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。<br>个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。<br>","more":"</p>\n<h1 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h1><h2 id=\"2-1-安装Docker\"><a href=\"#2-1-安装Docker\" class=\"headerlink\" title=\"2.1 安装Docker\"></a>2.1 安装Docker</h2><p>无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。</p>\n<h2 id=\"2-2-拉取mysql的镜像-这里使用mysql5-7\"><a href=\"#2-2-拉取mysql的镜像-这里使用mysql5-7\" class=\"headerlink\" title=\"2.2 拉取mysql的镜像(这里使用mysql5.7)\"></a>2.2 拉取mysql的镜像(这里使用mysql5.7)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-启动mysql\"><a href=\"#2-3-启动mysql\" class=\"headerlink\" title=\"2.3 启动mysql\"></a>2.3 启动mysql</h2><p>当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure></p>\n<p>这个命令就列出了当前主机上已经下载的所有镜像。</p>\n<h2 id=\"2-4-在宿主机上创建数据存储文件夹\"><a href=\"#2-4-在宿主机上创建数据存储文件夹\" class=\"headerlink\" title=\"2.4 在宿主机上创建数据存储文件夹\"></a>2.4 在宿主机上创建数据存储文件夹</h2><p>个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。<br>例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /data/docker/mysql/mysql001</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5-创建容器\"><a href=\"#2-5-创建容器\" class=\"headerlink\" title=\"2.5 创建容器\"></a>2.5 创建容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7</span><br></pre></td></tr></table></figure>\n<p>这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。</p>\n<ul>\n<li>docker run<br>这是启动一个容器</li>\n<li>–name mysql001<br>启动的容器名称为mysql001，这个名称在后面操作可直接使用名称</li>\n<li>-p 3306:3306<br>映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口</li>\n<li>-e MYSQL_ROOT_PASSWORD=root<br>设置mysql的登录密码为root</li>\n<li>-v /etc/localtime:/etc/localtime<br>这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时</li>\n<li>-v /data/docker/mysql/mysql001:/var/lib/mysql<br>这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里</li>\n<li>-d mysql:5.7<br>-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样</li>\n</ul>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><p>执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start mysql001</span><br></pre></td></tr></table></figure></p>\n<p>或者将name修改为image_id，image_id可以通过 docker images命令去查看。</p>\n<h2 id=\"访问mysql数据库\"><a href=\"#访问mysql数据库\" class=\"headerlink\" title=\"访问mysql数据库\"></a>访问mysql数据库</h2><ul>\n<li><p>方式一</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql-cli -h 127.0.0.1 -u root -p root</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式二<br>使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。</p>\n</li>\n</ul>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>删除容器必须要保证容器是stop的可以通过下面的命令查看</p>\n<ul>\n<li><p>查看正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有运行过的容器包括正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>根据上面的命令可以查找到容器id，执行命令删除容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm 容器id</span><br></pre></td></tr></table></figure></p>"},{"title":"Docker-01-Docker介绍","date":"2018-03-05T17:45:16.000Z","_content":"# 1.前言\n## 1.1 什么是Docker？\n\nDocker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为**容器**。\nDocker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。\n传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。\n<!-- more -->\n## 1.2 为什么要使用docker？\n作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。\n\n- **更高效的利用系统资源**\n\n由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。\n\n\n- **更快速的启动时间**\n\n传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。\n\n\n- **一致的运行环境**\n\n开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。\n\n\n- **持续交付和部署**\n\n使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。\n\n\n- **更轻松的迁移**\n\n由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。\n\n\n- **更轻松的维护和扩展**\n\nDocker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。\n\n\n- **对比传统虚拟机总结**\n\n| 特性 | 容器 | 虚拟机 |\n| ----- | :-----: | :-----: |\n| **启动** | 秒级 | 分钟级 |\n| **硬盘使用** | 一般为MB | 一般为GB |\n| **性能** | 接近原生 | 弱于|\n| **系统支持量** | 单机支持上千个容器 | 一般几十个 |\n\n\n# 2. Docker的几个基本概念\n\n## 2.1 Docker镜像(image)\n\n我们都知道，**操作系统分为内核和用户空间**。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。\n\n\n因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为**分层存储的架构**。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。\n\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n\n\n**分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。**\n\n\n## 2.2 Docker容器(container)\n\n镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n**容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的*命名空间***。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。\n\n每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n\n容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。\n\n数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。\n\n## 2.3 Docker仓库(registry)\n镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。\n\n下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。\n### 2.3.1 公有仓库\n最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。\n\n由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。\n\n### 2.3.2 私有仓库\n用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。","source":"_posts/docker/Docker-01-docker介绍.md","raw":"---\ntitle: Docker-01-Docker介绍\ndate: 2018-03-06 01:45:16\ntags: \n    - docker\ncategories: \n    - docker\n---\n# 1.前言\n## 1.1 什么是Docker？\n\nDocker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为**容器**。\nDocker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。\n传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。\n<!-- more -->\n## 1.2 为什么要使用docker？\n作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。\n\n- **更高效的利用系统资源**\n\n由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。\n\n\n- **更快速的启动时间**\n\n传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。\n\n\n- **一致的运行环境**\n\n开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。\n\n\n- **持续交付和部署**\n\n使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。\n\n\n- **更轻松的迁移**\n\n由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。\n\n\n- **更轻松的维护和扩展**\n\nDocker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。\n\n\n- **对比传统虚拟机总结**\n\n| 特性 | 容器 | 虚拟机 |\n| ----- | :-----: | :-----: |\n| **启动** | 秒级 | 分钟级 |\n| **硬盘使用** | 一般为MB | 一般为GB |\n| **性能** | 接近原生 | 弱于|\n| **系统支持量** | 单机支持上千个容器 | 一般几十个 |\n\n\n# 2. Docker的几个基本概念\n\n## 2.1 Docker镜像(image)\n\n我们都知道，**操作系统分为内核和用户空间**。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。\n\n\n因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为**分层存储的架构**。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。\n\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n\n\n**分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。**\n\n\n## 2.2 Docker容器(container)\n\n镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n**容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的*命名空间***。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。\n\n每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n\n容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。\n\n数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。\n\n## 2.3 Docker仓库(registry)\n镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。\n\n下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。\n### 2.3.1 公有仓库\n最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。\n\n由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。\n\n### 2.3.2 私有仓库\n用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。","slug":"docker/Docker-01-docker介绍","published":1,"updated":"2019-04-07T15:02:20.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw4kinc8000c892nq4lvop1b","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><h2 id=\"1-1-什么是Docker？\"><a href=\"#1-1-什么是Docker？\" class=\"headerlink\" title=\"1.1 什么是Docker？\"></a>1.1 什么是Docker？</h2><p>Docker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为<strong>容器</strong>。<br>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。<br>传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。<br><a id=\"more\"></a></p>\n<h2 id=\"1-2-为什么要使用docker？\"><a href=\"#1-2-为什么要使用docker？\" class=\"headerlink\" title=\"1.2 为什么要使用docker？\"></a>1.2 为什么要使用docker？</h2><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>\n<ul>\n<li><strong>更高效的利用系统资源</strong></li>\n</ul>\n<p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\n<ul>\n<li><strong>更快速的启动时间</strong></li>\n</ul>\n<p>传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。</p>\n<ul>\n<li><strong>一致的运行环境</strong></li>\n</ul>\n<p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。</p>\n<ul>\n<li><strong>持续交付和部署</strong></li>\n</ul>\n<p>使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。</p>\n<ul>\n<li><strong>更轻松的迁移</strong></li>\n</ul>\n<p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n<ul>\n<li><strong>更轻松的维护和扩展</strong></li>\n</ul>\n<p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n<ul>\n<li><strong>对比传统虚拟机总结</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th style=\"text-align:center\">容器</th>\n<th style=\"text-align:center\">虚拟机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>启动</strong></td>\n<td style=\"text-align:center\">秒级</td>\n<td style=\"text-align:center\">分钟级</td>\n</tr>\n<tr>\n<td><strong>硬盘使用</strong></td>\n<td style=\"text-align:center\">一般为MB</td>\n<td style=\"text-align:center\">一般为GB</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td style=\"text-align:center\">接近原生</td>\n<td style=\"text-align:center\">弱于</td>\n</tr>\n<tr>\n<td><strong>系统支持量</strong></td>\n<td style=\"text-align:center\">单机支持上千个容器</td>\n<td style=\"text-align:center\">一般几十个</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"2-Docker的几个基本概念\"><a href=\"#2-Docker的几个基本概念\" class=\"headerlink\" title=\"2. Docker的几个基本概念\"></a>2. Docker的几个基本概念</h1><h2 id=\"2-1-Docker镜像-image\"><a href=\"#2-1-Docker镜像-image\" class=\"headerlink\" title=\"2.1 Docker镜像(image)\"></a>2.1 Docker镜像(image)</h2><p>我们都知道，<strong>操作系统分为内核和用户空间</strong>。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。</p>\n<p>因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为<strong>分层存储的架构</strong>。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p><strong>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</strong></p>\n<h2 id=\"2-2-Docker容器-container\"><a href=\"#2-2-Docker容器-container\" class=\"headerlink\" title=\"2.2 Docker容器(container)\"></a>2.2 Docker容器(container)</h2><p>镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p><strong>容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的<em>命名空间</em></strong>。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。</p>\n<p>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。</p>\n<h2 id=\"2-3-Docker仓库-registry\"><a href=\"#2-3-Docker仓库-registry\" class=\"headerlink\" title=\"2.3 Docker仓库(registry)\"></a>2.3 Docker仓库(registry)</h2><p>镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</p>\n<p>下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。</p>\n<h3 id=\"2-3-1-公有仓库\"><a href=\"#2-3-1-公有仓库\" class=\"headerlink\" title=\"2.3.1 公有仓库\"></a>2.3.1 公有仓库</h3><p>最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。</p>\n<p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。</p>\n<h3 id=\"2-3-2-私有仓库\"><a href=\"#2-3-2-私有仓库\" class=\"headerlink\" title=\"2.3.2 私有仓库\"></a>2.3.2 私有仓库</h3><p>用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><h2 id=\"1-1-什么是Docker？\"><a href=\"#1-1-什么是Docker？\" class=\"headerlink\" title=\"1.1 什么是Docker？\"></a>1.1 什么是Docker？</h2><p>Docker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为<strong>容器</strong>。<br>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。<br>传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。<br>","more":"</p>\n<h2 id=\"1-2-为什么要使用docker？\"><a href=\"#1-2-为什么要使用docker？\" class=\"headerlink\" title=\"1.2 为什么要使用docker？\"></a>1.2 为什么要使用docker？</h2><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>\n<ul>\n<li><strong>更高效的利用系统资源</strong></li>\n</ul>\n<p>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\n<ul>\n<li><strong>更快速的启动时间</strong></li>\n</ul>\n<p>传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。</p>\n<ul>\n<li><strong>一致的运行环境</strong></li>\n</ul>\n<p>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。</p>\n<ul>\n<li><strong>持续交付和部署</strong></li>\n</ul>\n<p>使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。</p>\n<ul>\n<li><strong>更轻松的迁移</strong></li>\n</ul>\n<p>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n<ul>\n<li><strong>更轻松的维护和扩展</strong></li>\n</ul>\n<p>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n<ul>\n<li><strong>对比传统虚拟机总结</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th style=\"text-align:center\">容器</th>\n<th style=\"text-align:center\">虚拟机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>启动</strong></td>\n<td style=\"text-align:center\">秒级</td>\n<td style=\"text-align:center\">分钟级</td>\n</tr>\n<tr>\n<td><strong>硬盘使用</strong></td>\n<td style=\"text-align:center\">一般为MB</td>\n<td style=\"text-align:center\">一般为GB</td>\n</tr>\n<tr>\n<td><strong>性能</strong></td>\n<td style=\"text-align:center\">接近原生</td>\n<td style=\"text-align:center\">弱于</td>\n</tr>\n<tr>\n<td><strong>系统支持量</strong></td>\n<td style=\"text-align:center\">单机支持上千个容器</td>\n<td style=\"text-align:center\">一般几十个</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"2-Docker的几个基本概念\"><a href=\"#2-Docker的几个基本概念\" class=\"headerlink\" title=\"2. Docker的几个基本概念\"></a>2. Docker的几个基本概念</h1><h2 id=\"2-1-Docker镜像-image\"><a href=\"#2-1-Docker镜像-image\" class=\"headerlink\" title=\"2.1 Docker镜像(image)\"></a>2.1 Docker镜像(image)</h2><p>我们都知道，<strong>操作系统分为内核和用户空间</strong>。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。</p>\n<p>因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为<strong>分层存储的架构</strong>。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p><strong>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</strong></p>\n<h2 id=\"2-2-Docker容器-container\"><a href=\"#2-2-Docker容器-container\" class=\"headerlink\" title=\"2.2 Docker容器(container)\"></a>2.2 Docker容器(container)</h2><p>镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p><strong>容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的<em>命名空间</em></strong>。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。</p>\n<p>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。</p>\n<h2 id=\"2-3-Docker仓库-registry\"><a href=\"#2-3-Docker仓库-registry\" class=\"headerlink\" title=\"2.3 Docker仓库(registry)\"></a>2.3 Docker仓库(registry)</h2><p>镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</p>\n<p>下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。</p>\n<h3 id=\"2-3-1-公有仓库\"><a href=\"#2-3-1-公有仓库\" class=\"headerlink\" title=\"2.3.1 公有仓库\"></a>2.3.1 公有仓库</h3><p>最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。</p>\n<p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。</p>\n<h3 id=\"2-3-2-私有仓库\"><a href=\"#2-3-2-私有仓库\" class=\"headerlink\" title=\"2.3.2 私有仓库\"></a>2.3.2 私有仓库</h3><p>用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。</p>"},{"title":"Docker安装常用镜像","date":"2019-05-15T12:31:16.000Z","_content":"# 1.前言\n我们在平时的开发中可能会用到mysql，redis 还有mongodb等用于存储数据，但是有时候我们使用测试环境可能不太方便(例如:在家不能连接公司数据库)，这时候我们可以在本地或者自己的云服务器上就有了发挥的作用了，但是如果我们在本地安装这些的话就很占我们电脑的内存了，这时候docker就登场了。\n<!-- more -->\n# 2.安装docker\n## 2.1 在linux上安装docker\n在linux上安装docker其实是比较简单的，只需要在命令行中敲入即可，这里我以为Ubuntu系统为例:\n```bash\n$ sudo apt-get -y install docker.io\n```\n就这样docker就安装完了，我们可以输入docker，查看docker可以使用的命令。显示如下图，说明已经安装成功。\n```bash\n$ docker\n```\n![docker](/image/docker/docker-util.jpg)\n\n## 2.2 在macOS上安装docker\n### 2.2.1 macOS 我们可以使用 Homebrew 来安装 Docker\n```bash\n$ brew cask install docker\n\n==> Creating Caskroom at /usr/local/Caskroom\n==> We'll set permissions properly so we won't need sudo in the future\nPassword:          # 输入 macOS 密码\n==> Satisfying dependencies\n==> Downloading https://download.docker.com/mac/stable/21090/Docker.dmg\n######################################################################## 100.0%\n==> Verifying checksum for Cask docker\n==> Installing Cask docker\n==> Moving App 'Docker.app' to '/Applications/Docker.app'.\n&#x1f37a;  docker was successfully installed!\n```\n### 2.2.2 手动下载安装\n点击以下链接下载[dmg下载链接](https://download.docker.com/mac/stable/Docker.dmg) 如同 macOS 其它软件一样，安装也非常简单，双击下载的 .dmg 文件，然后将鲸鱼图标拖拽到Application 文件夹即可。\n\n## 2.3 在Windows上安装docker\n[windows下载链接](https://www.docker.com/get-docker) 和windows其他程序安装方式相同。\n\n# 3.基于docker安装常用镜像\n## 3.1 安装mysql\n**/data/docker/mysql** 是宿主机目录用来映射mysql的数据\n### 3.1.1 安装\n```bash\n$ docker pull mysql:8.0.16\n```\n等待下载完成后即安装完成，接下来就是启动镜像了。\n### 3.1.2 启动镜像\n- **普通启动**\n```bash\n$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /data/docker/mysql:/var/lib/mysql -d mysql:8.0.16\n\n```\n启动镜像名称为mysql，前面一个端口是映射端口，`root`是数据库密码，**/data/docker/mysql** 是宿主机目录用来保存mysql的数据。\n- **设置时区和宿主机相同启动**\n```bash\n$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql:/var/lib/mysql -d mysql:8.0.16\n\n```\n启动镜像名称为mysql，前面一个端口是映射端口，`root`是数据库密码， **-v /etc/localtime:/etc/localtime**是设置时区与宿主机一致，**/data/docker/mysql** 是宿主机目录用来保存mysql的数据。\n\n### 3.1.3 启动mysql\n```bash\n$ docker start mysql\n```\n\n## 3.2 安装redis\n### 3.2.1 安装redis\n```bash\n$ docker pull reids:5.0.4\n```\n\n### 3.2.2 启动镜像\n```bash\n$ docker run --name redis -p 6379:6379 -v /data/docker/redis:/data -d redis:5.0.4 redis-server --appendonly yes --requirepass \"root\"\n\n```\n启动镜像名称为redis，前面一个端口是映射端口，**/data/docker/redis**是宿主机数据保存地址 **，appendonly yes**是后台启动，**requirepass \"root\"**是设置密码为`root`\n\n### 3.2.3 启动ridis\n```bash\n$ docker start redis\n```\n\n\n## 3.3 安装MongoDB\n### 3.3.1 安装MongoDB\n```bash\n$ docker pull mongo\n```\n\n### 3.3.2 启动镜像\n- 启动\n```bash\n$ docker run --name mongo -p 27017:27017 -v /data/docker/mongo:/data/db -d mongo:latest --auth\n\n```\n- 新建管理员\n```bash\n$ docker exec -it mongo mongo admin\n>>  db.createUser({ user: 'admin', pwd: 'admin', roles: [ { role: 'userAdminAnyDatabase', db: 'admin' } ]});\n```\n执行之后看到如下信息则创建成功。\n```bash\nSuccessfully added user: {\n    \"user\" : \"admin\",\n    \"roles\" : [\n        {\n            \"role\" : \"userAdminAnyDatabase\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n```\n\n### 3.3.3 启动MongoDB\n```bash\n$ docker start mongo\n```\n\n# 3. 结语\n我们在使用docker的时候有时候想进入容器可以使用如下命令进入，最后的mysql可以使用容器的名称或者容器的id。\n```bash\n$ docker exec -it mysql /bin/bash\n```\n\n\n","source":"_posts/docker/Docker安装常用镜像.md","raw":"---\ntitle: Docker安装常用镜像\ndate: 2019-05-15 20:31:16\ntags:\n    - docker\ncategories: \n    - docker\n---\n# 1.前言\n我们在平时的开发中可能会用到mysql，redis 还有mongodb等用于存储数据，但是有时候我们使用测试环境可能不太方便(例如:在家不能连接公司数据库)，这时候我们可以在本地或者自己的云服务器上就有了发挥的作用了，但是如果我们在本地安装这些的话就很占我们电脑的内存了，这时候docker就登场了。\n<!-- more -->\n# 2.安装docker\n## 2.1 在linux上安装docker\n在linux上安装docker其实是比较简单的，只需要在命令行中敲入即可，这里我以为Ubuntu系统为例:\n```bash\n$ sudo apt-get -y install docker.io\n```\n就这样docker就安装完了，我们可以输入docker，查看docker可以使用的命令。显示如下图，说明已经安装成功。\n```bash\n$ docker\n```\n![docker](/image/docker/docker-util.jpg)\n\n## 2.2 在macOS上安装docker\n### 2.2.1 macOS 我们可以使用 Homebrew 来安装 Docker\n```bash\n$ brew cask install docker\n\n==> Creating Caskroom at /usr/local/Caskroom\n==> We'll set permissions properly so we won't need sudo in the future\nPassword:          # 输入 macOS 密码\n==> Satisfying dependencies\n==> Downloading https://download.docker.com/mac/stable/21090/Docker.dmg\n######################################################################## 100.0%\n==> Verifying checksum for Cask docker\n==> Installing Cask docker\n==> Moving App 'Docker.app' to '/Applications/Docker.app'.\n&#x1f37a;  docker was successfully installed!\n```\n### 2.2.2 手动下载安装\n点击以下链接下载[dmg下载链接](https://download.docker.com/mac/stable/Docker.dmg) 如同 macOS 其它软件一样，安装也非常简单，双击下载的 .dmg 文件，然后将鲸鱼图标拖拽到Application 文件夹即可。\n\n## 2.3 在Windows上安装docker\n[windows下载链接](https://www.docker.com/get-docker) 和windows其他程序安装方式相同。\n\n# 3.基于docker安装常用镜像\n## 3.1 安装mysql\n**/data/docker/mysql** 是宿主机目录用来映射mysql的数据\n### 3.1.1 安装\n```bash\n$ docker pull mysql:8.0.16\n```\n等待下载完成后即安装完成，接下来就是启动镜像了。\n### 3.1.2 启动镜像\n- **普通启动**\n```bash\n$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /data/docker/mysql:/var/lib/mysql -d mysql:8.0.16\n\n```\n启动镜像名称为mysql，前面一个端口是映射端口，`root`是数据库密码，**/data/docker/mysql** 是宿主机目录用来保存mysql的数据。\n- **设置时区和宿主机相同启动**\n```bash\n$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql:/var/lib/mysql -d mysql:8.0.16\n\n```\n启动镜像名称为mysql，前面一个端口是映射端口，`root`是数据库密码， **-v /etc/localtime:/etc/localtime**是设置时区与宿主机一致，**/data/docker/mysql** 是宿主机目录用来保存mysql的数据。\n\n### 3.1.3 启动mysql\n```bash\n$ docker start mysql\n```\n\n## 3.2 安装redis\n### 3.2.1 安装redis\n```bash\n$ docker pull reids:5.0.4\n```\n\n### 3.2.2 启动镜像\n```bash\n$ docker run --name redis -p 6379:6379 -v /data/docker/redis:/data -d redis:5.0.4 redis-server --appendonly yes --requirepass \"root\"\n\n```\n启动镜像名称为redis，前面一个端口是映射端口，**/data/docker/redis**是宿主机数据保存地址 **，appendonly yes**是后台启动，**requirepass \"root\"**是设置密码为`root`\n\n### 3.2.3 启动ridis\n```bash\n$ docker start redis\n```\n\n\n## 3.3 安装MongoDB\n### 3.3.1 安装MongoDB\n```bash\n$ docker pull mongo\n```\n\n### 3.3.2 启动镜像\n- 启动\n```bash\n$ docker run --name mongo -p 27017:27017 -v /data/docker/mongo:/data/db -d mongo:latest --auth\n\n```\n- 新建管理员\n```bash\n$ docker exec -it mongo mongo admin\n>>  db.createUser({ user: 'admin', pwd: 'admin', roles: [ { role: 'userAdminAnyDatabase', db: 'admin' } ]});\n```\n执行之后看到如下信息则创建成功。\n```bash\nSuccessfully added user: {\n    \"user\" : \"admin\",\n    \"roles\" : [\n        {\n            \"role\" : \"userAdminAnyDatabase\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n```\n\n### 3.3.3 启动MongoDB\n```bash\n$ docker start mongo\n```\n\n# 3. 结语\n我们在使用docker的时候有时候想进入容器可以使用如下命令进入，最后的mysql可以使用容器的名称或者容器的id。\n```bash\n$ docker exec -it mysql /bin/bash\n```\n\n\n","slug":"docker/Docker安装常用镜像","published":1,"updated":"2019-05-16T04:57:47.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw4kinc9000f892n8ydmj44d","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><p>我们在平时的开发中可能会用到mysql，redis 还有mongodb等用于存储数据，但是有时候我们使用测试环境可能不太方便(例如:在家不能连接公司数据库)，这时候我们可以在本地或者自己的云服务器上就有了发挥的作用了，但是如果我们在本地安装这些的话就很占我们电脑的内存了，这时候docker就登场了。<br><a id=\"more\"></a></p>\n<h1 id=\"2-安装docker\"><a href=\"#2-安装docker\" class=\"headerlink\" title=\"2.安装docker\"></a>2.安装docker</h1><h2 id=\"2-1-在linux上安装docker\"><a href=\"#2-1-在linux上安装docker\" class=\"headerlink\" title=\"2.1 在linux上安装docker\"></a>2.1 在linux上安装docker</h2><p>在linux上安装docker其实是比较简单的，只需要在命令行中敲入即可，这里我以为Ubuntu系统为例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get -y install docker.io</span><br></pre></td></tr></table></figure></p>\n<p>就这样docker就安装完了，我们可以输入docker，查看docker可以使用的命令。显示如下图，说明已经安装成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/image/docker/docker-util.jpg\" alt=\"docker\"></p>\n<h2 id=\"2-2-在macOS上安装docker\"><a href=\"#2-2-在macOS上安装docker\" class=\"headerlink\" title=\"2.2 在macOS上安装docker\"></a>2.2 在macOS上安装docker</h2><h3 id=\"2-2-1-macOS-我们可以使用-Homebrew-来安装-Docker\"><a href=\"#2-2-1-macOS-我们可以使用-Homebrew-来安装-Docker\" class=\"headerlink\" title=\"2.2.1 macOS 我们可以使用 Homebrew 来安装 Docker\"></a>2.2.1 macOS 我们可以使用 Homebrew 来安装 Docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew cask install docker</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; Creating Caskroom at /usr/<span class=\"built_in\">local</span>/Caskroom</span><br><span class=\"line\">==&gt; We<span class=\"string\">'ll set permissions properly so we won'</span>t need sudo <span class=\"keyword\">in</span> the future</span><br><span class=\"line\">Password:          <span class=\"comment\"># 输入 macOS 密码</span></span><br><span class=\"line\">==&gt; Satisfying dependencies</span><br><span class=\"line\">==&gt; Downloading https://download.docker.com/mac/stable/21090/Docker.dmg</span><br><span class=\"line\"><span class=\"comment\">######################################################################## 100.0%</span></span><br><span class=\"line\">==&gt; Verifying checksum <span class=\"keyword\">for</span> Cask docker</span><br><span class=\"line\">==&gt; Installing Cask docker</span><br><span class=\"line\">==&gt; Moving App <span class=\"string\">'Docker.app'</span> to <span class=\"string\">'/Applications/Docker.app'</span>.</span><br><span class=\"line\">&amp;<span class=\"comment\">#x1f37a;  docker was successfully installed!</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-2-手动下载安装\"><a href=\"#2-2-2-手动下载安装\" class=\"headerlink\" title=\"2.2.2 手动下载安装\"></a>2.2.2 手动下载安装</h3><p>点击以下链接下载<a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"noopener\">dmg下载链接</a> 如同 macOS 其它软件一样，安装也非常简单，双击下载的 .dmg 文件，然后将鲸鱼图标拖拽到Application 文件夹即可。</p>\n<h2 id=\"2-3-在Windows上安装docker\"><a href=\"#2-3-在Windows上安装docker\" class=\"headerlink\" title=\"2.3 在Windows上安装docker\"></a>2.3 在Windows上安装docker</h2><p><a href=\"https://www.docker.com/get-docker\" target=\"_blank\" rel=\"noopener\">windows下载链接</a> 和windows其他程序安装方式相同。</p>\n<h1 id=\"3-基于docker安装常用镜像\"><a href=\"#3-基于docker安装常用镜像\" class=\"headerlink\" title=\"3.基于docker安装常用镜像\"></a>3.基于docker安装常用镜像</h1><h2 id=\"3-1-安装mysql\"><a href=\"#3-1-安装mysql\" class=\"headerlink\" title=\"3.1 安装mysql\"></a>3.1 安装mysql</h2><p><strong>/data/docker/mysql</strong> 是宿主机目录用来映射mysql的数据</p>\n<h3 id=\"3-1-1-安装\"><a href=\"#3-1-1-安装\" class=\"headerlink\" title=\"3.1.1 安装\"></a>3.1.1 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull mysql:8.0.16</span><br></pre></td></tr></table></figure>\n<p>等待下载完成后即安装完成，接下来就是启动镜像了。</p>\n<h3 id=\"3-1-2-启动镜像\"><a href=\"#3-1-2-启动镜像\" class=\"headerlink\" title=\"3.1.2 启动镜像\"></a>3.1.2 启动镜像</h3><ul>\n<li><strong>普通启动</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /data/docker/mysql:/var/lib/mysql -d mysql:8.0.16</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>启动镜像名称为mysql，前面一个端口是映射端口，<code>root</code>是数据库密码，<strong>/data/docker/mysql</strong> 是宿主机目录用来保存mysql的数据。</p>\n<ul>\n<li><strong>设置时区和宿主机相同启动</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql:/var/lib/mysql -d mysql:8.0.16</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>启动镜像名称为mysql，前面一个端口是映射端口，<code>root</code>是数据库密码， <strong>-v /etc/localtime:/etc/localtime</strong>是设置时区与宿主机一致，<strong>/data/docker/mysql</strong> 是宿主机目录用来保存mysql的数据。</p>\n<h3 id=\"3-1-3-启动mysql\"><a href=\"#3-1-3-启动mysql\" class=\"headerlink\" title=\"3.1.3 启动mysql\"></a>3.1.3 启动mysql</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start mysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-安装redis\"><a href=\"#3-2-安装redis\" class=\"headerlink\" title=\"3.2 安装redis\"></a>3.2 安装redis</h2><h3 id=\"3-2-1-安装redis\"><a href=\"#3-2-1-安装redis\" class=\"headerlink\" title=\"3.2.1 安装redis\"></a>3.2.1 安装redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull reids:5.0.4</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-2-启动镜像\"><a href=\"#3-2-2-启动镜像\" class=\"headerlink\" title=\"3.2.2 启动镜像\"></a>3.2.2 启动镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name redis -p 6379:6379 -v /data/docker/redis:/data -d redis:5.0.4 redis-server --appendonly yes --requirepass <span class=\"string\">\"root\"</span></span><br></pre></td></tr></table></figure>\n<p>启动镜像名称为redis，前面一个端口是映射端口，<strong>/data/docker/redis</strong>是宿主机数据保存地址 <strong>，appendonly yes</strong>是后台启动，<strong>requirepass “root”</strong>是设置密码为<code>root</code></p>\n<h3 id=\"3-2-3-启动ridis\"><a href=\"#3-2-3-启动ridis\" class=\"headerlink\" title=\"3.2.3 启动ridis\"></a>3.2.3 启动ridis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start redis</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-安装MongoDB\"><a href=\"#3-3-安装MongoDB\" class=\"headerlink\" title=\"3.3 安装MongoDB\"></a>3.3 安装MongoDB</h2><h3 id=\"3-3-1-安装MongoDB\"><a href=\"#3-3-1-安装MongoDB\" class=\"headerlink\" title=\"3.3.1 安装MongoDB\"></a>3.3.1 安装MongoDB</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull mongo</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-2-启动镜像\"><a href=\"#3-3-2-启动镜像\" class=\"headerlink\" title=\"3.3.2 启动镜像\"></a>3.3.2 启动镜像</h3><ul>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mongo -p 27017:27017 -v /data/docker/mongo:/data/db -d mongo:latest --auth</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建管理员</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it mongo mongo admin</span><br><span class=\"line\">&gt;&gt;  db.createUser(&#123; user: <span class=\"string\">'admin'</span>, <span class=\"built_in\">pwd</span>: <span class=\"string\">'admin'</span>, roles: [ &#123; role: <span class=\"string\">'userAdminAnyDatabase'</span>, db: <span class=\"string\">'admin'</span> &#125; ]&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行之后看到如下信息则创建成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Successfully added user: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"user\"</span> : <span class=\"string\">\"admin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"roles\"</span> : [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"role\"</span> : <span class=\"string\">\"userAdminAnyDatabase\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"db\"</span> : <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-3-3-启动MongoDB\"><a href=\"#3-3-3-启动MongoDB\" class=\"headerlink\" title=\"3.3.3 启动MongoDB\"></a>3.3.3 启动MongoDB</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start mongo</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-结语\"><a href=\"#3-结语\" class=\"headerlink\" title=\"3. 结语\"></a>3. 结语</h1><p>我们在使用docker的时候有时候想进入容器可以使用如下命令进入，最后的mysql可以使用容器的名称或者容器的id。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it mysql /bin/bash</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><p>我们在平时的开发中可能会用到mysql，redis 还有mongodb等用于存储数据，但是有时候我们使用测试环境可能不太方便(例如:在家不能连接公司数据库)，这时候我们可以在本地或者自己的云服务器上就有了发挥的作用了，但是如果我们在本地安装这些的话就很占我们电脑的内存了，这时候docker就登场了。<br>","more":"</p>\n<h1 id=\"2-安装docker\"><a href=\"#2-安装docker\" class=\"headerlink\" title=\"2.安装docker\"></a>2.安装docker</h1><h2 id=\"2-1-在linux上安装docker\"><a href=\"#2-1-在linux上安装docker\" class=\"headerlink\" title=\"2.1 在linux上安装docker\"></a>2.1 在linux上安装docker</h2><p>在linux上安装docker其实是比较简单的，只需要在命令行中敲入即可，这里我以为Ubuntu系统为例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get -y install docker.io</span><br></pre></td></tr></table></figure></p>\n<p>就这样docker就安装完了，我们可以输入docker，查看docker可以使用的命令。显示如下图，说明已经安装成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/image/docker/docker-util.jpg\" alt=\"docker\"></p>\n<h2 id=\"2-2-在macOS上安装docker\"><a href=\"#2-2-在macOS上安装docker\" class=\"headerlink\" title=\"2.2 在macOS上安装docker\"></a>2.2 在macOS上安装docker</h2><h3 id=\"2-2-1-macOS-我们可以使用-Homebrew-来安装-Docker\"><a href=\"#2-2-1-macOS-我们可以使用-Homebrew-来安装-Docker\" class=\"headerlink\" title=\"2.2.1 macOS 我们可以使用 Homebrew 来安装 Docker\"></a>2.2.1 macOS 我们可以使用 Homebrew 来安装 Docker</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ brew cask install docker</span><br><span class=\"line\"></span><br><span class=\"line\">==&gt; Creating Caskroom at /usr/<span class=\"built_in\">local</span>/Caskroom</span><br><span class=\"line\">==&gt; We<span class=\"string\">'ll set permissions properly so we won'</span>t need sudo <span class=\"keyword\">in</span> the future</span><br><span class=\"line\">Password:          <span class=\"comment\"># 输入 macOS 密码</span></span><br><span class=\"line\">==&gt; Satisfying dependencies</span><br><span class=\"line\">==&gt; Downloading https://download.docker.com/mac/stable/21090/Docker.dmg</span><br><span class=\"line\"><span class=\"comment\">######################################################################## 100.0%</span></span><br><span class=\"line\">==&gt; Verifying checksum <span class=\"keyword\">for</span> Cask docker</span><br><span class=\"line\">==&gt; Installing Cask docker</span><br><span class=\"line\">==&gt; Moving App <span class=\"string\">'Docker.app'</span> to <span class=\"string\">'/Applications/Docker.app'</span>.</span><br><span class=\"line\">&amp;<span class=\"comment\">#x1f37a;  docker was successfully installed!</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-2-手动下载安装\"><a href=\"#2-2-2-手动下载安装\" class=\"headerlink\" title=\"2.2.2 手动下载安装\"></a>2.2.2 手动下载安装</h3><p>点击以下链接下载<a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"noopener\">dmg下载链接</a> 如同 macOS 其它软件一样，安装也非常简单，双击下载的 .dmg 文件，然后将鲸鱼图标拖拽到Application 文件夹即可。</p>\n<h2 id=\"2-3-在Windows上安装docker\"><a href=\"#2-3-在Windows上安装docker\" class=\"headerlink\" title=\"2.3 在Windows上安装docker\"></a>2.3 在Windows上安装docker</h2><p><a href=\"https://www.docker.com/get-docker\" target=\"_blank\" rel=\"noopener\">windows下载链接</a> 和windows其他程序安装方式相同。</p>\n<h1 id=\"3-基于docker安装常用镜像\"><a href=\"#3-基于docker安装常用镜像\" class=\"headerlink\" title=\"3.基于docker安装常用镜像\"></a>3.基于docker安装常用镜像</h1><h2 id=\"3-1-安装mysql\"><a href=\"#3-1-安装mysql\" class=\"headerlink\" title=\"3.1 安装mysql\"></a>3.1 安装mysql</h2><p><strong>/data/docker/mysql</strong> 是宿主机目录用来映射mysql的数据</p>\n<h3 id=\"3-1-1-安装\"><a href=\"#3-1-1-安装\" class=\"headerlink\" title=\"3.1.1 安装\"></a>3.1.1 安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull mysql:8.0.16</span><br></pre></td></tr></table></figure>\n<p>等待下载完成后即安装完成，接下来就是启动镜像了。</p>\n<h3 id=\"3-1-2-启动镜像\"><a href=\"#3-1-2-启动镜像\" class=\"headerlink\" title=\"3.1.2 启动镜像\"></a>3.1.2 启动镜像</h3><ul>\n<li><strong>普通启动</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /data/docker/mysql:/var/lib/mysql -d mysql:8.0.16</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>启动镜像名称为mysql，前面一个端口是映射端口，<code>root</code>是数据库密码，<strong>/data/docker/mysql</strong> 是宿主机目录用来保存mysql的数据。</p>\n<ul>\n<li><strong>设置时区和宿主机相同启动</strong><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mysql -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql:/var/lib/mysql -d mysql:8.0.16</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>启动镜像名称为mysql，前面一个端口是映射端口，<code>root</code>是数据库密码， <strong>-v /etc/localtime:/etc/localtime</strong>是设置时区与宿主机一致，<strong>/data/docker/mysql</strong> 是宿主机目录用来保存mysql的数据。</p>\n<h3 id=\"3-1-3-启动mysql\"><a href=\"#3-1-3-启动mysql\" class=\"headerlink\" title=\"3.1.3 启动mysql\"></a>3.1.3 启动mysql</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start mysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-安装redis\"><a href=\"#3-2-安装redis\" class=\"headerlink\" title=\"3.2 安装redis\"></a>3.2 安装redis</h2><h3 id=\"3-2-1-安装redis\"><a href=\"#3-2-1-安装redis\" class=\"headerlink\" title=\"3.2.1 安装redis\"></a>3.2.1 安装redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull reids:5.0.4</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-2-启动镜像\"><a href=\"#3-2-2-启动镜像\" class=\"headerlink\" title=\"3.2.2 启动镜像\"></a>3.2.2 启动镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name redis -p 6379:6379 -v /data/docker/redis:/data -d redis:5.0.4 redis-server --appendonly yes --requirepass <span class=\"string\">\"root\"</span></span><br></pre></td></tr></table></figure>\n<p>启动镜像名称为redis，前面一个端口是映射端口，<strong>/data/docker/redis</strong>是宿主机数据保存地址 <strong>，appendonly yes</strong>是后台启动，<strong>requirepass “root”</strong>是设置密码为<code>root</code></p>\n<h3 id=\"3-2-3-启动ridis\"><a href=\"#3-2-3-启动ridis\" class=\"headerlink\" title=\"3.2.3 启动ridis\"></a>3.2.3 启动ridis</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start redis</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-安装MongoDB\"><a href=\"#3-3-安装MongoDB\" class=\"headerlink\" title=\"3.3 安装MongoDB\"></a>3.3 安装MongoDB</h2><h3 id=\"3-3-1-安装MongoDB\"><a href=\"#3-3-1-安装MongoDB\" class=\"headerlink\" title=\"3.3.1 安装MongoDB\"></a>3.3.1 安装MongoDB</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull mongo</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-2-启动镜像\"><a href=\"#3-3-2-启动镜像\" class=\"headerlink\" title=\"3.3.2 启动镜像\"></a>3.3.2 启动镜像</h3><ul>\n<li><p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mongo -p 27017:27017 -v /data/docker/mongo:/data/db -d mongo:latest --auth</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建管理员</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it mongo mongo admin</span><br><span class=\"line\">&gt;&gt;  db.createUser(&#123; user: <span class=\"string\">'admin'</span>, <span class=\"built_in\">pwd</span>: <span class=\"string\">'admin'</span>, roles: [ &#123; role: <span class=\"string\">'userAdminAnyDatabase'</span>, db: <span class=\"string\">'admin'</span> &#125; ]&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行之后看到如下信息则创建成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Successfully added user: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"user\"</span> : <span class=\"string\">\"admin\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"roles\"</span> : [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"role\"</span> : <span class=\"string\">\"userAdminAnyDatabase\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"db\"</span> : <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-3-3-启动MongoDB\"><a href=\"#3-3-3-启动MongoDB\" class=\"headerlink\" title=\"3.3.3 启动MongoDB\"></a>3.3.3 启动MongoDB</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start mongo</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-结语\"><a href=\"#3-结语\" class=\"headerlink\" title=\"3. 结语\"></a>3. 结语</h1><p>我们在使用docker的时候有时候想进入容器可以使用如下命令进入，最后的mysql可以使用容器的名称或者容器的id。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it mysql /bin/bash</span><br></pre></td></tr></table></figure></p>"},{"title":"Java8-Stream中的常用操作","date":"2019-05-16T14:23:11.000Z","_content":"# 1.前言\nJava8提供了很多新特性，其中有一个就是基于流Stream的操作。Stream是一组用来处理数组，集合的API\n## 1.1 特性\n- 不是数据结构，没有内部存储。\n- 不支持索引访问。\n- 延迟计算\n- 支持并行\n- 很容易生成数据或集合\n- 支持过滤，查找，转换，汇总，聚合等操作\n<!-- more -->\n\n## 1.2 运行机制\nStream分为源source，中间操作，终止操作。\n- 流的源可以是一个数组，集合，生成器方法，I/O通道等等。\n- 一个流可以有零个或多个中间操作，每一个中间操作都会返回一个新的流，供下一个操作使用，一个流只会有一个终止操作。\n- Stream只有遇到终止操作，它的源才会开始执行遍历操作。\n\n## 1.3 Stream的创建\n`Stream`的创建其实有很多方式，但是我们在平时用到最多的可能就是基于数组的Stream.of()和集合的stream()方法其实它还有很多种的创建方式，下面将一一列出，并且列举相关实例。\n- 1.通过数组,Stream.of()\n- 2.通过集合\n- 3.通过Stream.generate方法来创建\n- 4.通过Stram.iterate方法\n- 5.其他API\n```java \npublic class CreateStream {\n    // 1.通过数组,Stream.of()\n    static void create1(){\n        String[] str = {\"a\",\"b\",\"c\"};\n        Stream<String> str1 = Stream.of(str);\n    }\n    // 2.通过集合\n    static void create2(){\n        List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n        Stream<String> stream = strings.stream();\n    }\n    // 3.通过Stream.generate方法来创建\n    static void create3(){\n        //这是一个无限流，通过这种方法创建在操作的时候最好加上limit进行限制\n        Stream<Integer> generate = Stream.generate(() -> 1);\n        generate.limit(10).forEach(x -> System.out.println(x));\n    } \n    // 4.通过Stram.iterate方法\n    static void create4(){\n        Stream<Integer> iterate = Stream.iterate(1, x -> x +1);\n        iterate.forEach(x -> System.out.println(x));\n    }\n    // 5.其他API\n    static void create5(){\n        String str = \"abc\";\n        IntStream chars = str.chars();\n        chars.forEach(x -> System.out.println(x));\n    }\n}\n```\n\n# 2.Stream的常用操作(API)\n## 2.1 中间操作\n### 2.1.1 filter过滤\n接受一个谓词（一个返回boolean的函数）作为参数，并返回一个包括所有符合谓词的元素的流。说白了就是给一个条件，filter会根据这个条件截取流中得数据。\n```java\npublic static void testFilter(){\n    List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n    //截取所有能被2整除得数据\n    List<Integer> collect = integers.stream().filter(i -> i % 2 == 0).collect(Collectors.toList());\n    System.out.println(\"collect = \" + collect);\n}\n// 结果: collect = [2, 4, 6, 8, 10]\n```\n\n### 2.1.2 distinct去重\n返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流。\n```java\npublic static void main(String[] args) {\n    List<Integer> numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);\n    List<Integer> collect = numbers.stream().distinct().collect(Collectors.toList());\n    System.out.println(\"collect = \" + collect);\n}\n// 结果: collect = [1, 2, 3, 4]\n```\n\n### 2.1.3 sorted排序\n对流中得数据进行排序，可以以自然序或着用Comparator接口定义的排序规则来排序一个流。Comparator能使用lambada表达式来初始化，还能够逆序一个已经排序的流。\n```java\npublic static void main(String[] args) {\n    List<Integer> integers = Arrays.asList(5, 8, 2, 6, 41, 11);\n    //排序默认为顺序  顺序 = [2, 5, 6, 8, 11, 41]\n    List<Integer> sorted = integers.stream().sorted().collect(Collectors.toList());\n    System.out.println(\"顺序 = \" + sorted);\n    //逆序    逆序 = [41, 11, 8, 6, 5, 2]\n    List<Integer> reverseOrder = integers.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n    System.out.println(\"逆序 = \" + reverseOrder);\n    //也可以接收一个lambda\n    List<Integer> ages = integers.stream().sorted(Comparator.comparing(User::getAge)).collect(Collectors.toList());\n}\n```\n\n### 2.1.4 limit截取\n会返回一个不超过给定长度的流。\n```java\npublic static void testLimit(){\n    List<Integer> integers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);\n    List<Integer> collect = integers.stream().limit(3).collect(Collectors.toList());\n    System.out.println(\"collect = \" + collect);\n}\n// 结果: collect = [1, 2, 1]\n```\n\n### 2.1.5 skip舍弃\n会返回一个扔掉了前面n个元素的流。如果流中元素不足n个，则返回一个空流。\n```java\npublic static void testSkip(){\n    List<Integer> integers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);\n    //丢掉流中得前三个元素  \n    List<Integer> collect = integers.stream().skip(3).collect(Collectors.toList());\n    System.out.println(\"collect = \" + collect);\n}\n// 结果: collect = [3, 3, 2, 4]\n```\n\n### 2.1.6 map归纳\n接受一个函数作为参数，这个函数会被应用到每个元素上，并将其映射成一个新的元素。就是根据指定函数获取流中得每个元素得数据并重新组合成一个新的元素。\n```java\npublic static void main(String[] args) {\n    //自己建好得一个获取对象list得方法\n    List<Dish> dishList = Dish.getDishList();\n    //获取每一道菜得名称  并放到一个list中\n    List<String> collect = dishList.stream().map(Dish::getName).collect(Collectors.toList());\n    //collect = [pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon]\n    System.out.println(\"collect = \" + collect);\n}\n```\n\n### 2.1.7 flatMap扁平化\n该方法key可以让你把一个流中的每个值都换成另一个流，然后把所有的流都链接起来成为一个流。\n```java\npublic static void main(String[] args) {\n    String[] words = {\"Hello\", \"World\"};\n    List<String> collect = Stream.of(words).        //数组转换流\n            map(w -> w.split(\"\")).  //去掉“”并获取到两个String[]\n            flatMap(Arrays::stream).        //方法调用将两个String[]扁平化为一个stream\n            distinct().                     //去重    \n            collect(Collectors.toList());\n    //collect = [H, e, l, o, W, r, d]\n    System.out.println(\"collect = \" + collect);\n}\n```\n\n### 2.1.8 peek\npeek的设计初衷就是在流的每个元素恢复运行之前，插入执行一个动作。\n```java\npublic static void main(String[] args) {\n    List<Integer> numbers = Arrays.asList(2, 3, 4, 5);\n    List<Integer> result =\n            numbers.stream()\n                    .peek(x -> System.out.println(\"from stream: \" + x))\n                    .map(x -> x + 17)\n                    .peek(x -> System.out.println(\"after map: \" + x))\n                    .filter(x -> x % 2 == 0)\n                    .peek(x -> System.out.println(\"after filter: \" + x))\n                    .limit(3)\n                    .peek(x -> System.out.println(\"after limit: \" + x))\n                    .collect(Collectors.toList());\n}\n// 结果：\n//     from stream: 2\n//     after map: 19\n//     from stream: 3\n//     after map: 20\n//     after filter: 20\n//     after limit: 20\n//     from stream: 4\n//     after map: 21\n//     from stream: 5\n//     after map: 22\n//     after filter: 22\n//     after limit: 22\n\n```\n\n### 2.1.9 collect收集\n从上面得代码已经可以看出来，collect是将最终stream中得数据收集起来，最终生成一个list，set，或者map。\n```java\npublic static void main(String[] args) {\n    List<Dish> dishList = Dish.getDishList();\n    // list\n    List<Dish> collect = dishList.stream().limit(2).collect(Collectors.toList());\n    // set\n    Set<Dish> collect1 = dishList.stream().limit(2).collect(Collectors.toSet());\n    // map\n    Map<String, Dish.Type> collect2 = dishList.stream().limit(2).collect(Collectors.toMap(Dish::getName, Dish::getType));\n}\n\n```\n\n## 2.2 终止操作\n- 循环 forEach\n- 计算 min、max、count、average\n- 匹配 anyMatch、allMatch、noneMatch、findFirst、findAny\n- 汇聚 reduce\n- 收集器 collect\n\n## 2.3 查找和匹配\n常见的数据处理套路是看看数据集中的某些元素是否匹配一个给定的属性。Stream API通过allMatch，anyMatch，noneMatch，findFirst和findAny方法提供了这样的工具。\n查找和匹配都是终端操作。\n\n### 2.3.1 anyMatch\nanyMatch方法可以回答“流中是否有一个元素能匹配到给定的谓词”。会返回一个boolean值。\n```java\npublic class AnyMatch {\n    public static void main(String[] args) {\n        List<Dish> dish = Dish.getDish();\n        boolean b = dish.stream().anyMatch(Dish::isVegetarian);\n        System.out.println(b);\n    }\n}\n```\n\n### 2.3.2 allMatch\nallMatch方法和anyMatch类似，校验流中是否都能匹配到给定的谓词。\n```java\nclass AllMatch{\n    public static void main(String[] args) {\n        List<Dish> dish = Dish.getDish();\n        //是否所有菜的热量都小于1000\n        boolean b = dish.stream().allMatch(d -> d.getCalories() < 1000);\n        System.out.println(b);\n    }\n}\n```\n\n### 2.3.3 noneMatch\nnoneMatch方法可以确保流中没有任何元素与给定的谓词匹配。\n```java\nclass NoneMatch{\n    public static void main(String[] args) {\n        List<Dish> dish = Dish.getDish();\n        //没有任何菜的热量大于等于1000\n        boolean b = dish.stream().allMatch(d -> d.getCalories() >= 1000);\n        System.out.println(b);\n    }\n}\n```\n`anyMatch`，`noneMatch`，`allMatch`这三个操作都用到了所谓的短路。\n\n### 2.3.4 findAny\nfindAny方法将返回当前流中的符合过滤条件的任意元素。\n```java\nclass FindAny{\n    public static void main(String[] args) {\n        List<Dish> dish = Dish.getDish();\n        Optional<Dish> any = dish.stream().filter(Dish::isVegetarian).findAny();\n        System.out.println(\"any = \" + any);\n    }\n}\n```\n\n### 2.3.5 findFirst\nfindFirst方法能找到你想要的第一个元素。\n```java\nclass FindFirst{\n    public static void main(String[] args) {\n        List<Dish> dish = Dish.getDish();\n        Optional<Dish> any = dish.stream().filter(Dish::isVegetarian).findFirst();\n        System.out.println(\"any = \" + any);\n    }\n}\n```\n## 2.4 reduce 归约\n此类查询需要将流中所有元素反复结合起来，得到一个值，比如一个 Integer 。这样的查询可以被归类为归约操作（将流归约成一个值）。用函数式编程语言的术语来说，这称为折叠（fold），因为你可以将这个操\n作看成把一张长长的纸（你的流）反复折叠成一个小方块，而这就是折叠操作的结果。\n### 2.4.1 元素求和\n```java\npublic static void main(String[] args) {\n    List<Integer> integers = Arrays.asList(1, 2, 3, 6, 8);\n    //求list中的和，以0为基数\n    Integer reduce = integers.stream().reduce(0, (a, b) -> a + b);\n    //Integer的静态方法\n    int sum = integers.stream().reduce(0, Integer::sum);\n    System.out.println(\"reduce = \" + reduce);\n}\n```\n\n### 2.4.2 最大值和最小值\n```java\npublic static void main(String[] args) {\n    List<Integer> integers = Arrays.asList(1, 2, 3, 6, 8);\n    Optional<Integer> min = integers.stream().reduce(Integer::min);\n    System.out.println(\"min = \" + min);\n    Optional<Integer> max = integers.stream().reduce(Integer::max);\n    System.out.println(\"max = \" + max);\n}\n```\n\n## 2.5 Collectors 收集器\n### 2.5.1 查找流中的最大值和最小值 minBy maxBy\n```java\npublic static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    //创建一个Comparator来进行比较  比较菜的卡路里\n    Comparator<Dish> dishComparator = Comparator.comparingInt(Dish::getCalories);\n    //maxBy选出最大值\n    Optional<Dish> collect = dish.stream().collect(Collectors.maxBy(dishComparator));\n    System.out.println(\"collect = \" + collect);\n    //选出最小值\n    Optional<Dish> collect1 = dish.stream().collect(Collectors.minBy(dishComparator));\n    System.out.println(\"collect1 = \" + collect1);\n}\n```\n\n### 2.5.2 汇总 summingInt\n```java\n public static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    //计算总和\n    int collect = dish.stream().collect(Collectors.summingInt(Dish::getCalories));\n    System.out.println(\"collect = \" + collect);\n}\n```\n\n### 2.5.3 平均数 averagingInt\n```java\npublic static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    //计算平均数\n    Double collect = dish.stream().collect(Collectors.averagingInt(Dish::getCalories));\n    System.out.println(\"collect = \" + collect);\n}\n```\n\n### 2.5.4 连接字符串 joining\n```java\npublic static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    String collect = dish.stream().map(Dish::getName).collect(Collectors.joining());\n    System.out.println(\"collect = \" + collect);\n}\n```\njoining 工厂方法有一个重载版本可以接受元素之间的分界符，这样你就可以得到一个逗号分隔的菜肴名称列表。\n```java\nString collect = dish.stream().map(Dish::getName).collect(Collectors.joining(\", \"));\n```\n\n### 2.5.5 得到流中的总数 counting\n```java\nlong howManyDishes = dish.stream().collect(Collectors.counting());\n```\n\n## 2.6 分组\n### 2.6.1 分组 groupingBy\n```java\npublic static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    //groupingBy接受一个function作为参数\n    Map<Dish.Type, List<Dish>> collect = dish.stream().collect(Collectors.groupingBy(Dish::getType));\n    System.out.println(\"collect = \" + collect);\n}\n```\n如果想用以分类的条件可能比简单的属性访问器要复杂。例如，你可能想把热量不到400卡路里的菜划分为“低热量”（diet），热量400到700卡路里的菜划为“普通”（normal），高于700卡路里的划为“高热量”（fat）。由于Dish类的作者没有把这个操作写成一个方法，你无法使用方法引用，但你可以把这个逻辑写成Lambda表达式。\n```java\npublic static void main(String[] args) {\n    List<Dish> dishList = Dish.getDish();\n    Map<String, List<Dish>> collect = dishList.stream().collect(Collectors.groupingBy(dish->{\n        if (dish.getCalories() <= 400) {\n            return \"DIET\";\n        } else if (dish.getCalories() <= 700) {\n            return \"NORMAL\";\n        } else {\n            return \"FAT\";\n        }\n    }));\n    System.out.println(\"collect = \" + collect);\n}\n```\n### 2.6.2 多级分组\n要实现多级分组，我们可以使用一个由双参数版本的Collectors.groupingBy工厂方法创建的收集器，它除了普通的分类函数之外，还可以接受collector类型的第二个参数。那么要进行二级分组的话，我们可以把一个内层groupingBy传递给外层groupingBy，并定义一个为流中项目分类的二级标准。\n```java\npublic static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    Map<Dish.Type, Map<String, List<Dish>>> collect = dish.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.groupingBy(d -> {\n        if (d.getCalories() <= 400) {\n            return \"DIET\";\n        } else if (d.getCalories() <= 700) {\n            return \"NORMAL\";\n        } else {\n            return \"FAT\";\n        }\n    })));\n    System.out.println(\"collect = \" + collect);\n}\n```\n### 2.6.3 按子组收集数据\n在上一面，我们看到可以把第二个groupingBy收集器传递给外层收集器来实现多级分组。但进一步说，传递给第一个groupingBy的第二个收集器可以是任何类型，而不一定是另一个groupingBy。\n\n例如，要数一数菜单中每类菜有多少个，可以传递counting收集器作为groupingBy收集器的第二个参数。\n\n```java\nMap<Dish.Type, Long> typesCount = dish.stream().collect(groupingBy(Dish::getType, counting()));\n```\n普通的单参数groupingBy(f)（其中`f`是分类函数）实际上是 groupingBy(f,toList()) 的简便写法。\n\n# 3 并行流\n并行流就是一个把内容分成多个数据块，并用不同的线程分别处理每个数据块的流。这样一来，你就可以自动把给定操作的工作负荷分配给多核处理器的所有内核，让它们都忙起来。\n\n## 3.1 将顺序流转为并行流\n可以把流转换成并行流，从而让前面的函数归约过程（也就是求和）并行运行——对顺序流调用 parallel 方法:\n```java\npublic static long parallelSum(long n) {\n    return Stream.iterate(1L, i -> i + 1)\n            .limit(n)\n            .parallel()\n            .reduce(0L, Long::sum);\n}\n```\nStream在内部分成了几块。因此可以对不同的块独立并行进行归纳操作，最后，同一个归纳操作会将各个子流的部分归纳结果合并起来，得到整个原始流的归纳结果。\n![Stream并行流](/image/java8Stream.jpg)\n类似地，你只需要对并行流调用 sequential 方法就可以把它变成顺序流。\n\n看看流的parallel方法，你可能会想，并行流用的线程是从哪儿来的？有多少个？怎么自定义这个过程呢？\n并行流内部使用了默认的ForkJoinPool，它默认的线程数量就是你的处理器数量，这个值是由Runtime.getRuntime().available-Processors()得到的。\n\n但是你可以通过系统属性java.util.concurrent.ForkJoinPool.common.parallelism来改变线程池大小，如下所示：\n```java\nSystem.setProperty(\"java.util.concurrent.ForkJoinPool.common.parallelism\",\"12\");\n```\n这是一个全局设置，因此它将影响代码中所有的并行流。反过来说，目前还无法专为某个并行流指定这个值。一般而言，让ForkJoinPool的大小等于处理器数量是个不错的默认值，除非你有很好的理由，否则我们强烈建议你不要修改它。\n\n## 3.2 分支/合并框架\n分支/合并框架的目的是以递归方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果。它是ExecutorService接口的一个实现，它把子任务分配给线程池（称为ForkJoinPool）中的工作线程。\n### 3.2.1 使用RecursiveTask\n要把任务提交到这个池，必须创建RecursiveTask的一个子类，其中R是并行化任务（以\n及所有子任务）产生的结果类型，或者如果任务不返回结果，则是RecursiveAction类型（当\n然它可能会更新其他非局部机构）。\n要定义RecursiveTask，只需实现它唯一的抽象方法compute ：\n```java\nprotected abstract R compute();\n```\n这个方法同时定义了将任务拆分成子任务的逻辑，以及无法再拆分或不方便再拆分时，生成单个子任务结果的逻辑。\n\n### 3.2.2 使用RecursiveTask求和\n```java\npublic class ForkJoinSumCalculator\n        extends java.util.concurrent.RecursiveTask<Long> {\n    private final long[] numbers;\n    private final int start;\n    private final int end;\n    public static final long THRESHOLD = 10_000;\n\n    public ForkJoinSumCalculator(long[] numbers) {\n        this(numbers, 0, numbers.length);\n    }\n\n    private ForkJoinSumCalculator(long[] numbers, int start, int end) {\n        this.numbers = numbers;\n        this.start = start;\n        this.end = end;\n    }\n\n    @Override\n    protected Long compute() {\n        int length = end - start;\n        if (length <= THRESHOLD) {\n            return computeSequentially();\n        }\n        //创建一个子任务来为数组得前一半求和\n        ForkJoinSumCalculator leftTask =\n                new ForkJoinSumCalculator(numbers, start, start + length / 2);\n        //利 用 另 一 个ForkJoinPool线程异步执行新创建的子任务\n        leftTask.fork();\n        //创建一个子任务来为数组得后一半求和\n        ForkJoinSumCalculator rightTask =\n                new ForkJoinSumCalculator(numbers, start + length / 2, end);\n        //同步执行第二个子任务，有可能进一步递归\n        Long rightResult = rightTask.compute();\n        //读取第一个任务得结构，未完成就等待\n        Long leftResult = leftTask.join();\n        return leftResult + rightResult;\n    }\n\n    private long computeSequentially() {\n        long sum = 0;\n        for (int i = start; i < end; i++) {\n            sum += numbers[i];\n        }\n        return sum;\n    }\n\n    public static long forkJoinSum(long n) {\n        long[] numbers = LongStream.rangeClosed(1, n).toArray();\n        ForkJoinTask<Long> task = new ForkJoinSumCalculator(numbers);\n        return new ForkJoinPool().invoke(task);\n    }\n\n    public static void main(String[] args) {\n        long l = ForkJoinSumCalculator.forkJoinSum(5);\n        System.out.println(\"l = \" + l);\n    }\n}\n```\n","source":"_posts/java/Java8-Stream中常用操作.md","raw":"---\ntitle: Java8-Stream中的常用操作\ndate: 2019-05-16 22:23:11\ntags:\n    - java8\n    - stream\ncategories: \n    - java\n---\n# 1.前言\nJava8提供了很多新特性，其中有一个就是基于流Stream的操作。Stream是一组用来处理数组，集合的API\n## 1.1 特性\n- 不是数据结构，没有内部存储。\n- 不支持索引访问。\n- 延迟计算\n- 支持并行\n- 很容易生成数据或集合\n- 支持过滤，查找，转换，汇总，聚合等操作\n<!-- more -->\n\n## 1.2 运行机制\nStream分为源source，中间操作，终止操作。\n- 流的源可以是一个数组，集合，生成器方法，I/O通道等等。\n- 一个流可以有零个或多个中间操作，每一个中间操作都会返回一个新的流，供下一个操作使用，一个流只会有一个终止操作。\n- Stream只有遇到终止操作，它的源才会开始执行遍历操作。\n\n## 1.3 Stream的创建\n`Stream`的创建其实有很多方式，但是我们在平时用到最多的可能就是基于数组的Stream.of()和集合的stream()方法其实它还有很多种的创建方式，下面将一一列出，并且列举相关实例。\n- 1.通过数组,Stream.of()\n- 2.通过集合\n- 3.通过Stream.generate方法来创建\n- 4.通过Stram.iterate方法\n- 5.其他API\n```java \npublic class CreateStream {\n    // 1.通过数组,Stream.of()\n    static void create1(){\n        String[] str = {\"a\",\"b\",\"c\"};\n        Stream<String> str1 = Stream.of(str);\n    }\n    // 2.通过集合\n    static void create2(){\n        List<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n        Stream<String> stream = strings.stream();\n    }\n    // 3.通过Stream.generate方法来创建\n    static void create3(){\n        //这是一个无限流，通过这种方法创建在操作的时候最好加上limit进行限制\n        Stream<Integer> generate = Stream.generate(() -> 1);\n        generate.limit(10).forEach(x -> System.out.println(x));\n    } \n    // 4.通过Stram.iterate方法\n    static void create4(){\n        Stream<Integer> iterate = Stream.iterate(1, x -> x +1);\n        iterate.forEach(x -> System.out.println(x));\n    }\n    // 5.其他API\n    static void create5(){\n        String str = \"abc\";\n        IntStream chars = str.chars();\n        chars.forEach(x -> System.out.println(x));\n    }\n}\n```\n\n# 2.Stream的常用操作(API)\n## 2.1 中间操作\n### 2.1.1 filter过滤\n接受一个谓词（一个返回boolean的函数）作为参数，并返回一个包括所有符合谓词的元素的流。说白了就是给一个条件，filter会根据这个条件截取流中得数据。\n```java\npublic static void testFilter(){\n    List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n    //截取所有能被2整除得数据\n    List<Integer> collect = integers.stream().filter(i -> i % 2 == 0).collect(Collectors.toList());\n    System.out.println(\"collect = \" + collect);\n}\n// 结果: collect = [2, 4, 6, 8, 10]\n```\n\n### 2.1.2 distinct去重\n返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流。\n```java\npublic static void main(String[] args) {\n    List<Integer> numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);\n    List<Integer> collect = numbers.stream().distinct().collect(Collectors.toList());\n    System.out.println(\"collect = \" + collect);\n}\n// 结果: collect = [1, 2, 3, 4]\n```\n\n### 2.1.3 sorted排序\n对流中得数据进行排序，可以以自然序或着用Comparator接口定义的排序规则来排序一个流。Comparator能使用lambada表达式来初始化，还能够逆序一个已经排序的流。\n```java\npublic static void main(String[] args) {\n    List<Integer> integers = Arrays.asList(5, 8, 2, 6, 41, 11);\n    //排序默认为顺序  顺序 = [2, 5, 6, 8, 11, 41]\n    List<Integer> sorted = integers.stream().sorted().collect(Collectors.toList());\n    System.out.println(\"顺序 = \" + sorted);\n    //逆序    逆序 = [41, 11, 8, 6, 5, 2]\n    List<Integer> reverseOrder = integers.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n    System.out.println(\"逆序 = \" + reverseOrder);\n    //也可以接收一个lambda\n    List<Integer> ages = integers.stream().sorted(Comparator.comparing(User::getAge)).collect(Collectors.toList());\n}\n```\n\n### 2.1.4 limit截取\n会返回一个不超过给定长度的流。\n```java\npublic static void testLimit(){\n    List<Integer> integers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);\n    List<Integer> collect = integers.stream().limit(3).collect(Collectors.toList());\n    System.out.println(\"collect = \" + collect);\n}\n// 结果: collect = [1, 2, 1]\n```\n\n### 2.1.5 skip舍弃\n会返回一个扔掉了前面n个元素的流。如果流中元素不足n个，则返回一个空流。\n```java\npublic static void testSkip(){\n    List<Integer> integers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);\n    //丢掉流中得前三个元素  \n    List<Integer> collect = integers.stream().skip(3).collect(Collectors.toList());\n    System.out.println(\"collect = \" + collect);\n}\n// 结果: collect = [3, 3, 2, 4]\n```\n\n### 2.1.6 map归纳\n接受一个函数作为参数，这个函数会被应用到每个元素上，并将其映射成一个新的元素。就是根据指定函数获取流中得每个元素得数据并重新组合成一个新的元素。\n```java\npublic static void main(String[] args) {\n    //自己建好得一个获取对象list得方法\n    List<Dish> dishList = Dish.getDishList();\n    //获取每一道菜得名称  并放到一个list中\n    List<String> collect = dishList.stream().map(Dish::getName).collect(Collectors.toList());\n    //collect = [pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon]\n    System.out.println(\"collect = \" + collect);\n}\n```\n\n### 2.1.7 flatMap扁平化\n该方法key可以让你把一个流中的每个值都换成另一个流，然后把所有的流都链接起来成为一个流。\n```java\npublic static void main(String[] args) {\n    String[] words = {\"Hello\", \"World\"};\n    List<String> collect = Stream.of(words).        //数组转换流\n            map(w -> w.split(\"\")).  //去掉“”并获取到两个String[]\n            flatMap(Arrays::stream).        //方法调用将两个String[]扁平化为一个stream\n            distinct().                     //去重    \n            collect(Collectors.toList());\n    //collect = [H, e, l, o, W, r, d]\n    System.out.println(\"collect = \" + collect);\n}\n```\n\n### 2.1.8 peek\npeek的设计初衷就是在流的每个元素恢复运行之前，插入执行一个动作。\n```java\npublic static void main(String[] args) {\n    List<Integer> numbers = Arrays.asList(2, 3, 4, 5);\n    List<Integer> result =\n            numbers.stream()\n                    .peek(x -> System.out.println(\"from stream: \" + x))\n                    .map(x -> x + 17)\n                    .peek(x -> System.out.println(\"after map: \" + x))\n                    .filter(x -> x % 2 == 0)\n                    .peek(x -> System.out.println(\"after filter: \" + x))\n                    .limit(3)\n                    .peek(x -> System.out.println(\"after limit: \" + x))\n                    .collect(Collectors.toList());\n}\n// 结果：\n//     from stream: 2\n//     after map: 19\n//     from stream: 3\n//     after map: 20\n//     after filter: 20\n//     after limit: 20\n//     from stream: 4\n//     after map: 21\n//     from stream: 5\n//     after map: 22\n//     after filter: 22\n//     after limit: 22\n\n```\n\n### 2.1.9 collect收集\n从上面得代码已经可以看出来，collect是将最终stream中得数据收集起来，最终生成一个list，set，或者map。\n```java\npublic static void main(String[] args) {\n    List<Dish> dishList = Dish.getDishList();\n    // list\n    List<Dish> collect = dishList.stream().limit(2).collect(Collectors.toList());\n    // set\n    Set<Dish> collect1 = dishList.stream().limit(2).collect(Collectors.toSet());\n    // map\n    Map<String, Dish.Type> collect2 = dishList.stream().limit(2).collect(Collectors.toMap(Dish::getName, Dish::getType));\n}\n\n```\n\n## 2.2 终止操作\n- 循环 forEach\n- 计算 min、max、count、average\n- 匹配 anyMatch、allMatch、noneMatch、findFirst、findAny\n- 汇聚 reduce\n- 收集器 collect\n\n## 2.3 查找和匹配\n常见的数据处理套路是看看数据集中的某些元素是否匹配一个给定的属性。Stream API通过allMatch，anyMatch，noneMatch，findFirst和findAny方法提供了这样的工具。\n查找和匹配都是终端操作。\n\n### 2.3.1 anyMatch\nanyMatch方法可以回答“流中是否有一个元素能匹配到给定的谓词”。会返回一个boolean值。\n```java\npublic class AnyMatch {\n    public static void main(String[] args) {\n        List<Dish> dish = Dish.getDish();\n        boolean b = dish.stream().anyMatch(Dish::isVegetarian);\n        System.out.println(b);\n    }\n}\n```\n\n### 2.3.2 allMatch\nallMatch方法和anyMatch类似，校验流中是否都能匹配到给定的谓词。\n```java\nclass AllMatch{\n    public static void main(String[] args) {\n        List<Dish> dish = Dish.getDish();\n        //是否所有菜的热量都小于1000\n        boolean b = dish.stream().allMatch(d -> d.getCalories() < 1000);\n        System.out.println(b);\n    }\n}\n```\n\n### 2.3.3 noneMatch\nnoneMatch方法可以确保流中没有任何元素与给定的谓词匹配。\n```java\nclass NoneMatch{\n    public static void main(String[] args) {\n        List<Dish> dish = Dish.getDish();\n        //没有任何菜的热量大于等于1000\n        boolean b = dish.stream().allMatch(d -> d.getCalories() >= 1000);\n        System.out.println(b);\n    }\n}\n```\n`anyMatch`，`noneMatch`，`allMatch`这三个操作都用到了所谓的短路。\n\n### 2.3.4 findAny\nfindAny方法将返回当前流中的符合过滤条件的任意元素。\n```java\nclass FindAny{\n    public static void main(String[] args) {\n        List<Dish> dish = Dish.getDish();\n        Optional<Dish> any = dish.stream().filter(Dish::isVegetarian).findAny();\n        System.out.println(\"any = \" + any);\n    }\n}\n```\n\n### 2.3.5 findFirst\nfindFirst方法能找到你想要的第一个元素。\n```java\nclass FindFirst{\n    public static void main(String[] args) {\n        List<Dish> dish = Dish.getDish();\n        Optional<Dish> any = dish.stream().filter(Dish::isVegetarian).findFirst();\n        System.out.println(\"any = \" + any);\n    }\n}\n```\n## 2.4 reduce 归约\n此类查询需要将流中所有元素反复结合起来，得到一个值，比如一个 Integer 。这样的查询可以被归类为归约操作（将流归约成一个值）。用函数式编程语言的术语来说，这称为折叠（fold），因为你可以将这个操\n作看成把一张长长的纸（你的流）反复折叠成一个小方块，而这就是折叠操作的结果。\n### 2.4.1 元素求和\n```java\npublic static void main(String[] args) {\n    List<Integer> integers = Arrays.asList(1, 2, 3, 6, 8);\n    //求list中的和，以0为基数\n    Integer reduce = integers.stream().reduce(0, (a, b) -> a + b);\n    //Integer的静态方法\n    int sum = integers.stream().reduce(0, Integer::sum);\n    System.out.println(\"reduce = \" + reduce);\n}\n```\n\n### 2.4.2 最大值和最小值\n```java\npublic static void main(String[] args) {\n    List<Integer> integers = Arrays.asList(1, 2, 3, 6, 8);\n    Optional<Integer> min = integers.stream().reduce(Integer::min);\n    System.out.println(\"min = \" + min);\n    Optional<Integer> max = integers.stream().reduce(Integer::max);\n    System.out.println(\"max = \" + max);\n}\n```\n\n## 2.5 Collectors 收集器\n### 2.5.1 查找流中的最大值和最小值 minBy maxBy\n```java\npublic static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    //创建一个Comparator来进行比较  比较菜的卡路里\n    Comparator<Dish> dishComparator = Comparator.comparingInt(Dish::getCalories);\n    //maxBy选出最大值\n    Optional<Dish> collect = dish.stream().collect(Collectors.maxBy(dishComparator));\n    System.out.println(\"collect = \" + collect);\n    //选出最小值\n    Optional<Dish> collect1 = dish.stream().collect(Collectors.minBy(dishComparator));\n    System.out.println(\"collect1 = \" + collect1);\n}\n```\n\n### 2.5.2 汇总 summingInt\n```java\n public static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    //计算总和\n    int collect = dish.stream().collect(Collectors.summingInt(Dish::getCalories));\n    System.out.println(\"collect = \" + collect);\n}\n```\n\n### 2.5.3 平均数 averagingInt\n```java\npublic static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    //计算平均数\n    Double collect = dish.stream().collect(Collectors.averagingInt(Dish::getCalories));\n    System.out.println(\"collect = \" + collect);\n}\n```\n\n### 2.5.4 连接字符串 joining\n```java\npublic static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    String collect = dish.stream().map(Dish::getName).collect(Collectors.joining());\n    System.out.println(\"collect = \" + collect);\n}\n```\njoining 工厂方法有一个重载版本可以接受元素之间的分界符，这样你就可以得到一个逗号分隔的菜肴名称列表。\n```java\nString collect = dish.stream().map(Dish::getName).collect(Collectors.joining(\", \"));\n```\n\n### 2.5.5 得到流中的总数 counting\n```java\nlong howManyDishes = dish.stream().collect(Collectors.counting());\n```\n\n## 2.6 分组\n### 2.6.1 分组 groupingBy\n```java\npublic static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    //groupingBy接受一个function作为参数\n    Map<Dish.Type, List<Dish>> collect = dish.stream().collect(Collectors.groupingBy(Dish::getType));\n    System.out.println(\"collect = \" + collect);\n}\n```\n如果想用以分类的条件可能比简单的属性访问器要复杂。例如，你可能想把热量不到400卡路里的菜划分为“低热量”（diet），热量400到700卡路里的菜划为“普通”（normal），高于700卡路里的划为“高热量”（fat）。由于Dish类的作者没有把这个操作写成一个方法，你无法使用方法引用，但你可以把这个逻辑写成Lambda表达式。\n```java\npublic static void main(String[] args) {\n    List<Dish> dishList = Dish.getDish();\n    Map<String, List<Dish>> collect = dishList.stream().collect(Collectors.groupingBy(dish->{\n        if (dish.getCalories() <= 400) {\n            return \"DIET\";\n        } else if (dish.getCalories() <= 700) {\n            return \"NORMAL\";\n        } else {\n            return \"FAT\";\n        }\n    }));\n    System.out.println(\"collect = \" + collect);\n}\n```\n### 2.6.2 多级分组\n要实现多级分组，我们可以使用一个由双参数版本的Collectors.groupingBy工厂方法创建的收集器，它除了普通的分类函数之外，还可以接受collector类型的第二个参数。那么要进行二级分组的话，我们可以把一个内层groupingBy传递给外层groupingBy，并定义一个为流中项目分类的二级标准。\n```java\npublic static void main(String[] args) {\n    List<Dish> dish = Dish.getDish();\n    Map<Dish.Type, Map<String, List<Dish>>> collect = dish.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.groupingBy(d -> {\n        if (d.getCalories() <= 400) {\n            return \"DIET\";\n        } else if (d.getCalories() <= 700) {\n            return \"NORMAL\";\n        } else {\n            return \"FAT\";\n        }\n    })));\n    System.out.println(\"collect = \" + collect);\n}\n```\n### 2.6.3 按子组收集数据\n在上一面，我们看到可以把第二个groupingBy收集器传递给外层收集器来实现多级分组。但进一步说，传递给第一个groupingBy的第二个收集器可以是任何类型，而不一定是另一个groupingBy。\n\n例如，要数一数菜单中每类菜有多少个，可以传递counting收集器作为groupingBy收集器的第二个参数。\n\n```java\nMap<Dish.Type, Long> typesCount = dish.stream().collect(groupingBy(Dish::getType, counting()));\n```\n普通的单参数groupingBy(f)（其中`f`是分类函数）实际上是 groupingBy(f,toList()) 的简便写法。\n\n# 3 并行流\n并行流就是一个把内容分成多个数据块，并用不同的线程分别处理每个数据块的流。这样一来，你就可以自动把给定操作的工作负荷分配给多核处理器的所有内核，让它们都忙起来。\n\n## 3.1 将顺序流转为并行流\n可以把流转换成并行流，从而让前面的函数归约过程（也就是求和）并行运行——对顺序流调用 parallel 方法:\n```java\npublic static long parallelSum(long n) {\n    return Stream.iterate(1L, i -> i + 1)\n            .limit(n)\n            .parallel()\n            .reduce(0L, Long::sum);\n}\n```\nStream在内部分成了几块。因此可以对不同的块独立并行进行归纳操作，最后，同一个归纳操作会将各个子流的部分归纳结果合并起来，得到整个原始流的归纳结果。\n![Stream并行流](/image/java8Stream.jpg)\n类似地，你只需要对并行流调用 sequential 方法就可以把它变成顺序流。\n\n看看流的parallel方法，你可能会想，并行流用的线程是从哪儿来的？有多少个？怎么自定义这个过程呢？\n并行流内部使用了默认的ForkJoinPool，它默认的线程数量就是你的处理器数量，这个值是由Runtime.getRuntime().available-Processors()得到的。\n\n但是你可以通过系统属性java.util.concurrent.ForkJoinPool.common.parallelism来改变线程池大小，如下所示：\n```java\nSystem.setProperty(\"java.util.concurrent.ForkJoinPool.common.parallelism\",\"12\");\n```\n这是一个全局设置，因此它将影响代码中所有的并行流。反过来说，目前还无法专为某个并行流指定这个值。一般而言，让ForkJoinPool的大小等于处理器数量是个不错的默认值，除非你有很好的理由，否则我们强烈建议你不要修改它。\n\n## 3.2 分支/合并框架\n分支/合并框架的目的是以递归方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果。它是ExecutorService接口的一个实现，它把子任务分配给线程池（称为ForkJoinPool）中的工作线程。\n### 3.2.1 使用RecursiveTask\n要把任务提交到这个池，必须创建RecursiveTask的一个子类，其中R是并行化任务（以\n及所有子任务）产生的结果类型，或者如果任务不返回结果，则是RecursiveAction类型（当\n然它可能会更新其他非局部机构）。\n要定义RecursiveTask，只需实现它唯一的抽象方法compute ：\n```java\nprotected abstract R compute();\n```\n这个方法同时定义了将任务拆分成子任务的逻辑，以及无法再拆分或不方便再拆分时，生成单个子任务结果的逻辑。\n\n### 3.2.2 使用RecursiveTask求和\n```java\npublic class ForkJoinSumCalculator\n        extends java.util.concurrent.RecursiveTask<Long> {\n    private final long[] numbers;\n    private final int start;\n    private final int end;\n    public static final long THRESHOLD = 10_000;\n\n    public ForkJoinSumCalculator(long[] numbers) {\n        this(numbers, 0, numbers.length);\n    }\n\n    private ForkJoinSumCalculator(long[] numbers, int start, int end) {\n        this.numbers = numbers;\n        this.start = start;\n        this.end = end;\n    }\n\n    @Override\n    protected Long compute() {\n        int length = end - start;\n        if (length <= THRESHOLD) {\n            return computeSequentially();\n        }\n        //创建一个子任务来为数组得前一半求和\n        ForkJoinSumCalculator leftTask =\n                new ForkJoinSumCalculator(numbers, start, start + length / 2);\n        //利 用 另 一 个ForkJoinPool线程异步执行新创建的子任务\n        leftTask.fork();\n        //创建一个子任务来为数组得后一半求和\n        ForkJoinSumCalculator rightTask =\n                new ForkJoinSumCalculator(numbers, start + length / 2, end);\n        //同步执行第二个子任务，有可能进一步递归\n        Long rightResult = rightTask.compute();\n        //读取第一个任务得结构，未完成就等待\n        Long leftResult = leftTask.join();\n        return leftResult + rightResult;\n    }\n\n    private long computeSequentially() {\n        long sum = 0;\n        for (int i = start; i < end; i++) {\n            sum += numbers[i];\n        }\n        return sum;\n    }\n\n    public static long forkJoinSum(long n) {\n        long[] numbers = LongStream.rangeClosed(1, n).toArray();\n        ForkJoinTask<Long> task = new ForkJoinSumCalculator(numbers);\n        return new ForkJoinPool().invoke(task);\n    }\n\n    public static void main(String[] args) {\n        long l = ForkJoinSumCalculator.forkJoinSum(5);\n        System.out.println(\"l = \" + l);\n    }\n}\n```\n","slug":"java/Java8-Stream中常用操作","published":1,"updated":"2019-05-16T15:23:52.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw4kincb000g892nnwczngs1","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><p>Java8提供了很多新特性，其中有一个就是基于流Stream的操作。Stream是一组用来处理数组，集合的API</p>\n<h2 id=\"1-1-特性\"><a href=\"#1-1-特性\" class=\"headerlink\" title=\"1.1 特性\"></a>1.1 特性</h2><ul>\n<li>不是数据结构，没有内部存储。</li>\n<li>不支持索引访问。</li>\n<li>延迟计算</li>\n<li>支持并行</li>\n<li>很容易生成数据或集合</li>\n<li>支持过滤，查找，转换，汇总，聚合等操作<a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"1-2-运行机制\"><a href=\"#1-2-运行机制\" class=\"headerlink\" title=\"1.2 运行机制\"></a>1.2 运行机制</h2><p>Stream分为源source，中间操作，终止操作。</p>\n<ul>\n<li>流的源可以是一个数组，集合，生成器方法，I/O通道等等。</li>\n<li>一个流可以有零个或多个中间操作，每一个中间操作都会返回一个新的流，供下一个操作使用，一个流只会有一个终止操作。</li>\n<li>Stream只有遇到终止操作，它的源才会开始执行遍历操作。</li>\n</ul>\n<h2 id=\"1-3-Stream的创建\"><a href=\"#1-3-Stream的创建\" class=\"headerlink\" title=\"1.3 Stream的创建\"></a>1.3 Stream的创建</h2><p><code>Stream</code>的创建其实有很多方式，但是我们在平时用到最多的可能就是基于数组的Stream.of()和集合的stream()方法其实它还有很多种的创建方式，下面将一一列出，并且列举相关实例。</p>\n<ul>\n<li>1.通过数组,Stream.of()</li>\n<li>2.通过集合</li>\n<li>3.通过Stream.generate方法来创建</li>\n<li>4.通过Stram.iterate方法</li>\n<li>5.其他API<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateStream</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.通过数组,Stream.of()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String[] str = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>&#125;;</span><br><span class=\"line\">        Stream&lt;String&gt; str1 = Stream.of(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2.通过集合</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">        Stream&lt;String&gt; stream = strings.stream();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3.通过Stream.generate方法来创建</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这是一个无限流，通过这种方法创建在操作的时候最好加上limit进行限制</span></span><br><span class=\"line\">        Stream&lt;Integer&gt; generate = Stream.generate(() -&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        generate.limit(<span class=\"number\">10</span>).forEach(x -&gt; System.out.println(x));</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// 4.通过Stram.iterate方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create4</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Stream&lt;Integer&gt; iterate = Stream.iterate(<span class=\"number\">1</span>, x -&gt; x +<span class=\"number\">1</span>);</span><br><span class=\"line\">        iterate.forEach(x -&gt; System.out.println(x));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 5.其他API</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create5</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        IntStream chars = str.chars();</span><br><span class=\"line\">        chars.forEach(x -&gt; System.out.println(x));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"2-Stream的常用操作-API\"><a href=\"#2-Stream的常用操作-API\" class=\"headerlink\" title=\"2.Stream的常用操作(API)\"></a>2.Stream的常用操作(API)</h1><h2 id=\"2-1-中间操作\"><a href=\"#2-1-中间操作\" class=\"headerlink\" title=\"2.1 中间操作\"></a>2.1 中间操作</h2><h3 id=\"2-1-1-filter过滤\"><a href=\"#2-1-1-filter过滤\" class=\"headerlink\" title=\"2.1.1 filter过滤\"></a>2.1.1 filter过滤</h3><p>接受一个谓词（一个返回boolean的函数）作为参数，并返回一个包括所有符合谓词的元素的流。说白了就是给一个条件，filter会根据这个条件截取流中得数据。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">//截取所有能被2整除得数据</span></span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().filter(i -&gt; i % <span class=\"number\">2</span> == <span class=\"number\">0</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果: collect = [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-2-distinct去重\"><a href=\"#2-1-2-distinct去重\" class=\"headerlink\" title=\"2.1.2 distinct去重\"></a>2.1.2 distinct去重</h3><p>返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = numbers.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果: collect = [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-3-sorted排序\"><a href=\"#2-1-3-sorted排序\" class=\"headerlink\" title=\"2.1.3 sorted排序\"></a>2.1.3 sorted排序</h3><p>对流中得数据进行排序，可以以自然序或着用Comparator接口定义的排序规则来排序一个流。Comparator能使用lambada表达式来初始化，还能够逆序一个已经排序的流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">41</span>, <span class=\"number\">11</span>);</span><br><span class=\"line\">    <span class=\"comment\">//排序默认为顺序  顺序 = [2, 5, 6, 8, 11, 41]</span></span><br><span class=\"line\">    List&lt;Integer&gt; sorted = integers.stream().sorted().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"顺序 = \"</span> + sorted);</span><br><span class=\"line\">    <span class=\"comment\">//逆序    逆序 = [41, 11, 8, 6, 5, 2]</span></span><br><span class=\"line\">    List&lt;Integer&gt; reverseOrder = integers.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"逆序 = \"</span> + reverseOrder);</span><br><span class=\"line\">    <span class=\"comment\">//也可以接收一个lambda</span></span><br><span class=\"line\">    List&lt;Integer&gt; ages = integers.stream().sorted(Comparator.comparing(User::getAge)).collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-4-limit截取\"><a href=\"#2-1-4-limit截取\" class=\"headerlink\" title=\"2.1.4 limit截取\"></a>2.1.4 limit截取</h3><p>会返回一个不超过给定长度的流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testLimit</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().limit(<span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果: collect = [1, 2, 1]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-5-skip舍弃\"><a href=\"#2-1-5-skip舍弃\" class=\"headerlink\" title=\"2.1.5 skip舍弃\"></a>2.1.5 skip舍弃</h3><p>会返回一个扔掉了前面n个元素的流。如果流中元素不足n个，则返回一个空流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSkip</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">//丢掉流中得前三个元素  </span></span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().skip(<span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果: collect = [3, 3, 2, 4]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-6-map归纳\"><a href=\"#2-1-6-map归纳\" class=\"headerlink\" title=\"2.1.6 map归纳\"></a>2.1.6 map归纳</h3><p>接受一个函数作为参数，这个函数会被应用到每个元素上，并将其映射成一个新的元素。就是根据指定函数获取流中得每个元素得数据并重新组合成一个新的元素。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//自己建好得一个获取对象list得方法</span></span><br><span class=\"line\">    List&lt;Dish&gt; dishList = Dish.getDishList();</span><br><span class=\"line\">    <span class=\"comment\">//获取每一道菜得名称  并放到一个list中</span></span><br><span class=\"line\">    List&lt;String&gt; collect = dishList.stream().map(Dish::getName).collect(Collectors.toList());</span><br><span class=\"line\">    <span class=\"comment\">//collect = [pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon]</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-7-flatMap扁平化\"><a href=\"#2-1-7-flatMap扁平化\" class=\"headerlink\" title=\"2.1.7 flatMap扁平化\"></a>2.1.7 flatMap扁平化</h3><p>该方法key可以让你把一个流中的每个值都换成另一个流，然后把所有的流都链接起来成为一个流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    String[] words = &#123;<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"World\"</span>&#125;;</span><br><span class=\"line\">    List&lt;String&gt; collect = Stream.of(words).        <span class=\"comment\">//数组转换流</span></span><br><span class=\"line\">            map(w -&gt; w.split(<span class=\"string\">\"\"</span>)).  <span class=\"comment\">//去掉“”并获取到两个String[]</span></span><br><span class=\"line\">            flatMap(Arrays::stream).        <span class=\"comment\">//方法调用将两个String[]扁平化为一个stream</span></span><br><span class=\"line\">            distinct().                     <span class=\"comment\">//去重    </span></span><br><span class=\"line\">            collect(Collectors.toList());</span><br><span class=\"line\">    <span class=\"comment\">//collect = [H, e, l, o, W, r, d]</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-8-peek\"><a href=\"#2-1-8-peek\" class=\"headerlink\" title=\"2.1.8 peek\"></a>2.1.8 peek</h3><p>peek的设计初衷就是在流的每个元素恢复运行之前，插入执行一个动作。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; result =</span><br><span class=\"line\">            numbers.stream()</span><br><span class=\"line\">                    .peek(x -&gt; System.out.println(<span class=\"string\">\"from stream: \"</span> + x))</span><br><span class=\"line\">                    .map(x -&gt; x + <span class=\"number\">17</span>)</span><br><span class=\"line\">                    .peek(x -&gt; System.out.println(<span class=\"string\">\"after map: \"</span> + x))</span><br><span class=\"line\">                    .filter(x -&gt; x % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    .peek(x -&gt; System.out.println(<span class=\"string\">\"after filter: \"</span> + x))</span><br><span class=\"line\">                    .limit(<span class=\"number\">3</span>)</span><br><span class=\"line\">                    .peek(x -&gt; System.out.println(<span class=\"string\">\"after limit: \"</span> + x))</span><br><span class=\"line\">                    .collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：</span></span><br><span class=\"line\"><span class=\"comment\">//     from stream: 2</span></span><br><span class=\"line\"><span class=\"comment\">//     after map: 19</span></span><br><span class=\"line\"><span class=\"comment\">//     from stream: 3</span></span><br><span class=\"line\"><span class=\"comment\">//     after map: 20</span></span><br><span class=\"line\"><span class=\"comment\">//     after filter: 20</span></span><br><span class=\"line\"><span class=\"comment\">//     after limit: 20</span></span><br><span class=\"line\"><span class=\"comment\">//     from stream: 4</span></span><br><span class=\"line\"><span class=\"comment\">//     after map: 21</span></span><br><span class=\"line\"><span class=\"comment\">//     from stream: 5</span></span><br><span class=\"line\"><span class=\"comment\">//     after map: 22</span></span><br><span class=\"line\"><span class=\"comment\">//     after filter: 22</span></span><br><span class=\"line\"><span class=\"comment\">//     after limit: 22</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-9-collect收集\"><a href=\"#2-1-9-collect收集\" class=\"headerlink\" title=\"2.1.9 collect收集\"></a>2.1.9 collect收集</h3><p>从上面得代码已经可以看出来，collect是将最终stream中得数据收集起来，最终生成一个list，set，或者map。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dishList = Dish.getDishList();</span><br><span class=\"line\">    <span class=\"comment\">// list</span></span><br><span class=\"line\">    List&lt;Dish&gt; collect = dishList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">    <span class=\"comment\">// set</span></span><br><span class=\"line\">    Set&lt;Dish&gt; collect1 = dishList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toSet());</span><br><span class=\"line\">    <span class=\"comment\">// map</span></span><br><span class=\"line\">    Map&lt;String, Dish.Type&gt; collect2 = dishList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toMap(Dish::getName, Dish::getType));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-2-终止操作\"><a href=\"#2-2-终止操作\" class=\"headerlink\" title=\"2.2 终止操作\"></a>2.2 终止操作</h2><ul>\n<li>循环 forEach</li>\n<li>计算 min、max、count、average</li>\n<li>匹配 anyMatch、allMatch、noneMatch、findFirst、findAny</li>\n<li>汇聚 reduce</li>\n<li>收集器 collect</li>\n</ul>\n<h2 id=\"2-3-查找和匹配\"><a href=\"#2-3-查找和匹配\" class=\"headerlink\" title=\"2.3 查找和匹配\"></a>2.3 查找和匹配</h2><p>常见的数据处理套路是看看数据集中的某些元素是否匹配一个给定的属性。Stream API通过allMatch，anyMatch，noneMatch，findFirst和findAny方法提供了这样的工具。<br>查找和匹配都是终端操作。</p>\n<h3 id=\"2-3-1-anyMatch\"><a href=\"#2-3-1-anyMatch\" class=\"headerlink\" title=\"2.3.1 anyMatch\"></a>2.3.1 anyMatch</h3><p>anyMatch方法可以回答“流中是否有一个元素能匹配到给定的谓词”。会返回一个boolean值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnyMatch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> b = dish.stream().anyMatch(Dish::isVegetarian);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-2-allMatch\"><a href=\"#2-3-2-allMatch\" class=\"headerlink\" title=\"2.3.2 allMatch\"></a>2.3.2 allMatch</h3><p>allMatch方法和anyMatch类似，校验流中是否都能匹配到给定的谓词。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AllMatch</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">        <span class=\"comment\">//是否所有菜的热量都小于1000</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> b = dish.stream().allMatch(d -&gt; d.getCalories() &lt; <span class=\"number\">1000</span>);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-3-noneMatch\"><a href=\"#2-3-3-noneMatch\" class=\"headerlink\" title=\"2.3.3 noneMatch\"></a>2.3.3 noneMatch</h3><p>noneMatch方法可以确保流中没有任何元素与给定的谓词匹配。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoneMatch</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">        <span class=\"comment\">//没有任何菜的热量大于等于1000</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> b = dish.stream().allMatch(d -&gt; d.getCalories() &gt;= <span class=\"number\">1000</span>);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>anyMatch</code>，<code>noneMatch</code>，<code>allMatch</code>这三个操作都用到了所谓的短路。</p>\n<h3 id=\"2-3-4-findAny\"><a href=\"#2-3-4-findAny\" class=\"headerlink\" title=\"2.3.4 findAny\"></a>2.3.4 findAny</h3><p>findAny方法将返回当前流中的符合过滤条件的任意元素。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FindAny</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">        Optional&lt;Dish&gt; any = dish.stream().filter(Dish::isVegetarian).findAny();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"any = \"</span> + any);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-5-findFirst\"><a href=\"#2-3-5-findFirst\" class=\"headerlink\" title=\"2.3.5 findFirst\"></a>2.3.5 findFirst</h3><p>findFirst方法能找到你想要的第一个元素。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FindFirst</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">        Optional&lt;Dish&gt; any = dish.stream().filter(Dish::isVegetarian).findFirst();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"any = \"</span> + any);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-4-reduce-归约\"><a href=\"#2-4-reduce-归约\" class=\"headerlink\" title=\"2.4 reduce 归约\"></a>2.4 reduce 归约</h2><p>此类查询需要将流中所有元素反复结合起来，得到一个值，比如一个 Integer 。这样的查询可以被归类为归约操作（将流归约成一个值）。用函数式编程语言的术语来说，这称为折叠（fold），因为你可以将这个操<br>作看成把一张长长的纸（你的流）反复折叠成一个小方块，而这就是折叠操作的结果。</p>\n<h3 id=\"2-4-1-元素求和\"><a href=\"#2-4-1-元素求和\" class=\"headerlink\" title=\"2.4.1 元素求和\"></a>2.4.1 元素求和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"comment\">//求list中的和，以0为基数</span></span><br><span class=\"line\">    Integer reduce = integers.stream().reduce(<span class=\"number\">0</span>, (a, b) -&gt; a + b);</span><br><span class=\"line\">    <span class=\"comment\">//Integer的静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = integers.stream().reduce(<span class=\"number\">0</span>, Integer::sum);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"reduce = \"</span> + reduce);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-2-最大值和最小值\"><a href=\"#2-4-2-最大值和最小值\" class=\"headerlink\" title=\"2.4.2 最大值和最小值\"></a>2.4.2 最大值和最小值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">    Optional&lt;Integer&gt; min = integers.stream().reduce(Integer::min);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"min = \"</span> + min);</span><br><span class=\"line\">    Optional&lt;Integer&gt; max = integers.stream().reduce(Integer::max);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"max = \"</span> + max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-Collectors-收集器\"><a href=\"#2-5-Collectors-收集器\" class=\"headerlink\" title=\"2.5 Collectors 收集器\"></a>2.5 Collectors 收集器</h2><h3 id=\"2-5-1-查找流中的最大值和最小值-minBy-maxBy\"><a href=\"#2-5-1-查找流中的最大值和最小值-minBy-maxBy\" class=\"headerlink\" title=\"2.5.1 查找流中的最大值和最小值 minBy maxBy\"></a>2.5.1 查找流中的最大值和最小值 minBy maxBy</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    <span class=\"comment\">//创建一个Comparator来进行比较  比较菜的卡路里</span></span><br><span class=\"line\">    Comparator&lt;Dish&gt; dishComparator = Comparator.comparingInt(Dish::getCalories);</span><br><span class=\"line\">    <span class=\"comment\">//maxBy选出最大值</span></span><br><span class=\"line\">    Optional&lt;Dish&gt; collect = dish.stream().collect(Collectors.maxBy(dishComparator));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">    <span class=\"comment\">//选出最小值</span></span><br><span class=\"line\">    Optional&lt;Dish&gt; collect1 = dish.stream().collect(Collectors.minBy(dishComparator));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect1 = \"</span> + collect1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-2-汇总-summingInt\"><a href=\"#2-5-2-汇总-summingInt\" class=\"headerlink\" title=\"2.5.2 汇总 summingInt\"></a>2.5.2 汇总 summingInt</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    <span class=\"comment\">//计算总和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> collect = dish.stream().collect(Collectors.summingInt(Dish::getCalories));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-3-平均数-averagingInt\"><a href=\"#2-5-3-平均数-averagingInt\" class=\"headerlink\" title=\"2.5.3 平均数 averagingInt\"></a>2.5.3 平均数 averagingInt</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    <span class=\"comment\">//计算平均数</span></span><br><span class=\"line\">    Double collect = dish.stream().collect(Collectors.averagingInt(Dish::getCalories));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-4-连接字符串-joining\"><a href=\"#2-5-4-连接字符串-joining\" class=\"headerlink\" title=\"2.5.4 连接字符串 joining\"></a>2.5.4 连接字符串 joining</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    String collect = dish.stream().map(Dish::getName).collect(Collectors.joining());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>joining 工厂方法有一个重载版本可以接受元素之间的分界符，这样你就可以得到一个逗号分隔的菜肴名称列表。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String collect = dish.stream().map(Dish::getName).collect(Collectors.joining(<span class=\"string\">\", \"</span>));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5-5-得到流中的总数-counting\"><a href=\"#2-5-5-得到流中的总数-counting\" class=\"headerlink\" title=\"2.5.5 得到流中的总数 counting\"></a>2.5.5 得到流中的总数 counting</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> howManyDishes = dish.stream().collect(Collectors.counting());</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-6-分组\"><a href=\"#2-6-分组\" class=\"headerlink\" title=\"2.6 分组\"></a>2.6 分组</h2><h3 id=\"2-6-1-分组-groupingBy\"><a href=\"#2-6-1-分组-groupingBy\" class=\"headerlink\" title=\"2.6.1 分组 groupingBy\"></a>2.6.1 分组 groupingBy</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    <span class=\"comment\">//groupingBy接受一个function作为参数</span></span><br><span class=\"line\">    Map&lt;Dish.Type, List&lt;Dish&gt;&gt; collect = dish.stream().collect(Collectors.groupingBy(Dish::getType));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想用以分类的条件可能比简单的属性访问器要复杂。例如，你可能想把热量不到400卡路里的菜划分为“低热量”（diet），热量400到700卡路里的菜划为“普通”（normal），高于700卡路里的划为“高热量”（fat）。由于Dish类的作者没有把这个操作写成一个方法，你无法使用方法引用，但你可以把这个逻辑写成Lambda表达式。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dishList = Dish.getDish();</span><br><span class=\"line\">    Map&lt;String, List&lt;Dish&gt;&gt; collect = dishList.stream().collect(Collectors.groupingBy(dish-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dish.getCalories() &lt;= <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"DIET\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dish.getCalories() &lt;= <span class=\"number\">700</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"NORMAL\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"FAT\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-6-2-多级分组\"><a href=\"#2-6-2-多级分组\" class=\"headerlink\" title=\"2.6.2 多级分组\"></a>2.6.2 多级分组</h3><p>要实现多级分组，我们可以使用一个由双参数版本的Collectors.groupingBy工厂方法创建的收集器，它除了普通的分类函数之外，还可以接受collector类型的第二个参数。那么要进行二级分组的话，我们可以把一个内层groupingBy传递给外层groupingBy，并定义一个为流中项目分类的二级标准。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    Map&lt;Dish.Type, Map&lt;String, List&lt;Dish&gt;&gt;&gt; collect = dish.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.groupingBy(d -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d.getCalories() &lt;= <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"DIET\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (d.getCalories() &lt;= <span class=\"number\">700</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"NORMAL\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"FAT\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-6-3-按子组收集数据\"><a href=\"#2-6-3-按子组收集数据\" class=\"headerlink\" title=\"2.6.3 按子组收集数据\"></a>2.6.3 按子组收集数据</h3><p>在上一面，我们看到可以把第二个groupingBy收集器传递给外层收集器来实现多级分组。但进一步说，传递给第一个groupingBy的第二个收集器可以是任何类型，而不一定是另一个groupingBy。</p>\n<p>例如，要数一数菜单中每类菜有多少个，可以传递counting收集器作为groupingBy收集器的第二个参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Dish.Type, Long&gt; typesCount = dish.stream().collect(groupingBy(Dish::getType, counting()));</span><br></pre></td></tr></table></figure>\n<p>普通的单参数groupingBy(f)（其中<code>f</code>是分类函数）实际上是 groupingBy(f,toList()) 的简便写法。</p>\n<h1 id=\"3-并行流\"><a href=\"#3-并行流\" class=\"headerlink\" title=\"3 并行流\"></a>3 并行流</h1><p>并行流就是一个把内容分成多个数据块，并用不同的线程分别处理每个数据块的流。这样一来，你就可以自动把给定操作的工作负荷分配给多核处理器的所有内核，让它们都忙起来。</p>\n<h2 id=\"3-1-将顺序流转为并行流\"><a href=\"#3-1-将顺序流转为并行流\" class=\"headerlink\" title=\"3.1 将顺序流转为并行流\"></a>3.1 将顺序流转为并行流</h2><p>可以把流转换成并行流，从而让前面的函数归约过程（也就是求和）并行运行——对顺序流调用 parallel 方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">parallelSum</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Stream.iterate(<span class=\"number\">1L</span>, i -&gt; i + <span class=\"number\">1</span>)</span><br><span class=\"line\">            .limit(n)</span><br><span class=\"line\">            .parallel()</span><br><span class=\"line\">            .reduce(<span class=\"number\">0L</span>, Long::sum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Stream在内部分成了几块。因此可以对不同的块独立并行进行归纳操作，最后，同一个归纳操作会将各个子流的部分归纳结果合并起来，得到整个原始流的归纳结果。<br><img src=\"/image/java8Stream.jpg\" alt=\"Stream并行流\"><br>类似地，你只需要对并行流调用 sequential 方法就可以把它变成顺序流。</p>\n<p>看看流的parallel方法，你可能会想，并行流用的线程是从哪儿来的？有多少个？怎么自定义这个过程呢？<br>并行流内部使用了默认的ForkJoinPool，它默认的线程数量就是你的处理器数量，这个值是由Runtime.getRuntime().available-Processors()得到的。</p>\n<p>但是你可以通过系统属性java.util.concurrent.ForkJoinPool.common.parallelism来改变线程池大小，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(<span class=\"string\">\"java.util.concurrent.ForkJoinPool.common.parallelism\"</span>,<span class=\"string\">\"12\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这是一个全局设置，因此它将影响代码中所有的并行流。反过来说，目前还无法专为某个并行流指定这个值。一般而言，让ForkJoinPool的大小等于处理器数量是个不错的默认值，除非你有很好的理由，否则我们强烈建议你不要修改它。</p>\n<h2 id=\"3-2-分支-合并框架\"><a href=\"#3-2-分支-合并框架\" class=\"headerlink\" title=\"3.2 分支/合并框架\"></a>3.2 分支/合并框架</h2><p>分支/合并框架的目的是以递归方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果。它是ExecutorService接口的一个实现，它把子任务分配给线程池（称为ForkJoinPool）中的工作线程。</p>\n<h3 id=\"3-2-1-使用RecursiveTask\"><a href=\"#3-2-1-使用RecursiveTask\" class=\"headerlink\" title=\"3.2.1 使用RecursiveTask\"></a>3.2.1 使用RecursiveTask</h3><p>要把任务提交到这个池，必须创建RecursiveTask的一个子类，其中R是并行化任务（以<br>及所有子任务）产生的结果类型，或者如果任务不返回结果，则是RecursiveAction类型（当<br>然它可能会更新其他非局部机构）。<br>要定义RecursiveTask，只需实现它唯一的抽象方法compute ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> R <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>这个方法同时定义了将任务拆分成子任务的逻辑，以及无法再拆分或不方便再拆分时，生成单个子任务结果的逻辑。</p>\n<h3 id=\"3-2-2-使用RecursiveTask求和\"><a href=\"#3-2-2-使用RecursiveTask求和\" class=\"headerlink\" title=\"3.2.2 使用RecursiveTask求和\"></a>3.2.2 使用RecursiveTask求和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinSumCalculator</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">extends</span> <span class=\"title\">java</span>.<span class=\"title\">util</span>.<span class=\"title\">concurrent</span>.<span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span>[] numbers;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> THRESHOLD = <span class=\"number\">10_000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForkJoinSumCalculator</span><span class=\"params\">(<span class=\"keyword\">long</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(numbers, <span class=\"number\">0</span>, numbers.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ForkJoinSumCalculator</span><span class=\"params\">(<span class=\"keyword\">long</span>[] numbers, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.numbers = numbers;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Long <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = end - start;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length &lt;= THRESHOLD) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> computeSequentially();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个子任务来为数组得前一半求和</span></span><br><span class=\"line\">        ForkJoinSumCalculator leftTask =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ForkJoinSumCalculator(numbers, start, start + length / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//利 用 另 一 个ForkJoinPool线程异步执行新创建的子任务</span></span><br><span class=\"line\">        leftTask.fork();</span><br><span class=\"line\">        <span class=\"comment\">//创建一个子任务来为数组得后一半求和</span></span><br><span class=\"line\">        ForkJoinSumCalculator rightTask =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ForkJoinSumCalculator(numbers, start + length / <span class=\"number\">2</span>, end);</span><br><span class=\"line\">        <span class=\"comment\">//同步执行第二个子任务，有可能进一步递归</span></span><br><span class=\"line\">        Long rightResult = rightTask.compute();</span><br><span class=\"line\">        <span class=\"comment\">//读取第一个任务得结构，未完成就等待</span></span><br><span class=\"line\">        Long leftResult = leftTask.join();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> leftResult + rightResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">computeSequentially</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">            sum += numbers[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">forkJoinSum</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span>[] numbers = LongStream.rangeClosed(<span class=\"number\">1</span>, n).toArray();</span><br><span class=\"line\">        ForkJoinTask&lt;Long&gt; task = <span class=\"keyword\">new</span> ForkJoinSumCalculator(numbers);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForkJoinPool().invoke(task);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> l = ForkJoinSumCalculator.forkJoinSum(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"l = \"</span> + l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h1><p>Java8提供了很多新特性，其中有一个就是基于流Stream的操作。Stream是一组用来处理数组，集合的API</p>\n<h2 id=\"1-1-特性\"><a href=\"#1-1-特性\" class=\"headerlink\" title=\"1.1 特性\"></a>1.1 特性</h2><ul>\n<li>不是数据结构，没有内部存储。</li>\n<li>不支持索引访问。</li>\n<li>延迟计算</li>\n<li>支持并行</li>\n<li>很容易生成数据或集合</li>\n<li>支持过滤，查找，转换，汇总，聚合等操作","more":"</li>\n</ul>\n<h2 id=\"1-2-运行机制\"><a href=\"#1-2-运行机制\" class=\"headerlink\" title=\"1.2 运行机制\"></a>1.2 运行机制</h2><p>Stream分为源source，中间操作，终止操作。</p>\n<ul>\n<li>流的源可以是一个数组，集合，生成器方法，I/O通道等等。</li>\n<li>一个流可以有零个或多个中间操作，每一个中间操作都会返回一个新的流，供下一个操作使用，一个流只会有一个终止操作。</li>\n<li>Stream只有遇到终止操作，它的源才会开始执行遍历操作。</li>\n</ul>\n<h2 id=\"1-3-Stream的创建\"><a href=\"#1-3-Stream的创建\" class=\"headerlink\" title=\"1.3 Stream的创建\"></a>1.3 Stream的创建</h2><p><code>Stream</code>的创建其实有很多方式，但是我们在平时用到最多的可能就是基于数组的Stream.of()和集合的stream()方法其实它还有很多种的创建方式，下面将一一列出，并且列举相关实例。</p>\n<ul>\n<li>1.通过数组,Stream.of()</li>\n<li>2.通过集合</li>\n<li>3.通过Stream.generate方法来创建</li>\n<li>4.通过Stram.iterate方法</li>\n<li>5.其他API<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateStream</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.通过数组,Stream.of()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String[] str = &#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>&#125;;</span><br><span class=\"line\">        Stream&lt;String&gt; str1 = Stream.of(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2.通过集合</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;String&gt; strings = Arrays.asList(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">        Stream&lt;String&gt; stream = strings.stream();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3.通过Stream.generate方法来创建</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这是一个无限流，通过这种方法创建在操作的时候最好加上limit进行限制</span></span><br><span class=\"line\">        Stream&lt;Integer&gt; generate = Stream.generate(() -&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        generate.limit(<span class=\"number\">10</span>).forEach(x -&gt; System.out.println(x));</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// 4.通过Stram.iterate方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create4</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Stream&lt;Integer&gt; iterate = Stream.iterate(<span class=\"number\">1</span>, x -&gt; x +<span class=\"number\">1</span>);</span><br><span class=\"line\">        iterate.forEach(x -&gt; System.out.println(x));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 5.其他API</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create5</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        IntStream chars = str.chars();</span><br><span class=\"line\">        chars.forEach(x -&gt; System.out.println(x));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"2-Stream的常用操作-API\"><a href=\"#2-Stream的常用操作-API\" class=\"headerlink\" title=\"2.Stream的常用操作(API)\"></a>2.Stream的常用操作(API)</h1><h2 id=\"2-1-中间操作\"><a href=\"#2-1-中间操作\" class=\"headerlink\" title=\"2.1 中间操作\"></a>2.1 中间操作</h2><h3 id=\"2-1-1-filter过滤\"><a href=\"#2-1-1-filter过滤\" class=\"headerlink\" title=\"2.1.1 filter过滤\"></a>2.1.1 filter过滤</h3><p>接受一个谓词（一个返回boolean的函数）作为参数，并返回一个包括所有符合谓词的元素的流。说白了就是给一个条件，filter会根据这个条件截取流中得数据。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">//截取所有能被2整除得数据</span></span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().filter(i -&gt; i % <span class=\"number\">2</span> == <span class=\"number\">0</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果: collect = [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-2-distinct去重\"><a href=\"#2-1-2-distinct去重\" class=\"headerlink\" title=\"2.1.2 distinct去重\"></a>2.1.2 distinct去重</h3><p>返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = numbers.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果: collect = [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-3-sorted排序\"><a href=\"#2-1-3-sorted排序\" class=\"headerlink\" title=\"2.1.3 sorted排序\"></a>2.1.3 sorted排序</h3><p>对流中得数据进行排序，可以以自然序或着用Comparator接口定义的排序规则来排序一个流。Comparator能使用lambada表达式来初始化，还能够逆序一个已经排序的流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">41</span>, <span class=\"number\">11</span>);</span><br><span class=\"line\">    <span class=\"comment\">//排序默认为顺序  顺序 = [2, 5, 6, 8, 11, 41]</span></span><br><span class=\"line\">    List&lt;Integer&gt; sorted = integers.stream().sorted().collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"顺序 = \"</span> + sorted);</span><br><span class=\"line\">    <span class=\"comment\">//逆序    逆序 = [41, 11, 8, 6, 5, 2]</span></span><br><span class=\"line\">    List&lt;Integer&gt; reverseOrder = integers.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"逆序 = \"</span> + reverseOrder);</span><br><span class=\"line\">    <span class=\"comment\">//也可以接收一个lambda</span></span><br><span class=\"line\">    List&lt;Integer&gt; ages = integers.stream().sorted(Comparator.comparing(User::getAge)).collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-4-limit截取\"><a href=\"#2-1-4-limit截取\" class=\"headerlink\" title=\"2.1.4 limit截取\"></a>2.1.4 limit截取</h3><p>会返回一个不超过给定长度的流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testLimit</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().limit(<span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果: collect = [1, 2, 1]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-5-skip舍弃\"><a href=\"#2-1-5-skip舍弃\" class=\"headerlink\" title=\"2.1.5 skip舍弃\"></a>2.1.5 skip舍弃</h3><p>会返回一个扔掉了前面n个元素的流。如果流中元素不足n个，则返回一个空流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSkip</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">//丢掉流中得前三个元素  </span></span><br><span class=\"line\">    List&lt;Integer&gt; collect = integers.stream().skip(<span class=\"number\">3</span>).collect(Collectors.toList());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果: collect = [3, 3, 2, 4]</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-6-map归纳\"><a href=\"#2-1-6-map归纳\" class=\"headerlink\" title=\"2.1.6 map归纳\"></a>2.1.6 map归纳</h3><p>接受一个函数作为参数，这个函数会被应用到每个元素上，并将其映射成一个新的元素。就是根据指定函数获取流中得每个元素得数据并重新组合成一个新的元素。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//自己建好得一个获取对象list得方法</span></span><br><span class=\"line\">    List&lt;Dish&gt; dishList = Dish.getDishList();</span><br><span class=\"line\">    <span class=\"comment\">//获取每一道菜得名称  并放到一个list中</span></span><br><span class=\"line\">    List&lt;String&gt; collect = dishList.stream().map(Dish::getName).collect(Collectors.toList());</span><br><span class=\"line\">    <span class=\"comment\">//collect = [pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon]</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-7-flatMap扁平化\"><a href=\"#2-1-7-flatMap扁平化\" class=\"headerlink\" title=\"2.1.7 flatMap扁平化\"></a>2.1.7 flatMap扁平化</h3><p>该方法key可以让你把一个流中的每个值都换成另一个流，然后把所有的流都链接起来成为一个流。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    String[] words = &#123;<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"World\"</span>&#125;;</span><br><span class=\"line\">    List&lt;String&gt; collect = Stream.of(words).        <span class=\"comment\">//数组转换流</span></span><br><span class=\"line\">            map(w -&gt; w.split(<span class=\"string\">\"\"</span>)).  <span class=\"comment\">//去掉“”并获取到两个String[]</span></span><br><span class=\"line\">            flatMap(Arrays::stream).        <span class=\"comment\">//方法调用将两个String[]扁平化为一个stream</span></span><br><span class=\"line\">            distinct().                     <span class=\"comment\">//去重    </span></span><br><span class=\"line\">            collect(Collectors.toList());</span><br><span class=\"line\">    <span class=\"comment\">//collect = [H, e, l, o, W, r, d]</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-8-peek\"><a href=\"#2-1-8-peek\" class=\"headerlink\" title=\"2.1.8 peek\"></a>2.1.8 peek</h3><p>peek的设计初衷就是在流的每个元素恢复运行之前，插入执行一个动作。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    List&lt;Integer&gt; result =</span><br><span class=\"line\">            numbers.stream()</span><br><span class=\"line\">                    .peek(x -&gt; System.out.println(<span class=\"string\">\"from stream: \"</span> + x))</span><br><span class=\"line\">                    .map(x -&gt; x + <span class=\"number\">17</span>)</span><br><span class=\"line\">                    .peek(x -&gt; System.out.println(<span class=\"string\">\"after map: \"</span> + x))</span><br><span class=\"line\">                    .filter(x -&gt; x % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    .peek(x -&gt; System.out.println(<span class=\"string\">\"after filter: \"</span> + x))</span><br><span class=\"line\">                    .limit(<span class=\"number\">3</span>)</span><br><span class=\"line\">                    .peek(x -&gt; System.out.println(<span class=\"string\">\"after limit: \"</span> + x))</span><br><span class=\"line\">                    .collect(Collectors.toList());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果：</span></span><br><span class=\"line\"><span class=\"comment\">//     from stream: 2</span></span><br><span class=\"line\"><span class=\"comment\">//     after map: 19</span></span><br><span class=\"line\"><span class=\"comment\">//     from stream: 3</span></span><br><span class=\"line\"><span class=\"comment\">//     after map: 20</span></span><br><span class=\"line\"><span class=\"comment\">//     after filter: 20</span></span><br><span class=\"line\"><span class=\"comment\">//     after limit: 20</span></span><br><span class=\"line\"><span class=\"comment\">//     from stream: 4</span></span><br><span class=\"line\"><span class=\"comment\">//     after map: 21</span></span><br><span class=\"line\"><span class=\"comment\">//     from stream: 5</span></span><br><span class=\"line\"><span class=\"comment\">//     after map: 22</span></span><br><span class=\"line\"><span class=\"comment\">//     after filter: 22</span></span><br><span class=\"line\"><span class=\"comment\">//     after limit: 22</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-1-9-collect收集\"><a href=\"#2-1-9-collect收集\" class=\"headerlink\" title=\"2.1.9 collect收集\"></a>2.1.9 collect收集</h3><p>从上面得代码已经可以看出来，collect是将最终stream中得数据收集起来，最终生成一个list，set，或者map。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dishList = Dish.getDishList();</span><br><span class=\"line\">    <span class=\"comment\">// list</span></span><br><span class=\"line\">    List&lt;Dish&gt; collect = dishList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toList());</span><br><span class=\"line\">    <span class=\"comment\">// set</span></span><br><span class=\"line\">    Set&lt;Dish&gt; collect1 = dishList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toSet());</span><br><span class=\"line\">    <span class=\"comment\">// map</span></span><br><span class=\"line\">    Map&lt;String, Dish.Type&gt; collect2 = dishList.stream().limit(<span class=\"number\">2</span>).collect(Collectors.toMap(Dish::getName, Dish::getType));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-2-终止操作\"><a href=\"#2-2-终止操作\" class=\"headerlink\" title=\"2.2 终止操作\"></a>2.2 终止操作</h2><ul>\n<li>循环 forEach</li>\n<li>计算 min、max、count、average</li>\n<li>匹配 anyMatch、allMatch、noneMatch、findFirst、findAny</li>\n<li>汇聚 reduce</li>\n<li>收集器 collect</li>\n</ul>\n<h2 id=\"2-3-查找和匹配\"><a href=\"#2-3-查找和匹配\" class=\"headerlink\" title=\"2.3 查找和匹配\"></a>2.3 查找和匹配</h2><p>常见的数据处理套路是看看数据集中的某些元素是否匹配一个给定的属性。Stream API通过allMatch，anyMatch，noneMatch，findFirst和findAny方法提供了这样的工具。<br>查找和匹配都是终端操作。</p>\n<h3 id=\"2-3-1-anyMatch\"><a href=\"#2-3-1-anyMatch\" class=\"headerlink\" title=\"2.3.1 anyMatch\"></a>2.3.1 anyMatch</h3><p>anyMatch方法可以回答“流中是否有一个元素能匹配到给定的谓词”。会返回一个boolean值。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnyMatch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> b = dish.stream().anyMatch(Dish::isVegetarian);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-2-allMatch\"><a href=\"#2-3-2-allMatch\" class=\"headerlink\" title=\"2.3.2 allMatch\"></a>2.3.2 allMatch</h3><p>allMatch方法和anyMatch类似，校验流中是否都能匹配到给定的谓词。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AllMatch</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">        <span class=\"comment\">//是否所有菜的热量都小于1000</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> b = dish.stream().allMatch(d -&gt; d.getCalories() &lt; <span class=\"number\">1000</span>);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-3-noneMatch\"><a href=\"#2-3-3-noneMatch\" class=\"headerlink\" title=\"2.3.3 noneMatch\"></a>2.3.3 noneMatch</h3><p>noneMatch方法可以确保流中没有任何元素与给定的谓词匹配。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NoneMatch</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">        <span class=\"comment\">//没有任何菜的热量大于等于1000</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> b = dish.stream().allMatch(d -&gt; d.getCalories() &gt;= <span class=\"number\">1000</span>);</span><br><span class=\"line\">        System.out.println(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>anyMatch</code>，<code>noneMatch</code>，<code>allMatch</code>这三个操作都用到了所谓的短路。</p>\n<h3 id=\"2-3-4-findAny\"><a href=\"#2-3-4-findAny\" class=\"headerlink\" title=\"2.3.4 findAny\"></a>2.3.4 findAny</h3><p>findAny方法将返回当前流中的符合过滤条件的任意元素。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FindAny</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">        Optional&lt;Dish&gt; any = dish.stream().filter(Dish::isVegetarian).findAny();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"any = \"</span> + any);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-5-findFirst\"><a href=\"#2-3-5-findFirst\" class=\"headerlink\" title=\"2.3.5 findFirst\"></a>2.3.5 findFirst</h3><p>findFirst方法能找到你想要的第一个元素。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FindFirst</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">        Optional&lt;Dish&gt; any = dish.stream().filter(Dish::isVegetarian).findFirst();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"any = \"</span> + any);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-4-reduce-归约\"><a href=\"#2-4-reduce-归约\" class=\"headerlink\" title=\"2.4 reduce 归约\"></a>2.4 reduce 归约</h2><p>此类查询需要将流中所有元素反复结合起来，得到一个值，比如一个 Integer 。这样的查询可以被归类为归约操作（将流归约成一个值）。用函数式编程语言的术语来说，这称为折叠（fold），因为你可以将这个操<br>作看成把一张长长的纸（你的流）反复折叠成一个小方块，而这就是折叠操作的结果。</p>\n<h3 id=\"2-4-1-元素求和\"><a href=\"#2-4-1-元素求和\" class=\"headerlink\" title=\"2.4.1 元素求和\"></a>2.4.1 元素求和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"comment\">//求list中的和，以0为基数</span></span><br><span class=\"line\">    Integer reduce = integers.stream().reduce(<span class=\"number\">0</span>, (a, b) -&gt; a + b);</span><br><span class=\"line\">    <span class=\"comment\">//Integer的静态方法</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = integers.stream().reduce(<span class=\"number\">0</span>, Integer::sum);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"reduce = \"</span> + reduce);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-2-最大值和最小值\"><a href=\"#2-4-2-最大值和最小值\" class=\"headerlink\" title=\"2.4.2 最大值和最小值\"></a>2.4.2 最大值和最小值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Integer&gt; integers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">    Optional&lt;Integer&gt; min = integers.stream().reduce(Integer::min);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"min = \"</span> + min);</span><br><span class=\"line\">    Optional&lt;Integer&gt; max = integers.stream().reduce(Integer::max);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"max = \"</span> + max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-5-Collectors-收集器\"><a href=\"#2-5-Collectors-收集器\" class=\"headerlink\" title=\"2.5 Collectors 收集器\"></a>2.5 Collectors 收集器</h2><h3 id=\"2-5-1-查找流中的最大值和最小值-minBy-maxBy\"><a href=\"#2-5-1-查找流中的最大值和最小值-minBy-maxBy\" class=\"headerlink\" title=\"2.5.1 查找流中的最大值和最小值 minBy maxBy\"></a>2.5.1 查找流中的最大值和最小值 minBy maxBy</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    <span class=\"comment\">//创建一个Comparator来进行比较  比较菜的卡路里</span></span><br><span class=\"line\">    Comparator&lt;Dish&gt; dishComparator = Comparator.comparingInt(Dish::getCalories);</span><br><span class=\"line\">    <span class=\"comment\">//maxBy选出最大值</span></span><br><span class=\"line\">    Optional&lt;Dish&gt; collect = dish.stream().collect(Collectors.maxBy(dishComparator));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">    <span class=\"comment\">//选出最小值</span></span><br><span class=\"line\">    Optional&lt;Dish&gt; collect1 = dish.stream().collect(Collectors.minBy(dishComparator));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect1 = \"</span> + collect1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-2-汇总-summingInt\"><a href=\"#2-5-2-汇总-summingInt\" class=\"headerlink\" title=\"2.5.2 汇总 summingInt\"></a>2.5.2 汇总 summingInt</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    <span class=\"comment\">//计算总和</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> collect = dish.stream().collect(Collectors.summingInt(Dish::getCalories));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-3-平均数-averagingInt\"><a href=\"#2-5-3-平均数-averagingInt\" class=\"headerlink\" title=\"2.5.3 平均数 averagingInt\"></a>2.5.3 平均数 averagingInt</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    <span class=\"comment\">//计算平均数</span></span><br><span class=\"line\">    Double collect = dish.stream().collect(Collectors.averagingInt(Dish::getCalories));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-5-4-连接字符串-joining\"><a href=\"#2-5-4-连接字符串-joining\" class=\"headerlink\" title=\"2.5.4 连接字符串 joining\"></a>2.5.4 连接字符串 joining</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    String collect = dish.stream().map(Dish::getName).collect(Collectors.joining());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>joining 工厂方法有一个重载版本可以接受元素之间的分界符，这样你就可以得到一个逗号分隔的菜肴名称列表。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String collect = dish.stream().map(Dish::getName).collect(Collectors.joining(<span class=\"string\">\", \"</span>));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-5-5-得到流中的总数-counting\"><a href=\"#2-5-5-得到流中的总数-counting\" class=\"headerlink\" title=\"2.5.5 得到流中的总数 counting\"></a>2.5.5 得到流中的总数 counting</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> howManyDishes = dish.stream().collect(Collectors.counting());</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-6-分组\"><a href=\"#2-6-分组\" class=\"headerlink\" title=\"2.6 分组\"></a>2.6 分组</h2><h3 id=\"2-6-1-分组-groupingBy\"><a href=\"#2-6-1-分组-groupingBy\" class=\"headerlink\" title=\"2.6.1 分组 groupingBy\"></a>2.6.1 分组 groupingBy</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    <span class=\"comment\">//groupingBy接受一个function作为参数</span></span><br><span class=\"line\">    Map&lt;Dish.Type, List&lt;Dish&gt;&gt; collect = dish.stream().collect(Collectors.groupingBy(Dish::getType));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想用以分类的条件可能比简单的属性访问器要复杂。例如，你可能想把热量不到400卡路里的菜划分为“低热量”（diet），热量400到700卡路里的菜划为“普通”（normal），高于700卡路里的划为“高热量”（fat）。由于Dish类的作者没有把这个操作写成一个方法，你无法使用方法引用，但你可以把这个逻辑写成Lambda表达式。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dishList = Dish.getDish();</span><br><span class=\"line\">    Map&lt;String, List&lt;Dish&gt;&gt; collect = dishList.stream().collect(Collectors.groupingBy(dish-&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dish.getCalories() &lt;= <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"DIET\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dish.getCalories() &lt;= <span class=\"number\">700</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"NORMAL\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"FAT\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-6-2-多级分组\"><a href=\"#2-6-2-多级分组\" class=\"headerlink\" title=\"2.6.2 多级分组\"></a>2.6.2 多级分组</h3><p>要实现多级分组，我们可以使用一个由双参数版本的Collectors.groupingBy工厂方法创建的收集器，它除了普通的分类函数之外，还可以接受collector类型的第二个参数。那么要进行二级分组的话，我们可以把一个内层groupingBy传递给外层groupingBy，并定义一个为流中项目分类的二级标准。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Dish&gt; dish = Dish.getDish();</span><br><span class=\"line\">    Map&lt;Dish.Type, Map&lt;String, List&lt;Dish&gt;&gt;&gt; collect = dish.stream().collect(Collectors.groupingBy(Dish::getType, Collectors.groupingBy(d -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d.getCalories() &lt;= <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"DIET\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (d.getCalories() &lt;= <span class=\"number\">700</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"NORMAL\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"FAT\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)));</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"collect = \"</span> + collect);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-6-3-按子组收集数据\"><a href=\"#2-6-3-按子组收集数据\" class=\"headerlink\" title=\"2.6.3 按子组收集数据\"></a>2.6.3 按子组收集数据</h3><p>在上一面，我们看到可以把第二个groupingBy收集器传递给外层收集器来实现多级分组。但进一步说，传递给第一个groupingBy的第二个收集器可以是任何类型，而不一定是另一个groupingBy。</p>\n<p>例如，要数一数菜单中每类菜有多少个，可以传递counting收集器作为groupingBy收集器的第二个参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Dish.Type, Long&gt; typesCount = dish.stream().collect(groupingBy(Dish::getType, counting()));</span><br></pre></td></tr></table></figure>\n<p>普通的单参数groupingBy(f)（其中<code>f</code>是分类函数）实际上是 groupingBy(f,toList()) 的简便写法。</p>\n<h1 id=\"3-并行流\"><a href=\"#3-并行流\" class=\"headerlink\" title=\"3 并行流\"></a>3 并行流</h1><p>并行流就是一个把内容分成多个数据块，并用不同的线程分别处理每个数据块的流。这样一来，你就可以自动把给定操作的工作负荷分配给多核处理器的所有内核，让它们都忙起来。</p>\n<h2 id=\"3-1-将顺序流转为并行流\"><a href=\"#3-1-将顺序流转为并行流\" class=\"headerlink\" title=\"3.1 将顺序流转为并行流\"></a>3.1 将顺序流转为并行流</h2><p>可以把流转换成并行流，从而让前面的函数归约过程（也就是求和）并行运行——对顺序流调用 parallel 方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">parallelSum</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Stream.iterate(<span class=\"number\">1L</span>, i -&gt; i + <span class=\"number\">1</span>)</span><br><span class=\"line\">            .limit(n)</span><br><span class=\"line\">            .parallel()</span><br><span class=\"line\">            .reduce(<span class=\"number\">0L</span>, Long::sum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Stream在内部分成了几块。因此可以对不同的块独立并行进行归纳操作，最后，同一个归纳操作会将各个子流的部分归纳结果合并起来，得到整个原始流的归纳结果。<br><img src=\"/image/java8Stream.jpg\" alt=\"Stream并行流\"><br>类似地，你只需要对并行流调用 sequential 方法就可以把它变成顺序流。</p>\n<p>看看流的parallel方法，你可能会想，并行流用的线程是从哪儿来的？有多少个？怎么自定义这个过程呢？<br>并行流内部使用了默认的ForkJoinPool，它默认的线程数量就是你的处理器数量，这个值是由Runtime.getRuntime().available-Processors()得到的。</p>\n<p>但是你可以通过系统属性java.util.concurrent.ForkJoinPool.common.parallelism来改变线程池大小，如下所示：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.setProperty(<span class=\"string\">\"java.util.concurrent.ForkJoinPool.common.parallelism\"</span>,<span class=\"string\">\"12\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这是一个全局设置，因此它将影响代码中所有的并行流。反过来说，目前还无法专为某个并行流指定这个值。一般而言，让ForkJoinPool的大小等于处理器数量是个不错的默认值，除非你有很好的理由，否则我们强烈建议你不要修改它。</p>\n<h2 id=\"3-2-分支-合并框架\"><a href=\"#3-2-分支-合并框架\" class=\"headerlink\" title=\"3.2 分支/合并框架\"></a>3.2 分支/合并框架</h2><p>分支/合并框架的目的是以递归方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果。它是ExecutorService接口的一个实现，它把子任务分配给线程池（称为ForkJoinPool）中的工作线程。</p>\n<h3 id=\"3-2-1-使用RecursiveTask\"><a href=\"#3-2-1-使用RecursiveTask\" class=\"headerlink\" title=\"3.2.1 使用RecursiveTask\"></a>3.2.1 使用RecursiveTask</h3><p>要把任务提交到这个池，必须创建RecursiveTask的一个子类，其中R是并行化任务（以<br>及所有子任务）产生的结果类型，或者如果任务不返回结果，则是RecursiveAction类型（当<br>然它可能会更新其他非局部机构）。<br>要定义RecursiveTask，只需实现它唯一的抽象方法compute ：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> R <span class=\"title\">compute</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>这个方法同时定义了将任务拆分成子任务的逻辑，以及无法再拆分或不方便再拆分时，生成单个子任务结果的逻辑。</p>\n<h3 id=\"3-2-2-使用RecursiveTask求和\"><a href=\"#3-2-2-使用RecursiveTask求和\" class=\"headerlink\" title=\"3.2.2 使用RecursiveTask求和\"></a>3.2.2 使用RecursiveTask求和</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForkJoinSumCalculator</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">extends</span> <span class=\"title\">java</span>.<span class=\"title\">util</span>.<span class=\"title\">concurrent</span>.<span class=\"title\">RecursiveTask</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span>[] numbers;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> THRESHOLD = <span class=\"number\">10_000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForkJoinSumCalculator</span><span class=\"params\">(<span class=\"keyword\">long</span>[] numbers)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(numbers, <span class=\"number\">0</span>, numbers.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ForkJoinSumCalculator</span><span class=\"params\">(<span class=\"keyword\">long</span>[] numbers, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.numbers = numbers;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.end = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Long <span class=\"title\">compute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = end - start;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length &lt;= THRESHOLD) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> computeSequentially();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个子任务来为数组得前一半求和</span></span><br><span class=\"line\">        ForkJoinSumCalculator leftTask =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ForkJoinSumCalculator(numbers, start, start + length / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//利 用 另 一 个ForkJoinPool线程异步执行新创建的子任务</span></span><br><span class=\"line\">        leftTask.fork();</span><br><span class=\"line\">        <span class=\"comment\">//创建一个子任务来为数组得后一半求和</span></span><br><span class=\"line\">        ForkJoinSumCalculator rightTask =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ForkJoinSumCalculator(numbers, start + length / <span class=\"number\">2</span>, end);</span><br><span class=\"line\">        <span class=\"comment\">//同步执行第二个子任务，有可能进一步递归</span></span><br><span class=\"line\">        Long rightResult = rightTask.compute();</span><br><span class=\"line\">        <span class=\"comment\">//读取第一个任务得结构，未完成就等待</span></span><br><span class=\"line\">        Long leftResult = leftTask.join();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> leftResult + rightResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">computeSequentially</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">            sum += numbers[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">forkJoinSum</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span>[] numbers = LongStream.rangeClosed(<span class=\"number\">1</span>, n).toArray();</span><br><span class=\"line\">        ForkJoinTask&lt;Long&gt; task = <span class=\"keyword\">new</span> ForkJoinSumCalculator(numbers);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForkJoinPool().invoke(task);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> l = ForkJoinSumCalculator.forkJoinSum(<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"l = \"</span> + l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjw4kin4n0001892ndoie6jnr","category_id":"cjw4kin4r0003892nw9flyi93","_id":"cjw4kin4v0008892n9ojgsyt1"},{"post_id":"cjw4kinc6000b892n1uzovuvw","category_id":"cjw4kinc8000d892nkqampmm4","_id":"cjw4kince000k892nxvgsv4we"},{"post_id":"cjw4kinc8000c892nq4lvop1b","category_id":"cjw4kinc8000d892nkqampmm4","_id":"cjw4kincf000o892nnh5byh9c"},{"post_id":"cjw4kinc9000f892n8ydmj44d","category_id":"cjw4kinc8000d892nkqampmm4","_id":"cjw4kincg000s892newlq7nqk"},{"post_id":"cjw4kincb000g892nnwczngs1","category_id":"cjw4kincf000n892n53cgruxi","_id":"cjw4kincg000v892nupqilnxh"}],"PostTag":[{"post_id":"cjw4kin4n0001892ndoie6jnr","tag_id":"cjw4kin4s0004892n2fbhhlxe","_id":"cjw4kin4v0009892nkgm5mdkg"},{"post_id":"cjw4kin4n0001892ndoie6jnr","tag_id":"cjw4kin4u0007892nrg177x4v","_id":"cjw4kin4v000a892nfxf3hcml"},{"post_id":"cjw4kinc6000b892n1uzovuvw","tag_id":"cjw4kinc9000e892nhkj37rgq","_id":"cjw4kincf000m892nw49m2gel"},{"post_id":"cjw4kinc6000b892n1uzovuvw","tag_id":"cjw4kincc000i892n8n8tngsj","_id":"cjw4kincf000p892nufbivqqv"},{"post_id":"cjw4kinc8000c892nq4lvop1b","tag_id":"cjw4kinc9000e892nhkj37rgq","_id":"cjw4kincg000r892n38rrnlps"},{"post_id":"cjw4kinc9000f892n8ydmj44d","tag_id":"cjw4kinc9000e892nhkj37rgq","_id":"cjw4kincg000u892n2vcsh9rr"},{"post_id":"cjw4kincb000g892nnwczngs1","tag_id":"cjw4kincg000t892n3th06j60","_id":"cjw4kincg000x892n8z0d8ci3"},{"post_id":"cjw4kincb000g892nnwczngs1","tag_id":"cjw4kincg000w892n90gz9ygp","_id":"cjw4kincg000y892nqvaak15v"}],"Tag":[{"name":"RabbitMQ","_id":"cjw4kin4s0004892n2fbhhlxe"},{"name":"消息队列","_id":"cjw4kin4u0007892nrg177x4v"},{"name":"docker","_id":"cjw4kinc9000e892nhkj37rgq"},{"name":"mysql","_id":"cjw4kincc000i892n8n8tngsj"},{"name":"java8","_id":"cjw4kincg000t892n3th06j60"},{"name":"stream","_id":"cjw4kincg000w892n90gz9ygp"}]}}