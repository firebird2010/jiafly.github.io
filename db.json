{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"source/image/11.jpg","path":"image/11.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-basic.png","path":"image/rabbit/mq-basic.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/direct.png","path":"image/rabbit/direct.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/delay-mq.jpg","path":"image/rabbit/delay-mq.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-exchange.jpg","path":"image/rabbit/mq-exchange.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-fanout.jpg","path":"image/rabbit/mq-fanout.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-banding.jpg","path":"image/rabbit/mq-banding.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-miaosha.png","path":"image/rabbit/mq-miaosha.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-order-old.png","path":"image/rabbit/mq-order-old.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-kafka.png","path":"image/rabbit/mq-kafka.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-order.png","path":"image/rabbit/mq-order.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-p2p.png","path":"image/rabbit/mq-p2p.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-rabbit.png","path":"image/rabbit/mq-rabbit.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-subPush.png","path":"image/rabbit/mq-subPush.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-yibu.png","path":"image/rabbit/mq-yibu.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-yibubingxing.png","path":"image/rabbit/mq-yibubingxing.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-yibuchuanxing.png","path":"image/rabbit/mq-yibuchuanxing.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/p2p.png","path":"image/rabbit/p2p.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/pubsub.png","path":"image/rabbit/pubsub.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/topic.png","path":"image/rabbit/topic.png","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-direct.jpg","path":"image/rabbit/mq-direct.jpg","modified":0,"renderable":0},{"_id":"source/image/rabbit/mq-topic.jpg","path":"image/rabbit/mq-topic.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/headImage.jpg","path":"images/headImage.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"source/image/rabbit/mq-yunzhuanliucheng.jpg","path":"image/rabbit/mq-yunzhuanliucheng.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jiafly/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/jiafly/source/weixin_favicon.png","path":"weixin_favicon.png","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/jiafly/source/js/prettify.js","path":"js/prettify.js","modified":0,"renderable":1},{"_id":"themes/jiafly/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/lib/prettify-tomorrow-night-eighties.css","path":"css/lib/prettify-tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/images/side-user-cover.jpg","path":"css/images/side-user-cover.jpg","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/lib/font-awesome.min.css","path":"css/lib/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/jiafly/source/js/materialize.min.js","path":"js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/lib/materialize.min.css","path":"css/lib/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Bold.eot","path":"css/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Bold.woff","path":"css/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Bold.woff2","path":"css/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Light.eot","path":"css/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Medium.eot","path":"css/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Light.woff2","path":"css/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Light.woff","path":"css/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Regular.eot","path":"css/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Medium.woff","path":"css/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Medium.woff2","path":"css/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Regular.woff","path":"css/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Regular.woff2","path":"css/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/font-awesome/fontawesome-webfont.eot","path":"css/font/font-awesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/font-awesome/FontAwesome.otf","path":"css/font/font-awesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/font-awesome/fontawesome-webfont.woff","path":"css/font/font-awesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/font-awesome/fontawesome-webfont.woff2","path":"css/font/font-awesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Bold.ttf","path":"css/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Light.ttf","path":"css/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Medium.ttf","path":"css/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Regular.ttf","path":"css/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/font-awesome/fontawesome-webfont.ttf","path":"css/font/font-awesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jiafly/source/css/font/font-awesome/fontawesome-webfont.svg","path":"css/font/font-awesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1536859920000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1536854432583},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1536854432583},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1536854432582},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1536854432584},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1536854432584},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1536854432584},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1536854432584},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1536854432585},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1536854432585},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1536854432585},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1536854432585},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1536854432585},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1536854432586},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1536854432586},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1536854432607},{"_id":"themes/next/_config.yml","hash":"b6e6537afac53397502991fd76ca6ea600420a2c","modified":1553179689015},{"_id":"source/about/index.md","hash":"c125d02c1a5cfa2568cb44a679b3ebac5baff009","modified":1536730278626},{"_id":"source/tags/index.md","hash":"ef090391803f0226adeb80d70cb36b6dbcaf6da8","modified":1536730323273},{"_id":"source/categories/index.md","hash":"6b0b16cb927cebc8b1722681b8345a5d53a3eddf","modified":1536730323277},{"_id":"source/temp/RabbitMQ.md","hash":"b4391566d87c45e808bdfa183c80da813aa4963f","modified":1551800766000},{"_id":"source/temp/使用docker创建mysql容器.md","hash":"cf2eb6cf7da981a75c09a4af4d816579b82cca76","modified":1552385852000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1536854432583},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1536854432583},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1536854432583},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1536854432584},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1536854432608},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1536854432609},{"_id":"themes/next/source/404.html","hash":"b5e6533bfe368e8ac136dde99b162c6b35ce9dc1","modified":1536859920755},{"_id":"themes/next/source/CNAME","hash":"898105f91480fcf9d5dad1f6d1aeecb7b67a6fdb","modified":1553179884213},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1536854432586},{"_id":"themes/next/languages/en.yml","hash":"a828d9b5db2dbdef649ce4d7672557c881761297","modified":1549675233580},{"_id":"themes/next/languages/default.yml","hash":"373d660a427006e7b4893098fa2722f4971a4f2f","modified":1549675056889},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1536854432586},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1536854432587},{"_id":"themes/next/languages/ja.yml","hash":"fb93c7c6093319ca773076ed33e54cd08a9d4e28","modified":1549675233597},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1536854432587},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1536854432587},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1536854432588},{"_id":"themes/next/languages/pt.yml","hash":"53fb445f9199bc86ed98fab04f3fe4841112bc5d","modified":1549675233603},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1536854432587},{"_id":"themes/next/languages/pt-BR.yml","hash":"3caf0f7cdec6ed10e128cca03fe6eb0e0fcdae16","modified":1549675233589},{"_id":"themes/next/languages/zh-Hans.yml","hash":"470a4d6f91b2ce2d8359dce68cf5d3f5947e9c9c","modified":1549675168543},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1536854432588},{"_id":"source/_posts/docker/Docker-01-docker介绍.md","hash":"de007f76c6f1f11ac27585e2a1dba33f4b468460","modified":1553507100276},{"_id":"themes/next/languages/zh-hk.yml","hash":"d2e6c220eb486d99b9f4120f4a1c7ab07b493612","modified":1549675233600},{"_id":"source/_posts/uml/UML-类图.md","hash":"6258bbb47e6c159dc892ffb7b17c8731ad59811e","modified":1553270973298},{"_id":"themes/next/languages/zh-tw.yml","hash":"e498a7bf6c365207abb23fcea038f3cb75e1ec42","modified":1549675233593},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1536854432589},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1536854432605},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1536854432606},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1536854432606},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1536854432606},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1536854432607},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1536854432607},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1536854432704},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1536854432607},{"_id":"source/image/11.jpg","hash":"ca343ba9238dfeb636769a56b6a7ba35c7744952","modified":1539241307000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1536854432704},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1536854432704},{"_id":"source/image/rabbit/mq-basic.png","hash":"8dfef652adcbab142f3aa48e016d13638ad51108","modified":1543332258179},{"_id":"source/image/rabbit/direct.png","hash":"0ba63de33dd09d3a1d6991e137d9ba2b86339e9f","modified":1543340300105},{"_id":"source/image/rabbit/delay-mq.jpg","hash":"8ca5da0d2fbe7101f549fccbd9e09a2585ccb2cf","modified":1543803092477},{"_id":"source/image/rabbit/mq-exchange.jpg","hash":"f385789ea47f8e12173f2f9ce685671904f6e2b0","modified":1543423659701},{"_id":"source/image/rabbit/mq-fanout.jpg","hash":"592b21617290d0fd5d4208ab1d7c1851092b347f","modified":1543652937916},{"_id":"source/image/rabbit/mq-banding.jpg","hash":"518c0b6fdd25743ef8afbd0f6ef715011c5d183c","modified":1543424238102},{"_id":"source/image/rabbit/mq-miaosha.png","hash":"7df0e1b286581f2a1f50b4edbe83b0173febceef","modified":1543336497865},{"_id":"source/image/rabbit/mq-order-old.png","hash":"87be91fd0d02c3caf87a4c0fb1adf5ba358d92ae","modified":1543337267534},{"_id":"source/image/rabbit/mq-kafka.png","hash":"be560f12df555a8757a7778f2661507b60223a48","modified":1543337322774},{"_id":"source/image/rabbit/mq-order.png","hash":"8aa26063b4782184567dd42b8f6623bf2b086adb","modified":1543337143964},{"_id":"source/image/rabbit/mq-p2p.png","hash":"194a5782e42ccd73c2c301207674b6ba825cc054","modified":1543337565154},{"_id":"source/image/rabbit/mq-rabbit.png","hash":"7582cae932ca99a85a28542f861781cf2e0f8ea3","modified":1543333148764},{"_id":"source/image/rabbit/mq-subPush.png","hash":"9f6ecf7551d172e4c4eaac3a9d67071cf6f3b22f","modified":1543337575464},{"_id":"source/image/rabbit/mq-yibu.png","hash":"9d18af2ad27f0a032381e8140dc78de20081c25a","modified":1543336262327},{"_id":"source/image/rabbit/mq-yibubingxing.png","hash":"1e44d0091d38e075c7c1b3542f674a89575d468e","modified":1543336234041},{"_id":"source/image/rabbit/mq-yibuchuanxing.png","hash":"30da36a811fbb3cf862dfdf16a2ae0ba70fb1760","modified":1543336125224},{"_id":"source/image/rabbit/p2p.png","hash":"2b6a18e703af96042fb81c904f60615d5501f3cc","modified":1543337822632},{"_id":"source/image/rabbit/pubsub.png","hash":"582e814ea15a73daa11b55d1c7e235cfa4a58faf","modified":1543337884964},{"_id":"source/image/rabbit/topic.png","hash":"13921a1b47d658785fa568fb2d3d68ceaeb9fdb7","modified":1543370313534},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432647},{"_id":"source/image/rabbit/mq-direct.jpg","hash":"52b9ba59d94f1976ffe4aa592daf7c695b1a6121","modified":1543424560234},{"_id":"source/image/rabbit/mq-topic.jpg","hash":"d94534e876eea78ee4a4a22586fa35a4e136b93b","modified":1543425218792},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1536854432609},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1536854432610},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1536854432610},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1536854432610},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1536854432611},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1536854432611},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1536854432611},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1536854432611},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1536854432611},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1536854432648},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1536854432648},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1536854432648},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1536854432649},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1536854432649},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1536854432649},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1536854432650},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1536854432650},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1536854432650},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1536854432651},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1536854432651},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1536854432651},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536854432651},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1536854432652},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536854432652},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1536854432653},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1536854432653},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1536854432654},{"_id":"themes/next/source/images/headImage.jpg","hash":"22fe9c31602ffe60aacb9f219937e6e63f970377","modified":1535608323000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1536854432646},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1536854432589},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1536854432589},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1536854432590},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1536854432590},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1536854432590},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1536854432590},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1536854432591},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1536854432593},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1536854432590},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1536854432594},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1536854432595},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1536854432591},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1536854432592},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1553179982959},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1536854432592},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1536854432601},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1536854432591},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1536854432602},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1536854432602},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1536854432603},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1536854432602},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1536854432603},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1536854432592},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1536854432603},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1536854432592},{"_id":"source/image/rabbit/mq-yunzhuanliucheng.jpg","hash":"d310f1143d9191c985d5b296d31152da42f725e3","modified":1543422975284},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432645},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432646},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432633},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432634},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432635},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432594},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536854432594},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1536854432644},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1536854432644},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1536854432632},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1536854432645},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1536854432645},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1536854432634},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1536854432634},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1536854432654},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1536854432654},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1536854432654},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1536854432655},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1536854432655},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1536854432656},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1536854432656},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1536854432656},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1536854432656},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1536854432657},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1536854432663},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1536854432666},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"9d77352da6658387c1dd7678f5f8759429410c29","modified":1553181251632},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1536854432666},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1536854432666},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1536854432666},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1536854432672},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1536854432672},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1536854432673},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1536854432673},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1536854432687},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1536854432688},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1536854432688},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1536854432688},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1536854432689},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1536854432689},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1536854432689},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1536854432674},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1536854432690},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1536854432691},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1536854432690},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1536854432674},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1536854432674},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1536854432674},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1536854432674},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1536854432700},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1536854432701},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1536854432703},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1536854432703},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1536854432704},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1536854432694},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1536854432695},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1536854432695},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1536854432657},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1536854432691},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1536854432691},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1536854432692},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1536854432693},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1536854432693},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1536854432693},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1536854432693},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1536854432693},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1536854432693},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1536854432594},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1536854432594},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1536854432591},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1536854432591},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1536854432594},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1536854432592},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1536854432592},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1536854432593},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1536854432593},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1536854432593},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1536854432593},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1536854432593},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1536854432595},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1536854432596},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1536854432595},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1536854432596},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1536854432596},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1536854432597},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1536854432597},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1536854432598},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1551799258879},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1536854432597},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1536854432598},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1536854432598},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1536854432598},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1536854432599},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1536854432599},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1536854432599},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1536854432600},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1536854432601},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1536854432600},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1536854432595},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1536854432601},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1553179956736},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1536854432604},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1536854432605},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1536854432604},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1536854432605},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536854432688},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1536854432611},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1536854432619},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1536854432628},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1536854432629},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1536854432628},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1536854432630},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1536854432629},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1536854432630},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1536854432631},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1536854432644},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1536854432636},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl.bak","hash":"dc1fe0289e707460df409e16ed771d6016671b86","modified":1546214522000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1536854432644},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1536854432644},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1536854432643},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1536854432644},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1536854432639},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1536854432637},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1536854432639},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1536854432638},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1536854432639},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1536854432639},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1536854432639},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"821751c1b9f0a1ee5e45e82bac1459a8197b6243","modified":1546215412373},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1536854432642},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1536854432661},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1536854432662},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1536854432656},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1536854432662},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536854432667},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536854432667},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536854432668},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536854432667},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536854432668},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536854432668},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1536854432671},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1536854432672},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1536854432672},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536854432674},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1536854432673},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1536854432676},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1536854432675},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1536854432675},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1536854432700},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1536854432700},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1536854432604},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1536854432604},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1536854432662},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1536854432686},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1536854432687},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1536854432702},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1536854432612},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1536854432613},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1536854432618},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1536854432618},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1536854432618},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1536854432618},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1536854432619},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1536854432617},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1536854432615},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1536854432620},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1536854432621},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1536854432620},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1536854432622},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1536854432616},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1536854432623},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1536854432624},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1536854432623},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1536854432622},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1536854432624},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1536854432625},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1536854432625},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1536854432625},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1536854432626},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1553179962958},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1536854432626},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1536854432621},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1536854432627},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1536854432622},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1536854432614},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1536854432614},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1536854432642},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1536854432641},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1536854432643},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1536854432659},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1536854432659},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1536854432660},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1536854432660},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1536854432659},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1536854432669},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536854432668},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1536854432671},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1536854432670},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1536854432671},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1536854432669},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1536854432679},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1536854432678},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1536854432684},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1536854432665},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1536854432699},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1536854432683},{"_id":"source/_posts/docker/Docker-02-创建mysql容器.md","hash":"22d665214c95e9d19fbe5a529a0555f3acf309d0","modified":1553433603590},{"_id":"themes/jiafly/.gitignore","hash":"3ba1b7b4baceca12575cc0f212e13a504af994a7","modified":1554200792764},{"_id":"themes/jiafly/Gruntfile.js","hash":"f0c204fc7b3343417cc1a0fdca12ab089394b654","modified":1554200792765},{"_id":"themes/jiafly/LICENSE","hash":"391dd84c2091363936603d63cc71ba1628a13c86","modified":1554200792765},{"_id":"themes/jiafly/README.md","hash":"e968a2ca87a7e1cbf29974c0a13e01a19132c040","modified":1554200792765},{"_id":"themes/jiafly/_config.yml","hash":"65b26d766811feffd4a25be988192771b7a89afa","modified":1554200792765},{"_id":"themes/jiafly/log.md","hash":"e6b93891f941c723524b143b69b0d303064db54b","modified":1554200792783},{"_id":"themes/jiafly/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554200792756},{"_id":"themes/jiafly/.git/config","hash":"cc96ea5282e977ad8898ba2adfa7218e34874bc8","modified":1554200792759},{"_id":"themes/jiafly/.git/index","hash":"95adcc7c517d2ecb490251cfa890295f86afce84","modified":1554201500161},{"_id":"themes/jiafly/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554200758998},{"_id":"themes/jiafly/.git/packed-refs","hash":"b4b313c3017eb91006d7f7a7751f22d43440264d","modified":1554200792754},{"_id":"themes/jiafly/_data/about.json","hash":"ad37c7a373e24ba9fb26630b0e761cabb3431b90","modified":1554200792765},{"_id":"themes/jiafly/_data/hint.json","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1554200792766},{"_id":"themes/jiafly/_data/link.json","hash":"b865125d0440e6717ee3d88d1b518a4ebdb32d61","modified":1554200792766},{"_id":"themes/jiafly/_data/slider.json","hash":"361373b57cfb5371027af42000bbaec4e03333a3","modified":1554200792766},{"_id":"themes/jiafly/_data/reading.json","hash":"e8045e22b2d499a5d813320a8c2b1bccdbedd46d","modified":1554200792766},{"_id":"themes/jiafly/languages/default.yml","hash":"936a72db42d299cd5e912198b9ace4fd64c476fd","modified":1554200792767},{"_id":"themes/jiafly/languages/zh-CN.yml","hash":"c5fcb3d2b353d9747238ca78106953301f9a2018","modified":1554200792767},{"_id":"themes/jiafly/languages/zh-TW.yml","hash":"ae281c898cea81f4c897c0a69c45e2ce6a4314a6","modified":1554200792769},{"_id":"themes/jiafly/layout/about.ejs","hash":"54e74d61dba41f173f111e32deeb58447260f0e3","modified":1554200792780},{"_id":"themes/jiafly/layout/layout.ejs","hash":"0fbced6bf0129f550ad66d57735d269b70728b49","modified":1554200792781},{"_id":"themes/jiafly/layout/archive.ejs","hash":"0a21af8903e95c6d8bb7554b089ac219e8708ad7","modified":1554200792780},{"_id":"themes/jiafly/layout/index.ejs","hash":"34cbcb6c75e2eef622fea6fecebfe15fb7522a95","modified":1554200792780},{"_id":"themes/jiafly/layout/page.ejs","hash":"90441f114859ce63ef7c7d93d668dbe5939995c2","modified":1554200792781},{"_id":"themes/jiafly/layout/post.ejs","hash":"8e550fd95ef761909294ed3a4aa428ff0509fbf0","modified":1554200792781},{"_id":"themes/jiafly/layout/reading.ejs","hash":"52906ee0e7e679d417d5bc385e054e16e9ff0256","modified":1554200792782},{"_id":"themes/jiafly/layout/tag.ejs","hash":"42ecab14917abd40c0a38e6ab629f089352a24b1","modified":1554200792782},{"_id":"themes/jiafly/source/favicon.png","hash":"d44008b0d6298287cdcfe744a2c8c562569f67ff","modified":1554200792823},{"_id":"themes/jiafly/source/weixin_favicon.png","hash":"4a8466bd7d8cf4753cab8fb68647b40b91a246ad","modified":1554200792826},{"_id":"source/_posts/nginx/Nginx中间件.md","hash":"f5b5605b3b6fa97db90f03b38b3c790eed4c9fb6","modified":1553527436603},{"_id":"source/_posts/jvm/深入理解java虚拟机.md","hash":"a77e698d2317e6ae801cfe86f04824dc29f90b5d","modified":1553527790353},{"_id":"themes/jiafly/.git/logs/HEAD","hash":"413574d3d571e9e4aab0affcd7f375649d99b27d","modified":1554200792757},{"_id":"themes/jiafly/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554200758997},{"_id":"themes/jiafly/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554200759000},{"_id":"themes/jiafly/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554200758998},{"_id":"themes/jiafly/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554200759000},{"_id":"themes/jiafly/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554200759001},{"_id":"themes/jiafly/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554200758999},{"_id":"themes/jiafly/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554200759002},{"_id":"themes/jiafly/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554200759002},{"_id":"themes/jiafly/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554200759002},{"_id":"themes/jiafly/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554200758999},{"_id":"themes/jiafly/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554200759001},{"_id":"themes/jiafly/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554200759001},{"_id":"themes/jiafly/_md/about/index.md","hash":"ee081f0766b1bbdd72b9a254a934033878dd1571","modified":1554200792767},{"_id":"themes/jiafly/_md/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1554200792767},{"_id":"themes/jiafly/layout/_partial/after_footer.ejs","hash":"77476565bc85987d7656751cbc27b473223b0186","modified":1554200792769},{"_id":"themes/jiafly/layout/_partial/archive_title.ejs","hash":"37c38ef6972ddd92668ea08983f4b34230b39d52","modified":1554200792770},{"_id":"themes/jiafly/layout/_partial/archive.ejs","hash":"6fc4dc05d153dbf1dd955df4ff19c380692f87e9","modified":1554200792770},{"_id":"themes/jiafly/layout/_partial/article.ejs","hash":"068cd4f944f8f0810d06bc79d11042da406c7067","modified":1554200792770},{"_id":"themes/jiafly/layout/_partial/construction.ejs","hash":"21190b5a0d567ed4ea5d5289459690b72c1452f0","modified":1554200792770},{"_id":"themes/jiafly/layout/_partial/feature_guide.ejs","hash":"752d5c0a4a6f2f2228ae99bb6bede195080a15d8","modified":1554200792771},{"_id":"themes/jiafly/layout/_partial/footer.ejs","hash":"6634e01d620e2f341c5e3dcda180caf83f042252","modified":1554200792771},{"_id":"themes/jiafly/layout/_partial/float.ejs","hash":"42ad838e39c007226eb4151292a459173e30d8ea","modified":1554200792771},{"_id":"themes/jiafly/layout/_partial/head.ejs","hash":"406c0bdb3ef224bb5ec375123426a0babae2724a","modified":1554200792772},{"_id":"themes/jiafly/layout/_partial/header.ejs","hash":"426eeb374b409a6ab6eb8e21a7213b6a6147d6f9","modified":1554200792772},{"_id":"themes/jiafly/layout/_partial/menu_drawer.ejs","hash":"28a46dd851b971216c788ace1ca5609d961c2446","modified":1554200792772},{"_id":"themes/jiafly/layout/_partial/pagenav.ejs","hash":"e7ada8faaee878ea4dde267d1b420bb45421670d","modified":1554200792773},{"_id":"themes/jiafly/layout/_partial/pagination.ejs","hash":"247c1507971b3e41ed539dd7f8d15af8e21c0d58","modified":1554200792773},{"_id":"themes/jiafly/layout/_partial/search.ejs","hash":"1285a8ecb670f6460b31c0fbca9af13b202f5838","modified":1554200792778},{"_id":"themes/jiafly/layout/_partial/simple_article.ejs","hash":"fdcbb516a3745d0a70c94e565d53510d9f47693c","modified":1554200792778},{"_id":"themes/jiafly/layout/_partial/side_nav.ejs","hash":"b12e72453fb981924d17fa48904af6951f07450f","modified":1554200792778},{"_id":"themes/jiafly/layout/_partial/slider.ejs","hash":"bb7b53f6ca9c852808d955fb074f88112e51ea59","modified":1554200792778},{"_id":"themes/jiafly/layout/_widget/blogroll.ejs","hash":"cf42209342e51e1729dcc9b01b1e5497f152844f","modified":1554200792778},{"_id":"themes/jiafly/layout/_widget/category.ejs","hash":"fb2d42083c97dfaba2717fb2e63e744259ec4530","modified":1554200792779},{"_id":"themes/jiafly/layout/_widget/recent_posts.ejs","hash":"0025878eb4cbf17ddc909f82497e9c73e4091c20","modified":1554200792779},{"_id":"themes/jiafly/layout/_widget/tag.ejs","hash":"31b93c078a03af98de504eeb0153f9c0dbc74ed9","modified":1554200792779},{"_id":"themes/jiafly/layout/_widget/tagcloud.ejs","hash":"1da338304f94f042606b73e235e9c725628c34ad","modified":1554200792780},{"_id":"themes/jiafly/source/css/style.styl","hash":"2c7ef7179e29084efe77c653d537b56889734a22","modified":1554200792823},{"_id":"themes/jiafly/source/js/prettify.js","hash":"d24b1da342b5c2d0582f0922118aaf0b2a6840d5","modified":1554200792825},{"_id":"themes/jiafly/source/js/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1554200792824},{"_id":"themes/jiafly/.git/refs/heads/master","hash":"b6a972f83bb8f43b970d53c77d065c5191f7fb45","modified":1554200792757},{"_id":"themes/jiafly/layout/_partial/plugin/analytics.ejs","hash":"b88303620558f833c6d7505af762d12e21f90f90","modified":1554200792773},{"_id":"themes/jiafly/layout/_partial/plugin/google_code_prettify.ejs","hash":"3aecf1e3e706417131918e3f489557e2d5f438af","modified":1554200792774},{"_id":"themes/jiafly/layout/_partial/plugin/comment.ejs","hash":"7bdcfd6b3a5b7dee57e9b96ca90a127b7562fc3f","modified":1554200792773},{"_id":"themes/jiafly/layout/_partial/plugin/main_javascript.ejs","hash":"cc246117386c6cbde13e3b4316ba5e85af659df6","modified":1554200792774},{"_id":"themes/jiafly/layout/_partial/plugin/mathjax.ejs","hash":"f0e5e249d2bd6dc2a72baf0f71d2d67463c7b3ad","modified":1554200792774},{"_id":"themes/jiafly/layout/_partial/plugin/page_stat.ejs","hash":"25a44cc3f4828efcd0e1c914f25fe9a49bffc253","modified":1554200792774},{"_id":"themes/jiafly/layout/_partial/plugin/reward.ejs","hash":"fde8d42347f72f3b3594c36b1f3c94c6d90a31b6","modified":1554200792775},{"_id":"themes/jiafly/layout/_partial/plugin/noscript.ejs","hash":"182650c8be93b093997ac4d5fe14af2f835b98d9","modified":1554200792774},{"_id":"themes/jiafly/layout/_partial/post/gallery.ejs","hash":"0adb673358b42b9ac52b2c1f72b92368cdcf5f2e","modified":1554200792776},{"_id":"themes/jiafly/layout/_partial/post/prevnext.ejs","hash":"dbb790cf454fda546c82a411a3b50ebb0129a1e8","modified":1554200792776},{"_id":"themes/jiafly/layout/_partial/post/category.ejs","hash":"f48f487dc952f5703d9bc7737fc6eb2e6b439608","modified":1554200792776},{"_id":"themes/jiafly/layout/_partial/post/readtimes.ejs","hash":"c829d0598f9906f663a8ace1c86f2aa6024d642c","modified":1554200792776},{"_id":"themes/jiafly/layout/_partial/post/tag.ejs","hash":"36cbf8f85f93be441d47d1a4a0584afd85480d4f","modified":1554200792777},{"_id":"themes/jiafly/layout/_partial/post/tablecontents.ejs","hash":"a851061909d4e27321d1792a262f55385529fb2d","modified":1554200792777},{"_id":"themes/jiafly/layout/_partial/post/title.ejs","hash":"c6c44ea53bbfd3838c7bf7cc236c6db1a4b9460e","modified":1554200792777},{"_id":"themes/jiafly/layout/_partial/post/time.ejs","hash":"e11498240ece670129a2fbfb2fed16ff315344d4","modified":1554200792777},{"_id":"themes/jiafly/source/css/_base/icons.css","hash":"ab167f1694ffe10c3c51d18a633efd41be121555","modified":1554200792785},{"_id":"themes/jiafly/source/css/_base/layout.styl","hash":"14a747f9fce53f586d11ed67a597a8e71a802d17","modified":1554200792786},{"_id":"themes/jiafly/source/css/_base/lib_customize.styl","hash":"f57a0ac1567ab2329ce4529d5e98bcdb80045cd6","modified":1554201418884},{"_id":"themes/jiafly/source/css/_base/variable.styl","hash":"6812c6940c7c59b9fab5b41e6b832e89416d11c5","modified":1554200792787},{"_id":"themes/jiafly/source/css/_partial/archive.styl","hash":"d912cf297c10e78bd90f3210d596ec87a16f74ad","modified":1554200792787},{"_id":"themes/jiafly/source/css/_partial/about.styl","hash":"b0f80e89e7518d49190b79985c10c8a7b24bfa19","modified":1554200792787},{"_id":"themes/jiafly/source/css/_partial/article.styl","hash":"94bdf4d6da4ec154124ac66008c8dff66882c7e4","modified":1554200792789},{"_id":"themes/jiafly/source/css/_partial/comment.styl","hash":"bfa4d7caedffffab18b29f70db9cbf2a15a5f24b","modified":1554200792789},{"_id":"themes/jiafly/source/css/_partial/footer.styl","hash":"92e1c226202782e5d429fbe72b98ae4e07fc0233","modified":1554200792790},{"_id":"themes/jiafly/source/css/_partial/header.styl","hash":"534686e8e9de54e8dd99eb1b064f5ad3a0199a4e","modified":1554200792790},{"_id":"themes/jiafly/source/css/_partial/index.styl","hash":"27918d50e5a69899f184280d9e0048576ac3c85d","modified":1554200792790},{"_id":"themes/jiafly/source/css/_partial/other.styl","hash":"710eea97e5c98a1426d1a3c0fc8f648279c7a82d","modified":1554200792791},{"_id":"themes/jiafly/source/css/_partial/link_context.styl","hash":"cd403f732319354781c552d26d37bad7c4450ad5","modified":1554200792791},{"_id":"themes/jiafly/source/css/_partial/reading.styl","hash":"7abecdfc7fd21f7d11f1568d430418296b34945a","modified":1554200792792},{"_id":"themes/jiafly/source/css/_partial/search.styl","hash":"caef055a95598415656c417e662264397363704b","modified":1554200792792},{"_id":"themes/jiafly/source/css/_partial/side_nav.styl","hash":"b239b6b55e87e86d038d6aa821beeb66a9cbaf39","modified":1554200792793},{"_id":"themes/jiafly/source/css/_partial/slider.styl","hash":"8933a67e92680dbdfd6af7c2ecaa8d86346df907","modified":1554200792794},{"_id":"themes/jiafly/source/css/_partial/syntax.styl","hash":"20df0f8a54729980094514fc726b51591ada1ad7","modified":1554200792794},{"_id":"themes/jiafly/source/css/_partial/tablecontents.styl","hash":"e04fa0e7664065077750a7223ae3390cc84a4c56","modified":1554200792794},{"_id":"themes/jiafly/source/css/lib/prettify-tomorrow-night-eighties.css","hash":"35e07bd7a4585363060edd558a0e9939e7e68323","modified":1554200792823},{"_id":"themes/jiafly/source/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1554200792821},{"_id":"themes/jiafly/source/css/lib/font-awesome.min.css","hash":"683d12731b7429d32ec7de00a6706602e403013f","modified":1554200792821},{"_id":"themes/jiafly/source/js/materialize.min.js","hash":"c9308fbe808a149aa11061af40a4be5f391cccee","modified":1554200792825},{"_id":"themes/jiafly/.git/objects/pack/pack-d9fcfdd0664e812cebed30fbec1186b76d840e3e.idx","hash":"f952184f6082c96a2687a0b2338fc39bd44ff14c","modified":1554200792277},{"_id":"themes/jiafly/source/css/lib/materialize.min.css","hash":"41d1676b73eec020eaeb9b507dcbcd30069ae8cb","modified":1554200792822},{"_id":"themes/jiafly/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554200792756},{"_id":"themes/jiafly/.git/logs/refs/heads/master","hash":"413574d3d571e9e4aab0affcd7f375649d99b27d","modified":1554200792758},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1554200792806},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1554200792809},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1554200792810},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1554200792811},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1554200792815},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1554200792815},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1554200792813},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1554200792818},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1554200792817},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1554200792818},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1554200792820},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1554200792820},{"_id":"themes/jiafly/source/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1554200792798},{"_id":"themes/jiafly/source/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1554200792797},{"_id":"themes/jiafly/source/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1554200792804},{"_id":"themes/jiafly/source/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1554200792805},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1554200792807},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1554200792812},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1554200792817},{"_id":"themes/jiafly/source/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1554200792819},{"_id":"themes/jiafly/.git/logs/refs/remotes/origin/HEAD","hash":"413574d3d571e9e4aab0affcd7f375649d99b27d","modified":1554200792756},{"_id":"themes/jiafly/source/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1554200792802},{"_id":"themes/jiafly/source/css/font/font-awesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1554200792800},{"_id":"themes/jiafly/.git/objects/pack/pack-d9fcfdd0664e812cebed30fbec1186b76d840e3e.pack","hash":"ec754274563dbbc14a4d96b911420704fb1807bf","modified":1554200792276},{"_id":"source/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1554200792767},{"_id":"source/_data/about.json","hash":"ad37c7a373e24ba9fb26630b0e761cabb3431b90","modified":1554200792765},{"_id":"source/_data/hint.json","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1554200792766},{"_id":"source/_data/link.json","hash":"b865125d0440e6717ee3d88d1b518a4ebdb32d61","modified":1554200792766},{"_id":"source/_data/reading.json","hash":"e8045e22b2d499a5d813320a8c2b1bccdbedd46d","modified":1554200792766},{"_id":"source/_data/slider.json","hash":"361373b57cfb5371027af42000bbaec4e03333a3","modified":1554200792766}],"Category":[{"name":"Docker","_id":"cjtmxtdkr0008zns60js17ryq"},{"name":"UML","_id":"cjtmxtdku000azns6i53qro3k"},{"name":"mysql","parent":"cjtmxtdkr0008zns60js17ryq","_id":"cjto60t2g0002cgusgvqodgaz"},{"name":"nginx","_id":"cjtzn3pmr00025pus7ey4zdef"}],"Data":[{"_id":"hint","data":{"new":{"selector":[".menu-reading",".menu-about"]}}},{"_id":"about","data":{"avatar":"http://pic.jiafly.com/admin/head.jpg","name":"东邪Jiafly","tag":"Web前端/iOS/技术宅","desc":"你的简介（建议一两句话）","skills":{"Javascript":8,"Python":6,"invisible-split-line-1":-1,"Node.js":4},"projects":[{"name":"你的项目A","image":"https://d13yacurqjgara.cloudfront.net/users/138819/screenshots/2578899/dribbble_800x600_01_1x.png","tags":["2016年","项目标签"],"description":"你的项目A的简介","link_text":"网站链接","link":"https://dribbble.com/"},{"name":"你的作品B","image":"https://d13yacurqjgara.cloudfront.net/users/4094/screenshots/2578885/time-lords-drib_1x.jpg","description":"你的作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["http://pic.jiafly.com/admin/wechatpay.jpg","http://pic.jiafly.com/admin/alipay.jpg"]}},{"_id":"link","data":{"social":{"weibo":"http://weibo.com/1956184117","github":"https://github.com/jiafly","rss":"/atom.xml"},"extern":{"raytaylorism主题作者的技术博客":"http://raytaylorlin.com/","Github地址（测试友情链接）":"https://github.com/raytaylorlin"}}},{"_id":"reading","data":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}},{"_id":"slider","data":[{"image":"http://lorempixel.com/580/250/nature/1","align":"center","title":"This is our big Tagline!","subtitle":"Here's our small slogan.","link":"/"},{"image":"http://lorempixel.com/580/250/nature/2","align":"left","title":"Left Aligned Caption","subtitle":"Here's our small slogan.","link":null},{"image":"http://lorempixel.com/580/250/nature/3","align":"right","title":"Right Aligned Caption","subtitle":"Here's our small slogan.","link":null}]}],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","date":"2018-09-13T17:33:39.395Z","updated":"2018-09-13T17:32:00.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjtmxtdeg0000zns68x9k53rt","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>\n"},{"title":"关于","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ntype: about\nlayout: \"about\"\n---\n","date":"2018-09-12T05:31:18.627Z","updated":"2018-09-12T05:31:18.626Z","path":"about/index.html","comments":1,"_id":"cjtmxtdfx0001zns6gbune54n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","type":"tags","layout":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: tags\nlayout: \"tags\"\n---\n\n","date":"2018-09-12T05:32:03.273Z","updated":"2018-09-12T05:32:03.273Z","path":"tags/index.html","comments":1,"_id":"cjtmxtdfx0002zns6tz3l41j5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\nlayout: \"categories\"\n---\n","date":"2018-09-12T05:32:03.278Z","updated":"2018-09-12T05:32:03.277Z","path":"categories/index.html","comments":1,"_id":"cjtmxtdfy0003zns6sjjjmi6s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RabbitMQ实战","date":"2018-11-27T12:31:16.000Z","tags":["rabbitMQ","消息队列"],"categories":["消息队列"],"_content":"# 消息中间件\n## 什么是消息中间\n消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、\nJSON 等，也可以很复杂，比如内嵌对象。\n\n消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。\n\n消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点\n(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。\n\n目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。\n\n## 消息中间件的作用\n消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消\n息中间件的作用可以概括如下。\n### 解耦\n在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。\n### 冗余〈存储)\n有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。\n### 扩展性\n因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。\n### 削峰\n在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。\n### 可恢复性\n当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。\n### 顺序保证\n在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。\n### 缓冲\n在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。\n### 异步通信\n在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。\n\n# RabbitMQ入门\n## RabbitMQ介绍\nRabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息\n队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。\n\nRabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。\n\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\n## RabbitMQ安装\n- 使用docker安装(3-management版本自带管理后台)\n```bash\n$ docker pull rabbitmq:3-management \n```\n- 启动rabbitMQ并且启动管理后台\n```bash\n$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management\n\n$ docker start rabbitmq\n```\n- 查看管理后台\n在浏览器打开 http://localhost:15672/ 输入用户名:admin 密码:admin 可进入管理后台\n\n\n## 相关概念介绍\n### 生产者和消费者\n- Producer:生产者，就是投递消息的一方。\n生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。\n\n- Consumer:消费者，就是接收消息的一方。\n消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。\n\n- Broker:消息中间件的服务节点。\n对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。\n\nRabbitMQ运转流程\n![RabbitMQ运转流程](/image/rabbit/mq-yunzhuanliucheng.jpg)\n\n### 交换器Exchange，路由RoutingKey，绑定Binding\n- Exchange:交换器\n![交换器](/image/rabbit/mq-exchange.jpg)\nMQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。\nRabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。\n\n- RoutingKey:路由键\n生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。\n\n- Binding:绑定\nRabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:\n![绑定](/image/rabbit/mq-banding.jpg)\n\n### 交换器类型\nRabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提\n到另外两种类型:System和自定义，这里就不详细介绍了。\n#### fanout\n就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：\n![fanout](/image/rabbit/mq-fanout.jpg)\n#### direct(默认的交换器类型)\ndirect类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：\n![direct](/image/rabbit/mq-direct.jpg)\n#### topic\n上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:\n- RoutingKey为一个点号\".\"分隔的字符串(被点号\".\"分隔开的每一段独立的字符串称为一个单词)，如\"com.rabbitmq.client\"，\"java.util.concurrent\",\"com.hidden.client\"等\n- BindingKey也是点号\".\"分隔\n- BindingKey中可以存在两种特殊字符串\"星号\"和\"#\"，用于做模糊匹配，其中\"星号\"用于匹配一个单词，”#\"用于匹配多规格单词(可以是零个)。\n如下图：\n![topic](/image/rabbit/mq-topic.jpg)\n思考: \n1.路由建 \"com.rabbitmq.client\"会路由到哪一个队列？\n2.路由建 \"com.hidden.client\"会路由到哪一个队列？\n3.路由建 \"com.hidden.demo\"会路由到哪一个队列？\n4.路由建 \"java.util.concurrent\"会路由到哪一个队列？\n5.路由建 \"java.rabbitmq.demo\"会路由到哪一个队列？\n\n#### headers(不常用)\nheaders类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中\n的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。\n\n\n## 交换器类型详解\n### \n新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer\npom.xml\n```POM\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n  </dependency>\n```\nrabbit-producer/application.properties\n```\nserver.port=1180\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\nrabbit-producer/application.properties\n```\nserver.port=1181\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\n项目创建完成\n\n### 声明一个队列各个参数的意义\nname: 队列的名称 字符串\ndurable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库\nexclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。\nautoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除\narguments: 队列中的消息什么时候会自动被删除？ 是一个Map<String, Object>，他有如下参数\n   \"x-message-ttl\": 1000  设置队列中的所有消息的生存周期\n   \"x-expires\": 1000  当队列在指定的时间没有被访问就会被删除\n   \"x-max-length\": 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉\n   \"x-max-length-bytes\":  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小\n   \"x-dead-letter-exchange\": \"\" 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉\n   \"x-dead-letter-routing-key\": \"\"  将删除的消息推送到指定交换机的指定路由键的队列中去\n   \"x-max-priority\":  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费\n   \"x-queue-mode\": \"lazy\" 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中\n   \"x-queue-master-locator\"\n\n### fanout代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:35 PM\n */\n@Configuration\npublic class FanoutConfig {\n\n    // 声明一个队列，后面有很多属性\n    @Bean\n    public Queue fanoutQueue1(){\n        return new Queue(\"fanout.queue1\");\n    }\n\n    @Bean\n    public Queue fanoutQueue2(){\n        return new Queue(\"fanout.queue2\");\n    }\n\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange(\"fanout_exchange\");\n    }\n\n    @Bean\n    public Binding fanoutBinding1(){\n        return BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());\n    }\n\n    @Bean\n    public Binding fanoutBinding2(){\n        return BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());\n    }\n\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:40 PM\n */\n@Component\n@Slf4j\npublic class FanoutConsumer {\n\n    @RabbitListener(queues = \"fanout.queue1\")\n    @RabbitHandler\n    public void fanoutConsumer1(String msg){\n        log.info(\"1fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n\n    @RabbitListener(queues = \"fanout.queue2\")\n    @RabbitHandler\n    public void fanoutConsumer2(String msg){\n        log.info(\"2fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class FanoutProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * fanout类型\n     * @param msg 消息内容\n     * @return 消息内容\n     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey\n     * 只是routingKey可以任意指定\n     */\n    @RequestMapping(\"/fanout/{msg}\")\n    public String fanoutProducer(@PathVariable(\"msg\") String msg){\n        log.info(\"fanout生产消息 msg:{}\", msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息\n        template.convertAndSend(\"fanout_exchange\",\"\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/fanout/测试消息 ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。\n\n### direct代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.direct;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author liuyi\n * @date 2018/11/29 1:40 AM\n */\n@Configuration\npublic class DirectConfig {\n\n    /**\n     * 定义两个队列\n     * @return\n     */\n    @Bean\n    public Queue directQueue1() {\n        return new Queue(\"direct.queue1\",true);\n    }\n\n    @Bean\n    public Queue directQueue2() {\n        return new Queue(\"direct.queue2\", true);\n    }\n\n    @Bean\n    public Queue directQueue3() {\n        Map<String, Object> map = new HashMap<>(16);\n        return new Queue(\"direct.queue3\",true,true, true, map);\n    }\n\n\n    /**\n     * 定义 exchange\n     * @return\n     */\n    @Bean\n    public DirectExchange directExchange() {\n        return new DirectExchange(\"direct_exchange\",true,true);\n    }\n\n    /**\n     * 队列1 绑定 exchange 并且设置routingKey为direct.1\n     * @return\n     */\n    @Bean\n    public Binding directBinding1(){\n        return BindingBuilder.bind(directQueue1()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n\n    /**\n     * 队列2 绑定 exchange 并且设置routingKey为direct.2\n     * @return\n     */\n    @Bean\n    public Binding directBinding2(){\n        return BindingBuilder.bind(directQueue2()).to(directExchange()).with(\"direct.routing.key2\");\n    }\n\n    @Bean\n    public Binding directBinding3(){\n        return BindingBuilder.bind(directQueue3()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DirectProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * direct类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/direct/queue1/{msg}\")\n    public String directProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"direct_exchange\", \"direct.routing.key1\", msg);\n        return msg;\n    }\n\n    @RequestMapping(\"/direct/queue2/{msg}\")\n    public String directProducerTwo(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"mq-direct_exchange\", \"direct.routing.key2\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/direct/queue1/测试消息1 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可\n\n### topic代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.topic;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/11/29 8:42 AM\n */\n@Configuration\npublic class TopicConfig {\n\n    /**\n     * 创建队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue topicQueue1() {\n        return new Queue(\"topic.queue1\", true);\n    }\n\n    @Bean\n    public Queue topicQueue2() {\n        return new Queue(\"topic.queue2\", true);\n    }\n\n    /**\n     * 创建交换器\n     */\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(\"topic_exchange\");\n    }\n\n    /**\n     * 绑定\n     */\n    @Bean\n    public Binding topicBinding1() {\n        return BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(\"*.jiafly.*\");\n    }\n\n    @Bean\n    public Binding topicBinding2() {\n        return BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(\"com.jiafly.*\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class TopicProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * topic类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/topic/{msg}\")\n    public String topicProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"topic:生产消息:\" + msg);\n        template.convertAndSend(\"topic_exchange\", \"com.jiafly.test\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/topic/测试消息 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示\n\n\n## 延时队列\n### 延时队列能做什么\n- 订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。\n- 短信通知：下单成功后 60s 之后给用户发送短信通知。\n- 失败重试：业务操作失败后，间隔一定的时间进行失败重试\n\n这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。\n\n在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。\n![延时队列](/image/rabbit/delay-mq.jpg)\n### 死信交换器DLX(Dead-Letter-Exchange)\nDLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。\n\nRouter: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.\n\n具体代码实现:\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\n\n/**\n * @author liuyi\n * @date 2018/12/2 12:44 AM\n */\n@Configuration\npublic class DelayConfig {\n\n    /**\n     * 定义一个交换机\n     *\n     * @return\n     */\n    @Bean\n    public DirectExchange delayExchange() {\n        return new DirectExchange(\"delay_exchange\", true, false);\n    }\n\n    /**\n     * 转发队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue routerQueue() {\n        return new Queue(\"router.queue\", true, false, false);\n    }\n\n    /**\n     * 转发队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding routerBinding() {\n        return BindingBuilder.bind(routerQueue()).to(delayExchange()).with(\"router.routing.key\");\n    }\n\n\n    /**\n     * 死信队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue deadLetterQueue() {\n        HashMap<String, Object> arguments = new HashMap(16);\n        arguments.put(\"x-dead-letter-exchange\", \"delay_exchange\");\n        arguments.put(\"x-dead-letter-routing-key\", \"router.routing.key\");\n        return new Queue(\"dead.letter.queue\", true, false, false, arguments);\n    }\n\n\n    /**\n     * 死信队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding deadLetterBinding() {\n        return BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(\"dead.letter.routing.key\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/3 6:13 PM\n */\n@Component\n@Slf4j\npublic class DelayConsumer {\n\n    @RabbitListener(queues = \"router.queue\")\n    @RabbitHandler\n    public void delayConsumer(String msg) {\n        log.info(\"delay.queue1接收消息:{}\", msg);\n    }\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.amqp.support.converter.AbstractJavaTypeMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/12/3 7:17 PM\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DelayProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * 延迟队列\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/delay/{msg}\")\n    public String delayProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"delay:生产消息:\" + msg);\n        template.convertAndSend(\"delay_exchange\", \"dead.letter.routing.key\", msg, message -> {\n            message.getMessageProperties().setExpiration(30 * 1000 + \"\");\n            return message;\n        });\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/delay/测试消息 ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。\n\n\n## 消息的持久化\n为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。\n创建时候的参数:\n- durable \n是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 \n- execulusive \n表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable \n- autoDelete \n当没有生成者/消费者使用此队列时，此队列会被自动删除。 \n(即当最后一个消费者退订后即被删除)\n\n\n设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。\n\n\n## 消息的确认与拒绝\n消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：\n- 自动确认模式:\n当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。\n\n- 显式确认模式:\n消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息\n\n如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。 \nRabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.","source":"temp/RabbitMQ.md","raw":"\n---\ntitle: RabbitMQ实战\ndate: 2018-11-27 20:31:16\ntags: [rabbitMQ,消息队列]\ncategories: [消息队列]\n---\n# 消息中间件\n## 什么是消息中间\n消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、\nJSON 等，也可以很复杂，比如内嵌对象。\n\n消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。\n\n消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点\n(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。\n\n目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。\n\n## 消息中间件的作用\n消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消\n息中间件的作用可以概括如下。\n### 解耦\n在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。\n### 冗余〈存储)\n有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。\n### 扩展性\n因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。\n### 削峰\n在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。\n### 可恢复性\n当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。\n### 顺序保证\n在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。\n### 缓冲\n在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。\n### 异步通信\n在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。\n\n# RabbitMQ入门\n## RabbitMQ介绍\nRabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息\n队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。\n\nRabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。\n\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\n## RabbitMQ安装\n- 使用docker安装(3-management版本自带管理后台)\n```bash\n$ docker pull rabbitmq:3-management \n```\n- 启动rabbitMQ并且启动管理后台\n```bash\n$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management\n\n$ docker start rabbitmq\n```\n- 查看管理后台\n在浏览器打开 http://localhost:15672/ 输入用户名:admin 密码:admin 可进入管理后台\n\n\n## 相关概念介绍\n### 生产者和消费者\n- Producer:生产者，就是投递消息的一方。\n生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。\n\n- Consumer:消费者，就是接收消息的一方。\n消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。\n\n- Broker:消息中间件的服务节点。\n对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。\n\nRabbitMQ运转流程\n![RabbitMQ运转流程](/image/rabbit/mq-yunzhuanliucheng.jpg)\n\n### 交换器Exchange，路由RoutingKey，绑定Binding\n- Exchange:交换器\n![交换器](/image/rabbit/mq-exchange.jpg)\nMQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。\nRabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。\n\n- RoutingKey:路由键\n生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。\n\n- Binding:绑定\nRabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:\n![绑定](/image/rabbit/mq-banding.jpg)\n\n### 交换器类型\nRabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提\n到另外两种类型:System和自定义，这里就不详细介绍了。\n#### fanout\n就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：\n![fanout](/image/rabbit/mq-fanout.jpg)\n#### direct(默认的交换器类型)\ndirect类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：\n![direct](/image/rabbit/mq-direct.jpg)\n#### topic\n上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:\n- RoutingKey为一个点号\".\"分隔的字符串(被点号\".\"分隔开的每一段独立的字符串称为一个单词)，如\"com.rabbitmq.client\"，\"java.util.concurrent\",\"com.hidden.client\"等\n- BindingKey也是点号\".\"分隔\n- BindingKey中可以存在两种特殊字符串\"星号\"和\"#\"，用于做模糊匹配，其中\"星号\"用于匹配一个单词，”#\"用于匹配多规格单词(可以是零个)。\n如下图：\n![topic](/image/rabbit/mq-topic.jpg)\n思考: \n1.路由建 \"com.rabbitmq.client\"会路由到哪一个队列？\n2.路由建 \"com.hidden.client\"会路由到哪一个队列？\n3.路由建 \"com.hidden.demo\"会路由到哪一个队列？\n4.路由建 \"java.util.concurrent\"会路由到哪一个队列？\n5.路由建 \"java.rabbitmq.demo\"会路由到哪一个队列？\n\n#### headers(不常用)\nheaders类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中\n的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。\n\n\n## 交换器类型详解\n### \n新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer\npom.xml\n```POM\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-amqp</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <optional>true</optional>\n  </dependency>\n```\nrabbit-producer/application.properties\n```\nserver.port=1180\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\nrabbit-producer/application.properties\n```\nserver.port=1181\n# 端口 1181 消费者  1180 生产者\n\nspring.rabbitmq.host=127.0.0.1\nspring.rabbitmq.username=admin\nspring.rabbitmq.password=admin\nspring.rabbitmq.port=5672\n```\n项目创建完成\n\n### 声明一个队列各个参数的意义\nname: 队列的名称 字符串\ndurable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库\nexclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。\nautoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除\narguments: 队列中的消息什么时候会自动被删除？ 是一个Map<String, Object>，他有如下参数\n   \"x-message-ttl\": 1000  设置队列中的所有消息的生存周期\n   \"x-expires\": 1000  当队列在指定的时间没有被访问就会被删除\n   \"x-max-length\": 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉\n   \"x-max-length-bytes\":  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小\n   \"x-dead-letter-exchange\": \"\" 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉\n   \"x-dead-letter-routing-key\": \"\"  将删除的消息推送到指定交换机的指定路由键的队列中去\n   \"x-max-priority\":  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费\n   \"x-queue-mode\": \"lazy\" 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中\n   \"x-queue-master-locator\"\n\n### fanout代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.FanoutExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:35 PM\n */\n@Configuration\npublic class FanoutConfig {\n\n    // 声明一个队列，后面有很多属性\n    @Bean\n    public Queue fanoutQueue1(){\n        return new Queue(\"fanout.queue1\");\n    }\n\n    @Bean\n    public Queue fanoutQueue2(){\n        return new Queue(\"fanout.queue2\");\n    }\n\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange(\"fanout_exchange\");\n    }\n\n    @Bean\n    public Binding fanoutBinding1(){\n        return BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());\n    }\n\n    @Bean\n    public Binding fanoutBinding2(){\n        return BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());\n    }\n\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.fanout;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/1 4:40 PM\n */\n@Component\n@Slf4j\npublic class FanoutConsumer {\n\n    @RabbitListener(queues = \"fanout.queue1\")\n    @RabbitHandler\n    public void fanoutConsumer1(String msg){\n        log.info(\"1fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n\n    @RabbitListener(queues = \"fanout.queue2\")\n    @RabbitHandler\n    public void fanoutConsumer2(String msg){\n        log.info(\"2fanoutConsumer 接收消息msg: {}\", msg);\n    }\n\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class FanoutProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * fanout类型\n     * @param msg 消息内容\n     * @return 消息内容\n     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey\n     * 只是routingKey可以任意指定\n     */\n    @RequestMapping(\"/fanout/{msg}\")\n    public String fanoutProducer(@PathVariable(\"msg\") String msg){\n        log.info(\"fanout生产消息 msg:{}\", msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息\n        template.convertAndSend(\"fanout_exchange\",\"\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/fanout/测试消息 ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。\n\n### direct代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.direct;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * @author liuyi\n * @date 2018/11/29 1:40 AM\n */\n@Configuration\npublic class DirectConfig {\n\n    /**\n     * 定义两个队列\n     * @return\n     */\n    @Bean\n    public Queue directQueue1() {\n        return new Queue(\"direct.queue1\",true);\n    }\n\n    @Bean\n    public Queue directQueue2() {\n        return new Queue(\"direct.queue2\", true);\n    }\n\n    @Bean\n    public Queue directQueue3() {\n        Map<String, Object> map = new HashMap<>(16);\n        return new Queue(\"direct.queue3\",true,true, true, map);\n    }\n\n\n    /**\n     * 定义 exchange\n     * @return\n     */\n    @Bean\n    public DirectExchange directExchange() {\n        return new DirectExchange(\"direct_exchange\",true,true);\n    }\n\n    /**\n     * 队列1 绑定 exchange 并且设置routingKey为direct.1\n     * @return\n     */\n    @Bean\n    public Binding directBinding1(){\n        return BindingBuilder.bind(directQueue1()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n\n    /**\n     * 队列2 绑定 exchange 并且设置routingKey为direct.2\n     * @return\n     */\n    @Bean\n    public Binding directBinding2(){\n        return BindingBuilder.bind(directQueue2()).to(directExchange()).with(\"direct.routing.key2\");\n    }\n\n    @Bean\n    public Binding directBinding3(){\n        return BindingBuilder.bind(directQueue3()).to(directExchange()).with(\"direct.routing.key1\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DirectProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * direct类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/direct/queue1/{msg}\")\n    public String directProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"direct_exchange\", \"direct.routing.key1\", msg);\n        return msg;\n    }\n\n    @RequestMapping(\"/direct/queue2/{msg}\")\n    public String directProducerTwo(@PathVariable(\"msg\") String msg) {\n        log.info(\"生产者生产消息:\" + msg);\n        // 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息\n        template.convertAndSend(\"mq-direct_exchange\", \"direct.routing.key2\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/direct/queue1/测试消息1 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可\n\n### topic代码实现\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.topic;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author liuyi\n * @date 2018/11/29 8:42 AM\n */\n@Configuration\npublic class TopicConfig {\n\n    /**\n     * 创建队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue topicQueue1() {\n        return new Queue(\"topic.queue1\", true);\n    }\n\n    @Bean\n    public Queue topicQueue2() {\n        return new Queue(\"topic.queue2\", true);\n    }\n\n    /**\n     * 创建交换器\n     */\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(\"topic_exchange\");\n    }\n\n    /**\n     * 绑定\n     */\n    @Bean\n    public Binding topicBinding1() {\n        return BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(\"*.jiafly.*\");\n    }\n\n    @Bean\n    public Binding topicBinding2() {\n        return BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(\"com.jiafly.*\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\n和fanout相同，只是监听的队列不同而已\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/11/28 11:50 AM\n * 生产者\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class TopicProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * topic类型\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/topic/{msg}\")\n    public String topicProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"topic:生产消息:\" + msg);\n        template.convertAndSend(\"topic_exchange\", \"com.jiafly.test\", msg);\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/topic/测试消息 ，就可在消费者项目中看到打印的信息。\n如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示\n\n\n## 延时队列\n### 延时队列能做什么\n- 订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。\n- 短信通知：下单成功后 60s 之后给用户发送短信通知。\n- 失败重试：业务操作失败后，间隔一定的时间进行失败重试\n\n这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。\n\n在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。\n![延时队列](/image/rabbit/delay-mq.jpg)\n### 死信交换器DLX(Dead-Letter-Exchange)\nDLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。\n\nRouter: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.\n\n具体代码实现:\n#### 在消费者项目中添加一个配置类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.HashMap;\n\n/**\n * @author liuyi\n * @date 2018/12/2 12:44 AM\n */\n@Configuration\npublic class DelayConfig {\n\n    /**\n     * 定义一个交换机\n     *\n     * @return\n     */\n    @Bean\n    public DirectExchange delayExchange() {\n        return new DirectExchange(\"delay_exchange\", true, false);\n    }\n\n    /**\n     * 转发队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue routerQueue() {\n        return new Queue(\"router.queue\", true, false, false);\n    }\n\n    /**\n     * 转发队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding routerBinding() {\n        return BindingBuilder.bind(routerQueue()).to(delayExchange()).with(\"router.routing.key\");\n    }\n\n\n    /**\n     * 死信队列\n     *\n     * @return\n     */\n    @Bean\n    public Queue deadLetterQueue() {\n        HashMap<String, Object> arguments = new HashMap(16);\n        arguments.put(\"x-dead-letter-exchange\", \"delay_exchange\");\n        arguments.put(\"x-dead-letter-routing-key\", \"router.routing.key\");\n        return new Queue(\"dead.letter.queue\", true, false, false, arguments);\n    }\n\n\n    /**\n     * 死信队列绑定交换机\n     *\n     * @return\n     */\n    @Bean\n    public Binding deadLetterBinding() {\n        return BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(\"dead.letter.routing.key\");\n    }\n}\n```\n#### 在消费者项目中添加一个消息监听类\n```JAVA\npackage com.jiafly.rabbit.consumer.delay;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.rabbit.annotation.RabbitHandler;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author liuyi\n * @date 2018/12/3 6:13 PM\n */\n@Component\n@Slf4j\npublic class DelayConsumer {\n\n    @RabbitListener(queues = \"router.queue\")\n    @RabbitHandler\n    public void delayConsumer(String msg) {\n        log.info(\"delay.queue1接收消息:{}\", msg);\n    }\n}\n```\n#### 在生产者项目中添加一个消息发送controller\n```JAVA\npackage com.jiafly.rabbit.producer;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.amqp.support.converter.AbstractJavaTypeMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author liuyi\n * @date 2018/12/3 7:17 PM\n */\n@RestController\n@RequestMapping()\n@Slf4j\npublic class DelayProducer {\n\n    @Autowired\n    private AmqpTemplate template;\n\n    /**\n     * 延迟队列\n     * @param msg 消息内容\n     * @return 消息内容\n     */\n    @RequestMapping(\"/delay/{msg}\")\n    public String delayProducerOne(@PathVariable(\"msg\") String msg) {\n        log.info(\"delay:生产消息:\" + msg);\n        template.convertAndSend(\"delay_exchange\", \"dead.letter.routing.key\", msg, message -> {\n            message.getMessageProperties().setExpiration(30 * 1000 + \"\");\n            return message;\n        });\n        return msg;\n    }\n}\n```\n#### 测试\n分别启动两个项目，在浏览器的路径上输入 http://localhost:1180/delay/测试消息 ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。\n\n\n## 消息的持久化\n为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。\n创建时候的参数:\n- durable \n是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 \n- execulusive \n表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable \n- autoDelete \n当没有生成者/消费者使用此队列时，此队列会被自动删除。 \n(即当最后一个消费者退订后即被删除)\n\n\n设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。\n\n\n## 消息的确认与拒绝\n消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：\n- 自动确认模式:\n当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。\n\n- 显式确认模式:\n消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息\n\n如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。 \nRabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.","updated":"2019-03-05T15:46:06.000Z","path":"temp/RabbitMQ.html","comments":1,"layout":"page","_id":"cjtmxtdfz0005zns6498m03vn","content":"<h1 id=\"消息中间件\"><a href=\"#消息中间件\" class=\"headerlink\" title=\"消息中间件\"></a>消息中间件</h1><h2 id=\"什么是消息中间\"><a href=\"#什么是消息中间\" class=\"headerlink\" title=\"什么是消息中间\"></a>什么是消息中间</h2><p>消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、<br>JSON 等，也可以很复杂，比如内嵌对象。</p>\n<p>消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p>\n<p>消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点<br>(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。</p>\n<p>目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。</p>\n<h2 id=\"消息中间件的作用\"><a href=\"#消息中间件的作用\" class=\"headerlink\" title=\"消息中间件的作用\"></a>消息中间件的作用</h2><p>消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消<br>息中间件的作用可以概括如下。</p>\n<h3 id=\"解耦\"><a href=\"#解耦\" class=\"headerlink\" title=\"解耦\"></a>解耦</h3><p>在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。</p>\n<h3 id=\"冗余〈存储\"><a href=\"#冗余〈存储\" class=\"headerlink\" title=\"冗余〈存储)\"></a>冗余〈存储)</h3><p>有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。</p>\n<h3 id=\"扩展性\"><a href=\"#扩展性\" class=\"headerlink\" title=\"扩展性\"></a>扩展性</h3><p>因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</p>\n<h3 id=\"削峰\"><a href=\"#削峰\" class=\"headerlink\" title=\"削峰\"></a>削峰</h3><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。</p>\n<h3 id=\"可恢复性\"><a href=\"#可恢复性\" class=\"headerlink\" title=\"可恢复性\"></a>可恢复性</h3><p>当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。</p>\n<h3 id=\"顺序保证\"><a href=\"#顺序保证\" class=\"headerlink\" title=\"顺序保证\"></a>顺序保证</h3><p>在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</p>\n<h3 id=\"缓冲\"><a href=\"#缓冲\" class=\"headerlink\" title=\"缓冲\"></a>缓冲</h3><p>在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。</p>\n<h3 id=\"异步通信\"><a href=\"#异步通信\" class=\"headerlink\" title=\"异步通信\"></a>异步通信</h3><p>在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。</p>\n<h1 id=\"RabbitMQ入门\"><a href=\"#RabbitMQ入门\" class=\"headerlink\" title=\"RabbitMQ入门\"></a>RabbitMQ入门</h1><h2 id=\"RabbitMQ介绍\"><a href=\"#RabbitMQ介绍\" class=\"headerlink\" title=\"RabbitMQ介绍\"></a>RabbitMQ介绍</h2><p>RabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息<br>队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。</p>\n<p>RabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p>\n<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n<h2 id=\"RabbitMQ安装\"><a href=\"#RabbitMQ安装\" class=\"headerlink\" title=\"RabbitMQ安装\"></a>RabbitMQ安装</h2><ul>\n<li><p>使用docker安装(3-management版本自带管理后台)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动rabbitMQ并且启动管理后台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start rabbitmq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看管理后台<br>在浏览器打开 <a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 输入用户名:admin 密码:admin 可进入管理后台</p>\n</li>\n</ul>\n<h2 id=\"相关概念介绍\"><a href=\"#相关概念介绍\" class=\"headerlink\" title=\"相关概念介绍\"></a>相关概念介绍</h2><h3 id=\"生产者和消费者\"><a href=\"#生产者和消费者\" class=\"headerlink\" title=\"生产者和消费者\"></a>生产者和消费者</h3><ul>\n<li><p>Producer:生产者，就是投递消息的一方。<br>生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。</p>\n</li>\n<li><p>Consumer:消费者，就是接收消息的一方。<br>消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。</p>\n</li>\n<li><p>Broker:消息中间件的服务节点。<br>对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。</p>\n</li>\n</ul>\n<p>RabbitMQ运转流程<br><img src=\"/image/rabbit/mq-yunzhuanliucheng.jpg\" alt=\"RabbitMQ运转流程\"></p>\n<h3 id=\"交换器Exchange，路由RoutingKey，绑定Binding\"><a href=\"#交换器Exchange，路由RoutingKey，绑定Binding\" class=\"headerlink\" title=\"交换器Exchange，路由RoutingKey，绑定Binding\"></a>交换器Exchange，路由RoutingKey，绑定Binding</h3><ul>\n<li><p>Exchange:交换器<br><img src=\"/image/rabbit/mq-exchange.jpg\" alt=\"交换器\"><br>MQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。<br>RabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。</p>\n</li>\n<li><p>RoutingKey:路由键<br>生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。</p>\n</li>\n<li><p>Binding:绑定<br>RabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:<br><img src=\"/image/rabbit/mq-banding.jpg\" alt=\"绑定\"></p>\n</li>\n</ul>\n<h3 id=\"交换器类型\"><a href=\"#交换器类型\" class=\"headerlink\" title=\"交换器类型\"></a>交换器类型</h3><p>RabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提<br>到另外两种类型:System和自定义，这里就不详细介绍了。</p>\n<h4 id=\"fanout\"><a href=\"#fanout\" class=\"headerlink\" title=\"fanout\"></a>fanout</h4><p>就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：<br><img src=\"/image/rabbit/mq-fanout.jpg\" alt=\"fanout\"></p>\n<h4 id=\"direct-默认的交换器类型\"><a href=\"#direct-默认的交换器类型\" class=\"headerlink\" title=\"direct(默认的交换器类型)\"></a>direct(默认的交换器类型)</h4><p>direct类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：<br><img src=\"/image/rabbit/mq-direct.jpg\" alt=\"direct\"></p>\n<h4 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h4><p>上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:</p>\n<ul>\n<li>RoutingKey为一个点号”.”分隔的字符串(被点号”.”分隔开的每一段独立的字符串称为一个单词)，如”com.rabbitmq.client”，”java.util.concurrent”,”com.hidden.client”等</li>\n<li>BindingKey也是点号”.”分隔</li>\n<li>BindingKey中可以存在两种特殊字符串”星号”和”#”，用于做模糊匹配，其中”星号”用于匹配一个单词，”#”用于匹配多规格单词(可以是零个)。<br>如下图：<br><img src=\"/image/rabbit/mq-topic.jpg\" alt=\"topic\"><br>思考:<br>1.路由建 “com.rabbitmq.client”会路由到哪一个队列？<br>2.路由建 “com.hidden.client”会路由到哪一个队列？<br>3.路由建 “com.hidden.demo”会路由到哪一个队列？<br>4.路由建 “java.util.concurrent”会路由到哪一个队列？<br>5.路由建 “java.rabbitmq.demo”会路由到哪一个队列？</li>\n</ul>\n<h4 id=\"headers-不常用\"><a href=\"#headers-不常用\" class=\"headerlink\" title=\"headers(不常用)\"></a>headers(不常用)</h4><p>headers类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中<br>的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。</p>\n<h2 id=\"交换器类型详解\"><a href=\"#交换器类型详解\" class=\"headerlink\" title=\"交换器类型详解\"></a>交换器类型详解</h2><p>###<br>新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer<br>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1180</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1181</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>项目创建完成</p>\n<h3 id=\"声明一个队列各个参数的意义\"><a href=\"#声明一个队列各个参数的意义\" class=\"headerlink\" title=\"声明一个队列各个参数的意义\"></a>声明一个队列各个参数的意义</h3><p>name: 队列的名称 字符串<br>durable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库<br>exclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。<br>autoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除<br>arguments: 队列中的消息什么时候会自动被删除？ 是一个Map&lt;String, Object&gt;，他有如下参数<br>   “x-message-ttl”: 1000  设置队列中的所有消息的生存周期<br>   “x-expires”: 1000  当队列在指定的时间没有被访问就会被删除<br>   “x-max-length”: 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉<br>   “x-max-length-bytes”:  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小<br>   “x-dead-letter-exchange”: “” 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉<br>   “x-dead-letter-routing-key”: “”  将删除的消息推送到指定交换机的指定路由键的队列中去<br>   “x-max-priority”:  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费<br>   “x-queue-mode”: “lazy” 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中<br>   “x-queue-master-locator”</p>\n<h3 id=\"fanout代码实现\"><a href=\"#fanout代码实现\" class=\"headerlink\" title=\"fanout代码实现\"></a>fanout代码实现</h3><h4 id=\"在消费者项目中添加一个配置类\"><a href=\"#在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:35 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 声明一个队列，后面有很多属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"fanout_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类\"><a href=\"#在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:40 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue1\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"1fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue2\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"2fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller\"><a href=\"#在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fanout类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey</span></span><br><span class=\"line\"><span class=\"comment\">     * 只是routingKey可以任意指定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/fanout/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fanoutProducer</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg)</span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"fanout生产消息 msg:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"fanout_exchange\"</span>,<span class=\"string\">\"\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/fanout/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/fanout/测试消息</a> ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。</p>\n<h3 id=\"direct代码实现\"><a href=\"#direct代码实现\" class=\"headerlink\" title=\"direct代码实现\"></a>direct代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-1\"><a href=\"#在消费者项目中添加一个配置类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.direct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 1:40 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义两个队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue1\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue3\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义 exchange</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"direct_exchange\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列1 绑定 exchange 并且设置routingKey为direct.1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列2 绑定 exchange 并且设置routingKey为direct.2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue3()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-1\"><a href=\"#在消费者项目中添加一个消息监听类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-1\"><a href=\"#在生产者项目中添加一个消息发送controller-1\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * direct类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue1/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key1\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue2/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerTwo</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"mq-direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key2\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/direct/queue1/测试消息1\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/direct/queue1/测试消息1</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可</p>\n<h3 id=\"topic代码实现\"><a href=\"#topic代码实现\" class=\"headerlink\" title=\"topic代码实现\"></a>topic代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-2\"><a href=\"#在消费者项目中添加一个配置类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 8:42 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue1\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"topic_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class=\"string\">\"*.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class=\"string\">\"com.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-2\"><a href=\"#在消费者项目中添加一个消息监听类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-2\"><a href=\"#在生产者项目中添加一个消息发送controller-2\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * topic类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/topic/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">topicProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"topic:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"topic_exchange\"</span>, <span class=\"string\">\"com.jiafly.test\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-2\"><a href=\"#测试-2\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/topic/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/topic/测试消息</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示</p>\n<h2 id=\"延时队列\"><a href=\"#延时队列\" class=\"headerlink\" title=\"延时队列\"></a>延时队列</h2><h3 id=\"延时队列能做什么\"><a href=\"#延时队列能做什么\" class=\"headerlink\" title=\"延时队列能做什么\"></a>延时队列能做什么</h3><ul>\n<li>订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。</li>\n<li>短信通知：下单成功后 60s 之后给用户发送短信通知。</li>\n<li>失败重试：业务操作失败后，间隔一定的时间进行失败重试</li>\n</ul>\n<p>这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。</p>\n<p>在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。<br><img src=\"/image/rabbit/delay-mq.jpg\" alt=\"延时队列\"></p>\n<h3 id=\"死信交换器DLX-Dead-Letter-Exchange\"><a href=\"#死信交换器DLX-Dead-Letter-Exchange\" class=\"headerlink\" title=\"死信交换器DLX(Dead-Letter-Exchange)\"></a>死信交换器DLX(Dead-Letter-Exchange)</h3><p>DLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。</p>\n<p>Router: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.</p>\n<p>具体代码实现:</p>\n<h4 id=\"在消费者项目中添加一个配置类-3\"><a href=\"#在消费者项目中添加一个配置类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/2 12:44 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">delayExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">routerQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"router.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">routerBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(routerQueue()).to(delayExchange()).with(<span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">deadLetterQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; arguments = <span class=\"keyword\">new</span> HashMap(<span class=\"number\">16</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>, <span class=\"string\">\"delay_exchange\"</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>, <span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dead.letter.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">deadLetterBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(<span class=\"string\">\"dead.letter.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-3\"><a href=\"#在消费者项目中添加一个消息监听类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 6:13 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"router.queue\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delayConsumer</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay.queue1接收消息:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-3\"><a href=\"#在生产者项目中添加一个消息发送controller-3\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.support.converter.AbstractJavaTypeMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 7:17 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 延迟队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/delay/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delayProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"string\">\"dead.letter.routing.key\"</span>, msg, message -&gt; &#123;</span><br><span class=\"line\">            message.getMessageProperties().setExpiration(<span class=\"number\">30</span> * <span class=\"number\">1000</span> + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-3\"><a href=\"#测试-3\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/delay/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/delay/测试消息</a> ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。</p>\n<h2 id=\"消息的持久化\"><a href=\"#消息的持久化\" class=\"headerlink\" title=\"消息的持久化\"></a>消息的持久化</h2><p>为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。<br>创建时候的参数:</p>\n<ul>\n<li>durable<br>是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 </li>\n<li>execulusive<br>表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable </li>\n<li>autoDelete<br>当没有生成者/消费者使用此队列时，此队列会被自动删除。<br>(即当最后一个消费者退订后即被删除)</li>\n</ul>\n<p>设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。</p>\n<h2 id=\"消息的确认与拒绝\"><a href=\"#消息的确认与拒绝\" class=\"headerlink\" title=\"消息的确认与拒绝\"></a>消息的确认与拒绝</h2><p>消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：</p>\n<ul>\n<li><p>自动确认模式:<br>当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。</p>\n</li>\n<li><p>显式确认模式:<br>消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息</p>\n</li>\n</ul>\n<p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。<br>RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"消息中间件\"><a href=\"#消息中间件\" class=\"headerlink\" title=\"消息中间件\"></a>消息中间件</h1><h2 id=\"什么是消息中间\"><a href=\"#什么是消息中间\" class=\"headerlink\" title=\"什么是消息中间\"></a>什么是消息中间</h2><p>消息 (Message) 是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串、<br>JSON 等，也可以很复杂，比如内嵌对象。</p>\n<p>消息队列中间件 (Message Queue Middleware，简称为 MQ) 是指利用高效可靠的消息传递 机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传 递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</p>\n<p>消息队列中间件，也可以称为消息队列或者消息中间件。它一般有两种传递模式:点对点<br>(P2P, Point-to-Point) 模式和发布/订阅 (Pub/Sub) 模式。点对点模式是基于队列的，消息生产 者 发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。 发布订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题 (topic)，主 题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中 订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消 息的传递，发布/订阅模式在消息的一对多广播时采用 。</p>\n<p>目前开源的消息中间件有很多，比较主流的有 RabbitMQ、 Kafka、 ActiveMQ、 RocketMQ 等。</p>\n<h2 id=\"消息中间件的作用\"><a href=\"#消息中间件的作用\" class=\"headerlink\" title=\"消息中间件的作用\"></a>消息中间件的作用</h2><p>消息中间件凭借其独到的特性，在不同的应用场景下可以展现不同的作用 。总 的来说，消<br>息中间件的作用可以概括如下。</p>\n<h3 id=\"解耦\"><a href=\"#解耦\" class=\"headerlink\" title=\"解耦\"></a>解耦</h3><p>在项目启动之初来预测将来会碰到什么需求是极其困难的。消息中间件在处理过程 中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口，这允许你独 立地扩展或修改两边的处理过程，只要确保它 们遵守同样的接口约束即可。</p>\n<h3 id=\"冗余〈存储\"><a href=\"#冗余〈存储\" class=\"headerlink\" title=\"冗余〈存储)\"></a>冗余〈存储)</h3><p>有些情况下，处理数据的过程会失败。消息中间件可以把数据进行持久化直 到它们已经被完全处理，通过这一方式规避了数据丢失风险。在把一个消息从消息中间件中删除之前，需要你的处理系统明确地指出该消息己经被处理完成，从而确保你的数据被安全地保 存直到你使用完毕。</p>\n<h3 id=\"扩展性\"><a href=\"#扩展性\" class=\"headerlink\" title=\"扩展性\"></a>扩展性</h3><p>因为消息中间件解捐了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要另外增加处理过程即可，不需要改变代码，也不需要调节参数。</p>\n<h3 id=\"削峰\"><a href=\"#削峰\" class=\"headerlink\" title=\"削峰\"></a>削峰</h3><p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果以能处理这类峰值为标准而投入资源，无疑是巨大的浪费。使用消息中间件能够使关键组件支撑突发访问压力，不会因为突发的超负荷请求而完全崩惯。</p>\n<h3 id=\"可恢复性\"><a href=\"#可恢复性\" class=\"headerlink\" title=\"可恢复性\"></a>可恢复性</h3><p>当系统一部分组件失效时，不会影响到整个系统。消息中间件降低了进程间的稿合度，所以即使一个处理消息的进程挂掉，加入消息中间件中的消息仍然可以在系统恢复后 进行处理。</p>\n<h3 id=\"顺序保证\"><a href=\"#顺序保证\" class=\"headerlink\" title=\"顺序保证\"></a>顺序保证</h3><p>在大多数使用场景下，数据处理的顺序很重要，大部分消息中间件支持一定程度上的顺序性。</p>\n<h3 id=\"缓冲\"><a href=\"#缓冲\" class=\"headerlink\" title=\"缓冲\"></a>缓冲</h3><p>在任何重要的系统中，都会存在需要不同处理时间的元素。消息中间件通过一个缓冲层来帮助任务最高效率地执行，写入消息中间件的处理会尽可能快速。该缓冲层有助于控制 和优化数据流经过系统的速度。</p>\n<h3 id=\"异步通信\"><a href=\"#异步通信\" class=\"headerlink\" title=\"异步通信\"></a>异步通信</h3><p>在很多时候应用不想也不需要立即处理消息 。消息中间件提供了异步处理机制，允许应用把一些消息放入消息中间件中，但并不立即处理它，在之后需要的时候再慢慢处理。</p>\n<h1 id=\"RabbitMQ入门\"><a href=\"#RabbitMQ入门\" class=\"headerlink\" title=\"RabbitMQ入门\"></a>RabbitMQ入门</h1><h2 id=\"RabbitMQ介绍\"><a href=\"#RabbitMQ介绍\" class=\"headerlink\" title=\"RabbitMQ介绍\"></a>RabbitMQ介绍</h2><p>RabbitMQ 是采用 Erlang 语言实现 AMQP (Advanced Message Queuing Protocol，高级消息<br>队列协议)的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。并且支持多种客户端 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP等，支持AJAX。在易用性、扩展性、高可用性等方面表现不俗。</p>\n<p>RabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p>\n<p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n<h2 id=\"RabbitMQ安装\"><a href=\"#RabbitMQ安装\" class=\"headerlink\" title=\"RabbitMQ安装\"></a>RabbitMQ安装</h2><ul>\n<li><p>使用docker安装(3-management版本自带管理后台)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动rabbitMQ并且启动管理后台</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 15672:15672  -p  5672:5672  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=rabbitmqhostone  rabbitmq:3-management</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker start rabbitmq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看管理后台<br>在浏览器打开 <a href=\"http://localhost:15672/\" target=\"_blank\" rel=\"noopener\">http://localhost:15672/</a> 输入用户名:admin 密码:admin 可进入管理后台</p>\n</li>\n</ul>\n<h2 id=\"相关概念介绍\"><a href=\"#相关概念介绍\" class=\"headerlink\" title=\"相关概念介绍\"></a>相关概念介绍</h2><h3 id=\"生产者和消费者\"><a href=\"#生产者和消费者\" class=\"headerlink\" title=\"生产者和消费者\"></a>生产者和消费者</h3><ul>\n<li><p>Producer:生产者，就是投递消息的一方。<br>生产者创建消息，然后发布到 RabbitMQ 中。消息一般可以包含2个部分:消息体和标签(Label)。消息体也可以称之为payload，在实际应用中，消息体一般是一个带有业务逻辑结构的数据，比如一个JSON字符串。当然可以进一步对这个消息体进行序列化操作。消息的标签用来表述这条消息，比如一个交换器的名称和一个路由键。生产者把消息交由RabbitMQ，RabbitMQ 之后会根据标签把消息发送给感兴趣的消费者(Consumer)。</p>\n</li>\n<li><p>Consumer:消费者，就是接收消息的一方。<br>消费者连接到RabbitMQ服务器，并订阅到队列上。当消费者消费一条消息时，只是消费消息的消息体(payload).在消息路由的过程中，消息的标签会丢弃，存入到队列中的消息只有消息体，消费者也只会消费到消息体，也就不知道消息的生产者是谁，当然消费者也不需要知道。</p>\n</li>\n<li><p>Broker:消息中间件的服务节点。<br>对于RabbitMQ来说，一个RabbitMQBroker可以简单地看作一个RabbitMQ服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个RabbitMQ Broker看作一台RabbitMQ服务器。</p>\n</li>\n</ul>\n<p>RabbitMQ运转流程<br><img src=\"/image/rabbit/mq-yunzhuanliucheng.jpg\" alt=\"RabbitMQ运转流程\"></p>\n<h3 id=\"交换器Exchange，路由RoutingKey，绑定Binding\"><a href=\"#交换器Exchange，路由RoutingKey，绑定Binding\" class=\"headerlink\" title=\"交换器Exchange，路由RoutingKey，绑定Binding\"></a>交换器Exchange，路由RoutingKey，绑定Binding</h3><ul>\n<li><p>Exchange:交换器<br><img src=\"/image/rabbit/mq-exchange.jpg\" alt=\"交换器\"><br>MQ中我们暂时可以理解成生产者将消息投递到队列中，但是实际上这个在RabbitMQ中不会发生。真实情况是，生产者将消息发送到Exchange(交换器)，由交换器将消息路由到一个或者多个队列中。如果路由不到，或许会返回给生产者，或许直接丢弃。<br>RabbitMQ中的交换器有四种类型，下面会一一介绍，并且会使用代码详细说明。</p>\n</li>\n<li><p>RoutingKey:路由键<br>生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，而这个RoutingKey需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。在交换器类型和绑定键(BindingKey)固定的情况下，生产者可以在发送消息给交换器时，通过指定RoutingKey来决定消息流向哪里。</p>\n</li>\n<li><p>Binding:绑定<br>RabbitMQ中通过绑定将交换器与队列关联起来，在绑定的时候 一般会指定一个绑定键(BindingKey)，这样RabbitMQ就知道如何正确地将消息路由到队列了，如下图所示:<br><img src=\"/image/rabbit/mq-banding.jpg\" alt=\"绑定\"></p>\n</li>\n</ul>\n<h3 id=\"交换器类型\"><a href=\"#交换器类型\" class=\"headerlink\" title=\"交换器类型\"></a>交换器类型</h3><p>RabbitMQ 常用的交换器类型有fanout、direct、topic、headers这四种。AMQP协议里还提<br>到另外两种类型:System和自定义，这里就不详细介绍了。</p>\n<h4 id=\"fanout\"><a href=\"#fanout\" class=\"headerlink\" title=\"fanout\"></a>fanout</h4><p>就是我们熟悉的广播模式或者订阅模式，它会把所有发送到该ExChange的消息全部路由到所有与该交换器绑定的队列中。如下图：<br><img src=\"/image/rabbit/mq-fanout.jpg\" alt=\"fanout\"></p>\n<h4 id=\"direct-默认的交换器类型\"><a href=\"#direct-默认的交换器类型\" class=\"headerlink\" title=\"direct(默认的交换器类型)\"></a>direct(默认的交换器类型)</h4><p>direct类型的交换器路由规则也很简单，它会把消息路由到那些 BindingKey和 RoutingKey 完全匹配的队列中。如下图：<br><img src=\"/image/rabbit/mq-direct.jpg\" alt=\"direct\"></p>\n<h4 id=\"topic\"><a href=\"#topic\" class=\"headerlink\" title=\"topic\"></a>topic</h4><p>上面讲到direct类型的交换器路由规则是完全匹配BindingKey和RoutingKey，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与direct类型的交换器相似，也是将消息路由到BindingKey和RoutingKey相匹配的队列中，但这里的匹配规则有些不同，它约定:</p>\n<ul>\n<li>RoutingKey为一个点号”.”分隔的字符串(被点号”.”分隔开的每一段独立的字符串称为一个单词)，如”com.rabbitmq.client”，”java.util.concurrent”,”com.hidden.client”等</li>\n<li>BindingKey也是点号”.”分隔</li>\n<li>BindingKey中可以存在两种特殊字符串”星号”和”#”，用于做模糊匹配，其中”星号”用于匹配一个单词，”#”用于匹配多规格单词(可以是零个)。<br>如下图：<br><img src=\"/image/rabbit/mq-topic.jpg\" alt=\"topic\"><br>思考:<br>1.路由建 “com.rabbitmq.client”会路由到哪一个队列？<br>2.路由建 “com.hidden.client”会路由到哪一个队列？<br>3.路由建 “com.hidden.demo”会路由到哪一个队列？<br>4.路由建 “java.util.concurrent”会路由到哪一个队列？<br>5.路由建 “java.rabbitmq.demo”会路由到哪一个队列？</li>\n</ul>\n<h4 id=\"headers-不常用\"><a href=\"#headers-不常用\" class=\"headerlink\" title=\"headers(不常用)\"></a>headers(不常用)</h4><p>headers类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中<br>的headers属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的headers(也是一个键值对的形式)，对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。</p>\n<h2 id=\"交换器类型详解\"><a href=\"#交换器类型详解\" class=\"headerlink\" title=\"交换器类型详解\"></a>交换器类型详解</h2><p>###<br>新建rabbit-demo工程，在其中新建两个mudle 一个为rabbit-consumer 另一个为rabbit-producer<br>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1180</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>rabbit-producer/application.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=1181</span><br><span class=\"line\"># 端口 1181 消费者  1180 生产者</span><br><span class=\"line\"></span><br><span class=\"line\">spring.rabbitmq.host=127.0.0.1</span><br><span class=\"line\">spring.rabbitmq.username=admin</span><br><span class=\"line\">spring.rabbitmq.password=admin</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br></pre></td></tr></table></figure></p>\n<p>项目创建完成</p>\n<h3 id=\"声明一个队列各个参数的意义\"><a href=\"#声明一个队列各个参数的意义\" class=\"headerlink\" title=\"声明一个队列各个参数的意义\"></a>声明一个队列各个参数的意义</h3><p>name: 队列的名称 字符串<br>durable: 是否持久化, 队列的声明默认是存放到内存中的，如果rabbitmq重启会丢失，如果想重启之后还存在就要使队列持久化，保存到Erlang自带的Mnesia数据库中，当rabbitmq重启之后会读取该数据库<br>exclusive: 是否排外的，有两个作用，一：当连接关闭时connection.close()该队列是否会自动删除；二：该队列是否是私有的private，如果不是排外的，可以使用两个消费者都访问同一个队列，没有任何问题，如果是排外的，会对当前队列加锁，其他通道channel是不能访问的，如果强制访问会报异常，一般等于true的话用于一个队列只能有一个消费者来消费的场景。<br>autoDelete: 是否自动删除，当最后一个消费者断开连接之后队列是否自动被删除，可以通过RabbitMQ Management，查看某个队列的消费者数量，当consumers = 0时队列就会自动删除<br>arguments: 队列中的消息什么时候会自动被删除？ 是一个Map&lt;String, Object&gt;，他有如下参数<br>   “x-message-ttl”: 1000  设置队列中的所有消息的生存周期<br>   “x-expires”: 1000  当队列在指定的时间没有被访问就会被删除<br>   “x-max-length”: 10  限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉<br>   “x-max-length-bytes”:  限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小<br>   “x-dead-letter-exchange”: “” 当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉<br>   “x-dead-letter-routing-key”: “”  将删除的消息推送到指定交换机的指定路由键的队列中去<br>   “x-max-priority”:  优先级队列，声明队列时先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费<br>   “x-queue-mode”: “lazy” 先将消息保存到磁盘上，不放在内存中，当消费者开始消费的时候才加载到内存中<br>   “x-queue-master-locator”</p>\n<h3 id=\"fanout代码实现\"><a href=\"#fanout代码实现\" class=\"headerlink\" title=\"fanout代码实现\"></a>fanout代码实现</h3><h4 id=\"在消费者项目中添加一个配置类\"><a href=\"#在消费者项目中添加一个配置类\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:35 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 声明一个队列，后面有很多属性</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">fanoutQueue2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"fanout.queue2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> FanoutExchange <span class=\"title\">fanoutExchange</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FanoutExchange(<span class=\"string\">\"fanout_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">fanoutBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类\"><a href=\"#在消费者项目中添加一个消息监听类\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.fanout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/1 4:40 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue1\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer1</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"1fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"fanout.queue2\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fanoutConsumer2</span><span class=\"params\">(String msg)</span></span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"2fanoutConsumer 接收消息msg: &#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller\"><a href=\"#在生产者项目中添加一个消息发送controller\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FanoutProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * fanout类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * 虽然fanout类型下不需要routingKey 但是在调用convertAndSend方法时还是需要配置routingKey</span></span><br><span class=\"line\"><span class=\"comment\">     * 只是routingKey可以任意指定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/fanout/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fanoutProducer</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg)</span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"fanout生产消息 msg:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称，fanout模式写任何key都会被无视 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"fanout_exchange\"</span>,<span class=\"string\">\"\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/fanout/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/fanout/测试消息</a> ，就可在消费者项目控制台中看到绑定这个fanout模式交换器的队列接收到的消息在控制台打印出来了。</p>\n<h3 id=\"direct代码实现\"><a href=\"#direct代码实现\" class=\"headerlink\" title=\"direct代码实现\"></a>direct代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-1\"><a href=\"#在消费者项目中添加一个配置类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.direct;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 1:40 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义两个队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue1\"</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">directQueue3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;(<span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"direct.queue3\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义 exchange</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">directExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"direct_exchange\"</span>,<span class=\"keyword\">true</span>,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列1 绑定 exchange 并且设置routingKey为direct.1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 队列2 绑定 exchange 并且设置routingKey为direct.2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">directBinding3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue3()).to(directExchange()).with(<span class=\"string\">\"direct.routing.key1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-1\"><a href=\"#在消费者项目中添加一个消息监听类-1\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-1\"><a href=\"#在生产者项目中添加一个消息发送controller-1\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirectProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * direct类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue1/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key1\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/direct/queue2/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">directProducerTwo</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"生产者生产消息:\"</span> + msg);</span><br><span class=\"line\">        <span class=\"comment\">// 第一个参数是交换器名称 第二个参数是routingKey名称 第三个是要发送的消息</span></span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"mq-direct_exchange\"</span>, <span class=\"string\">\"direct.routing.key2\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/direct/queue1/测试消息1\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/direct/queue1/测试消息1</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey设置为一样即可</p>\n<h3 id=\"topic代码实现\"><a href=\"#topic代码实现\" class=\"headerlink\" title=\"topic代码实现\"></a>topic代码实现</h3><h4 id=\"在消费者项目中添加一个配置类-2\"><a href=\"#在消费者项目中添加一个配置类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/29 8:42 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue1\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">topicQueue2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"topic.queue2\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建交换器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TopicExchange <span class=\"title\">topicExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TopicExchange(<span class=\"string\">\"topic_exchange\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 绑定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(<span class=\"string\">\"*.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">topicBinding2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class=\"string\">\"com.jiafly.*\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-2\"><a href=\"#在消费者项目中添加一个消息监听类-2\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">和fanout相同，只是监听的队列不同而已</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-2\"><a href=\"#在生产者项目中添加一个消息发送controller-2\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/11/28 11:50 AM</span></span><br><span class=\"line\"><span class=\"comment\"> * 生产者</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * topic类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/topic/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">topicProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"topic:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"topic_exchange\"</span>, <span class=\"string\">\"com.jiafly.test\"</span>, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-2\"><a href=\"#测试-2\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/topic/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/topic/测试消息</a> ，就可在消费者项目中看到打印的信息。<br>如果需要两个队列接受相同的信息，只需要将两个队列绑定的routingKey使用*或者#表示</p>\n<h2 id=\"延时队列\"><a href=\"#延时队列\" class=\"headerlink\" title=\"延时队列\"></a>延时队列</h2><h3 id=\"延时队列能做什么\"><a href=\"#延时队列能做什么\" class=\"headerlink\" title=\"延时队列能做什么\"></a>延时队列能做什么</h3><ul>\n<li>订单业务：在电商/点餐中，都有下单后 30 分钟内没有付款，就自动取消订单。</li>\n<li>短信通知：下单成功后 60s 之后给用户发送短信通知。</li>\n<li>失败重试：业务操作失败后，间隔一定的时间进行失败重试</li>\n</ul>\n<p>这类业务的特点就是：非实时的，需要延迟处理，需要进行失败重试。一种比较笨的方式是采用定时任务，轮训数据库，方法简单好用，但性能底下，在高并发情况下容易弄死数据库，间隔时间不好设置，时间过大，影响精度，过小影响性能，而且做不到按超时的时间顺序处理。另一种就是用Java中的DelayQueue 位于java.util.concurrent包下，本质是由PriorityQueue和BlockingQueue实现的阻塞优先级队列。，这玩意最大的问题就是不支持分布式与持久化。</p>\n<p>在 AMQP 协议中，或者 RabbitMQ 本身没有直接支持延迟队列的功能，但是可以通过前面 所介绍的 DLX 和 TTL 模拟出延迟队列的功能。所以在介绍延时队列之前，首先介绍下DLX(Dead-Letter-Exchange)和TTL(Time to Live)。<br><img src=\"/image/rabbit/delay-mq.jpg\" alt=\"延时队列\"></p>\n<h3 id=\"死信交换器DLX-Dead-Letter-Exchange\"><a href=\"#死信交换器DLX-Dead-Letter-Exchange\" class=\"headerlink\" title=\"死信交换器DLX(Dead-Letter-Exchange)\"></a>死信交换器DLX(Dead-Letter-Exchange)</h3><p>DLX：死信队列，用来存储有超时时间信息的消息， 并且可以设置当消息超时时，转发到另一个指定队列(此处设置转发到router), 无消费者，当接收到客户端消息之后，等待消息超时，将消息转发到指定的Router队列。</p>\n<p>Router: 转发队列，用来接收死信队列超时消息， 如上示例消息，在接收到之后，消费者将消息解析，获取queueName，body,再向所获取的queueName队列发送一条消息，内容为body.</p>\n<p>具体代码实现:</p>\n<h4 id=\"在消费者项目中添加一个配置类-3\"><a href=\"#在消费者项目中添加一个配置类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个配置类\"></a>在消费者项目中添加一个配置类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Binding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/2 12:44 AM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 定义一个交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DirectExchange <span class=\"title\">delayExchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DirectExchange(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">routerQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"router.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转发队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">routerBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(routerQueue()).to(delayExchange()).with(<span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Queue <span class=\"title\">deadLetterQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;String, Object&gt; arguments = <span class=\"keyword\">new</span> HashMap(<span class=\"number\">16</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-exchange\"</span>, <span class=\"string\">\"delay_exchange\"</span>);</span><br><span class=\"line\">        arguments.put(<span class=\"string\">\"x-dead-letter-routing-key\"</span>, <span class=\"string\">\"router.routing.key\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Queue(<span class=\"string\">\"dead.letter.queue\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>, arguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 死信队列绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Binding <span class=\"title\">deadLetterBinding</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(deadLetterQueue()).to(delayExchange()).with(<span class=\"string\">\"dead.letter.routing.key\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在消费者项目中添加一个消息监听类-3\"><a href=\"#在消费者项目中添加一个消息监听类-3\" class=\"headerlink\" title=\"在消费者项目中添加一个消息监听类\"></a>在消费者项目中添加一个消息监听类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.consumer.delay;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 6:13 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayConsumer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"router.queue\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delayConsumer</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay.queue1接收消息:&#123;&#125;\"</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在生产者项目中添加一个消息发送controller-3\"><a href=\"#在生产者项目中添加一个消息发送controller-3\" class=\"headerlink\" title=\"在生产者项目中添加一个消息发送controller\"></a>在生产者项目中添加一个消息发送controller</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.jiafly.rabbit.producer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.support.converter.AbstractJavaTypeMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> liuyi</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2018/12/3 7:17 PM</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>()</span><br><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DelayProducer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 延迟队列</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/delay/&#123;msg&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delayProducerOne</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"msg\"</span>)</span> String msg) </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">\"delay:生产消息:\"</span> + msg);</span><br><span class=\"line\">        template.convertAndSend(<span class=\"string\">\"delay_exchange\"</span>, <span class=\"string\">\"dead.letter.routing.key\"</span>, msg, message -&gt; &#123;</span><br><span class=\"line\">            message.getMessageProperties().setExpiration(<span class=\"number\">30</span> * <span class=\"number\">1000</span> + <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试-3\"><a href=\"#测试-3\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>分别启动两个项目，在浏览器的路径上输入 <a href=\"http://localhost:1180/delay/测试消息\" target=\"_blank\" rel=\"noopener\">http://localhost:1180/delay/测试消息</a> ，就可在消费者项目中看到打印的信息。 30秒后可以看到消费者管理后台有刚刚发送的消息被打印出来了。</p>\n<h2 id=\"消息的持久化\"><a href=\"#消息的持久化\" class=\"headerlink\" title=\"消息的持久化\"></a>消息的持久化</h2><p>为了保证RabbitMQ在重启、奔溃等异常情况下数据没有丢失，除了对消息本身持久化为，还需要将消息传输经过的队列(queue)，交互机进行持久化(exchange)，持久化以上元素后，消息才算真正RabbitMQ重启不会丢失。<br>创建时候的参数:</p>\n<ul>\n<li>durable<br>是否持久化，如果true，则此种队列叫持久化队列（Durable queues）。此队列会被存储在磁盘上，当消息代理（broker）重启的时候，它依旧存在。没有被持久化的队列称作暂存队列（Transient queues）。 </li>\n<li>execulusive<br>表示此对应只能被当前创建的连接使用，而且当连接关闭后队列即被删除。此参考优先级高于durable </li>\n<li>autoDelete<br>当没有生成者/消费者使用此队列时，此队列会被自动删除。<br>(即当最后一个消费者退订后即被删除)</li>\n</ul>\n<p>设置消息持久化必须先设置队列持久化，要不然队列不持久化，消息持久化，队列都不存在了，消息存在还有什么意义。消息持久化需要将交换机持久化、队列持久化、消息持久化，才能最终达到持久化的目的。其实在前面就已经使用持久化了。我们在管理后台去看一下。</p>\n<h2 id=\"消息的确认与拒绝\"><a href=\"#消息的确认与拒绝\" class=\"headerlink\" title=\"消息的确认与拒绝\"></a>消息的确认与拒绝</h2><p>消费者在处理消息的时候偶尔会失败或者有时会直接崩溃掉。而且网络原因也有可能引起各种问题，对于此AMQP有两种处理方式：</p>\n<ul>\n<li><p>自动确认模式:<br>当RabbbitMQ将消息发送给应用后，消费者端自动回送一个确认消息，此时RabbitMQ删除此消息。</p>\n</li>\n<li><p>显式确认模式:<br>消费者收到消息后，可以在执行一些逻辑后，消费者自己决定什么时候发送确认回执（acknowledgement），RabbitMQ收到回执后才删除消息，这样就保证消费端不会丢失消息</p>\n</li>\n</ul>\n<p>如果一个消费者在尚未发送确认回执的情况下挂掉了，那么消息会被重新放入队列，并且在还有其他消费者存在于此队列的前提下，立即投递给另外一个消费者。如果当时没有可用的消费者了，消息代理会死等下一个注册到此队列的消费者，然后再次尝试投递。<br>RabbitMQ里的消息是不会过期。当消费者挂掉后，RabbitMQ会不断尝试重推。所有单个消息的推送可能花费很长的时间.</p>\n"},{"title":"读书","layout":"reading","_content":"","source":"reading/index.md","raw":"title: 读书\nlayout: reading\n---\n","date":"2019-04-02T10:26:32.767Z","updated":"2019-04-02T10:26:32.767Z","path":"reading/index.html","comments":1,"_id":"cjtznfuy700007dus6rip3zct","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Docker-01-Docker介绍","date":"2018-03-05T17:45:16.000Z","_content":"## 1. Docker介绍\n### 1.1 什么是Docker？\nDocker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为##容器##。\n\nDocker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。\n\n传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。\n\n### 1.2 为什么要使用docker？\n作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。\n\n- **更高效的利用系统资源**\n由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。\n\n- **更快速的启动时间**\n传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。\n\n- **一致的运行环境**\n开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。\n\n- **持续交付和部署**\n使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。\n\n- **更轻松的迁移**\n由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。\n\n- **更轻松的维护和扩展**\nDocker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。\n\n- **对比传统虚拟机总结**\n| 特性 | 容器 | 虚拟机 |\n| :--: | :--: | :--: |\n| **启动** | 秒级 | 分钟级 |\n| **硬盘使用** | 一般为MB | 一般为GB |\n| **性能** | 接近原生 | 弱于|\n| **系统支持量** | 单机支持上千个容器 | 一般几十个 |\n\n## 2. Docker的几个基本概念\n### 2.1 Docker镜像(image)\n我们都知道，**操作系统分为内核和用户空间**。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。\n\n因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为**分层存储的架构**。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n\n**分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。**\n\n\n### 2.2 Docker容器(container)\n镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n**容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的*命名空间***。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。\n\n每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n\n容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。\n\n数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。\n\n### 2.3 Docker仓库(registry)\n镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。\n\n下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。\n#### 2.3.1 公有仓库\n最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。\n\n由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。\n\n#### 2.3.2 私有仓库\n用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。","source":"_posts/docker/Docker-01-docker介绍.md","raw":"\n---\ntitle: Docker-01-Docker介绍\ndate: 2018-03-06 01:45:16\ntags: [Docker]\ncategories: [Docker]\n---\n## 1. Docker介绍\n### 1.1 什么是Docker？\nDocker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为##容器##。\n\nDocker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。\n\n传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。\n\n### 1.2 为什么要使用docker？\n作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。\n\n- **更高效的利用系统资源**\n由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。\n\n- **更快速的启动时间**\n传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。\n\n- **一致的运行环境**\n开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。\n\n- **持续交付和部署**\n使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。\n\n- **更轻松的迁移**\n由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。\n\n- **更轻松的维护和扩展**\nDocker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。\n\n- **对比传统虚拟机总结**\n| 特性 | 容器 | 虚拟机 |\n| :--: | :--: | :--: |\n| **启动** | 秒级 | 分钟级 |\n| **硬盘使用** | 一般为MB | 一般为GB |\n| **性能** | 接近原生 | 弱于|\n| **系统支持量** | 单机支持上千个容器 | 一般几十个 |\n\n## 2. Docker的几个基本概念\n### 2.1 Docker镜像(image)\n我们都知道，**操作系统分为内核和用户空间**。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。\n\n因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为**分层存储的架构**。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。\n\n镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。\n\n**分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。**\n\n\n### 2.2 Docker容器(container)\n镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\n\n**容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的*命名空间***。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。\n\n每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。\n\n容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。\n\n数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。\n\n### 2.3 Docker仓库(registry)\n镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。\n\n下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。\n#### 2.3.1 公有仓库\n最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。\n\n由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。\n\n#### 2.3.2 私有仓库\n用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。","slug":"docker/Docker-01-docker介绍","published":1,"updated":"2019-03-25T09:45:00.276Z","_id":"cjtmxtdkk0006zns6g53rbhm3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-Docker介绍\"><a href=\"#1-Docker介绍\" class=\"headerlink\" title=\"1. Docker介绍\"></a>1. Docker介绍</h2><h3 id=\"1-1-什么是Docker？\"><a href=\"#1-1-什么是Docker？\" class=\"headerlink\" title=\"1.1 什么是Docker？\"></a>1.1 什么是Docker？</h3><p>Docker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为##容器##。</p>\n<p>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。</p>\n<p>传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p>\n<h3 id=\"1-2-为什么要使用docker？\"><a href=\"#1-2-为什么要使用docker？\" class=\"headerlink\" title=\"1.2 为什么要使用docker？\"></a>1.2 为什么要使用docker？</h3><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>\n<ul>\n<li><p><strong>更高效的利用系统资源</strong><br>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\n</li>\n<li><p><strong>更快速的启动时间</strong><br>传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。</p>\n</li>\n<li><p><strong>一致的运行环境</strong><br>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。</p>\n</li>\n<li><p><strong>持续交付和部署</strong><br>使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。</p>\n</li>\n<li><p><strong>更轻松的迁移</strong><br>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n</li>\n<li><p><strong>更轻松的维护和扩展</strong><br>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n</li>\n<li><p><strong>对比传统虚拟机总结</strong><br>| 特性 | 容器 | 虚拟机 |<br>| :–: | :–: | :–: |<br>| <strong>启动</strong> | 秒级 | 分钟级 |<br>| <strong>硬盘使用</strong> | 一般为MB | 一般为GB |<br>| <strong>性能</strong> | 接近原生 | 弱于|<br>| <strong>系统支持量</strong> | 单机支持上千个容器 | 一般几十个 |</p>\n</li>\n</ul>\n<h2 id=\"2-Docker的几个基本概念\"><a href=\"#2-Docker的几个基本概念\" class=\"headerlink\" title=\"2. Docker的几个基本概念\"></a>2. Docker的几个基本概念</h2><h3 id=\"2-1-Docker镜像-image\"><a href=\"#2-1-Docker镜像-image\" class=\"headerlink\" title=\"2.1 Docker镜像(image)\"></a>2.1 Docker镜像(image)</h3><p>我们都知道，<strong>操作系统分为内核和用户空间</strong>。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。</p>\n<p>因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为<strong>分层存储的架构</strong>。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p><strong>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</strong></p>\n<h3 id=\"2-2-Docker容器-container\"><a href=\"#2-2-Docker容器-container\" class=\"headerlink\" title=\"2.2 Docker容器(container)\"></a>2.2 Docker容器(container)</h3><p>镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p><strong>容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的<em>命名空间</em></strong>。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。</p>\n<p>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。</p>\n<h3 id=\"2-3-Docker仓库-registry\"><a href=\"#2-3-Docker仓库-registry\" class=\"headerlink\" title=\"2.3 Docker仓库(registry)\"></a>2.3 Docker仓库(registry)</h3><p>镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</p>\n<p>下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。</p>\n<h4 id=\"2-3-1-公有仓库\"><a href=\"#2-3-1-公有仓库\" class=\"headerlink\" title=\"2.3.1 公有仓库\"></a>2.3.1 公有仓库</h4><p>最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。</p>\n<p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。</p>\n<h4 id=\"2-3-2-私有仓库\"><a href=\"#2-3-2-私有仓库\" class=\"headerlink\" title=\"2.3.2 私有仓库\"></a>2.3.2 私有仓库</h4><p>用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Docker介绍\"><a href=\"#1-Docker介绍\" class=\"headerlink\" title=\"1. Docker介绍\"></a>1. Docker介绍</h2><h3 id=\"1-1-什么是Docker？\"><a href=\"#1-1-什么是Docker？\" class=\"headerlink\" title=\"1.1 什么是Docker？\"></a>1.1 什么是Docker？</h3><p>Docker使用Google公司推出的Go语言进行开发实现，基于Linux内核的cgroup，namespace，以及 AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为##容器##。</p>\n<p>Docker在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker技术比虚拟机技术更为轻便、快捷。</p>\n<p>传统虚拟机技术是虚拟 出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p>\n<h3 id=\"1-2-为什么要使用docker？\"><a href=\"#1-2-为什么要使用docker？\" class=\"headerlink\" title=\"1.2 为什么要使用docker？\"></a>1.2 为什么要使用docker？</h3><p>作为一种新兴的虚拟化方式，Docker 跟传统的虚拟化方式相比具有众多的优势。</p>\n<ul>\n<li><p><strong>更高效的利用系统资源</strong><br>由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>\n</li>\n<li><p><strong>更快速的启动时间</strong><br>传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启 动时间。大大的节约了开发、测试、部署的时间。</p>\n</li>\n<li><p><strong>一致的运行环境</strong><br>开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 bug并未在开发过程中被发现。而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码 在我机器上没问题啊” 这类问题。</p>\n</li>\n<li><p><strong>持续交付和部署</strong><br>使用Docker可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过Dockerfile来进行镜像构建，并结合持续集成(Continuous Integration)系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署(Continuous Delivery/Deployment)系统进行自动部署。</p>\n</li>\n<li><p><strong>更轻松的迁移</strong><br>由于 Docker 确保了执行环境的一致性，使得应用的迁移更加容易。Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>\n</li>\n<li><p><strong>更轻松的维护和扩展</strong><br>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>\n</li>\n<li><p><strong>对比传统虚拟机总结</strong><br>| 特性 | 容器 | 虚拟机 |<br>| :–: | :–: | :–: |<br>| <strong>启动</strong> | 秒级 | 分钟级 |<br>| <strong>硬盘使用</strong> | 一般为MB | 一般为GB |<br>| <strong>性能</strong> | 接近原生 | 弱于|<br>| <strong>系统支持量</strong> | 单机支持上千个容器 | 一般几十个 |</p>\n</li>\n</ul>\n<h2 id=\"2-Docker的几个基本概念\"><a href=\"#2-Docker的几个基本概念\" class=\"headerlink\" title=\"2. Docker的几个基本概念\"></a>2. Docker的几个基本概念</h2><h3 id=\"2-1-Docker镜像-image\"><a href=\"#2-1-Docker镜像-image\" class=\"headerlink\" title=\"2.1 Docker镜像(image)\"></a>2.1 Docker镜像(image)</h3><p>我们都知道，<strong>操作系统分为内核和用户空间</strong>。对于Linux而言，内核启动后，会挂载文件系统为其提供用户空间支持。而Docker镜像(Image)，就相当于是一个文件系统。比如官方镜像ubuntu:14.04就包含了完整的一套Ubuntu14.04最小系统的root文件系统。</p>\n<p>因为镜像包含操作系统完整的root文件系统，其体积往往是庞大的，因此在Docker设计时，就充分利用UnionFS的技术，将其设计为<strong>分层存储的架构</strong>。所以严格来说，镜像并非是像一个ISO那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说是由多层文件系统联合组成。</p>\n<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>\n<p><strong>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</strong></p>\n<h3 id=\"2-2-Docker容器-container\"><a href=\"#2-2-Docker容器-container\" class=\"headerlink\" title=\"2.2 Docker容器(container)\"></a>2.2 Docker容器(container)</h3><p>镜像(image)和容器(container)的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n<p><strong>容器的实质是进程，但是与直接在宿主机上执行的进程不同，容器进程运行于属于自己的独立的<em>命名空间</em></strong>。因此容器可以拥有自己的root文件系统、自己的网络配置、自己的进程空间，甚至自己的用户ID空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。</p>\n<p>每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p>\n<p>容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(Volume)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>\n<p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新run，数据却不会丢失。</p>\n<h3 id=\"2-3-Docker仓库-registry\"><a href=\"#2-3-Docker仓库-registry\" class=\"headerlink\" title=\"2.3 Docker仓库(registry)\"></a>2.3 Docker仓库(registry)</h3><p>镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</p>\n<p>下面以Ubuntu镜像为例，ubuntu是仓库的名字，其内包含有不同的版本标签，如:14.04,16.04。 我们可以通过ubuntu:14.04或者ubuntu:16.04来具体指定所需哪个版本的镜像。如果忽略了标签，那将视为ubuntu:latest。</p>\n<h4 id=\"2-3-1-公有仓库\"><a href=\"#2-3-1-公有仓库\" class=\"headerlink\" title=\"2.3.1 公有仓库\"></a>2.3.1 公有仓库</h4><p>最常使用的公有仓库是DockerHub，这也是默认的仓库，拥有大量的官方镜像。还有还有CoreOS的Quay.io，Google的Google Container Registry，Kubernetes 的镜像使用的就是Google的服务。</p>\n<p>由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对Docker Hub的镜像服务(Registry Mirror)，这些镜像服务被称为加速器。常见的有:阿里云加速器、DaoCloud加速器、灵雀云加速器等。</p>\n<h4 id=\"2-3-2-私有仓库\"><a href=\"#2-3-2-私有仓库\" class=\"headerlink\" title=\"2.3.2 私有仓库\"></a>2.3.2 私有仓库</h4><p>用户还可以在本地搭建私有Docker Registry。Docker官方提供了Docker Registry镜像，可以直接使用做为私有Registry服务。</p>\n"},{"title":"五分钟弄懂UML-类图","date":"2018-03-31T17:23:16.000Z","_content":"# 1. UML介绍\n平时阅读一些远吗分析类文章或是设计应用架构时没少与UML类图打交道。实际上，UML类图中最常用到的元素五分钟就能掌握，下面赶紧来一起认识一下它吧：\n\n","source":"_posts/uml/UML-类图.md","raw":"\n---\ntitle: 五分钟弄懂UML-类图\ndate: 2018-04-01 01:23:16\ntags: [UML]\ncategories: [UML]\n---\n# 1. UML介绍\n平时阅读一些远吗分析类文章或是设计应用架构时没少与UML类图打交道。实际上，UML类图中最常用到的元素五分钟就能掌握，下面赶紧来一起认识一下它吧：\n\n","slug":"uml/UML-类图","published":1,"updated":"2019-03-22T16:09:33.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtmxtdkp0007zns66ytoyuy7","content":"<h1 id=\"1-UML介绍\"><a href=\"#1-UML介绍\" class=\"headerlink\" title=\"1. UML介绍\"></a>1. UML介绍</h1><p>平时阅读一些远吗分析类文章或是设计应用架构时没少与UML类图打交道。实际上，UML类图中最常用到的元素五分钟就能掌握，下面赶紧来一起认识一下它吧：</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-UML介绍\"><a href=\"#1-UML介绍\" class=\"headerlink\" title=\"1. UML介绍\"></a>1. UML介绍</h1><p>平时阅读一些远吗分析类文章或是设计应用架构时没少与UML类图打交道。实际上，UML类图中最常用到的元素五分钟就能掌握，下面赶紧来一起认识一下它吧：</p>\n"},{"title":"Docker-02-创建mysql容器","date":"2019-03-10T09:45:22.000Z","_content":"\n我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。\n个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。\n## 准备工作\n### 安装Docker\n无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。\n### 拉取mysql的镜像(这里使用mysql5.7)\n```bash\n$ docker pull mysql:5.7\n```\n\n## 启动mysql\n当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看\n```bash\n$ docker images \n```\n这个命令就列出了当前主机上已经下载的所有镜像。\n### 在宿主机上创建数据存储文件夹\n个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。\n例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录\n```bash\n$ mkdir /data/docker/mysql/mysql001\n```\n### 创建容器\n```bash\n$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7 \n\n```\n这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。\n- docker run \n这是启动一个容器\n- --name mysql001 \n启动的容器名称为mysql001，这个名称在后面操作可直接使用名称\n- -p 3306:3306\n映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口\n- -e MYSQL_ROOT_PASSWORD=root\n设置mysql的登录密码为root\n- -v /etc/localtime:/etc/localtime\n这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时\n- -v /data/docker/mysql/mysql001:/var/lib/mysql\n这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里\n- -d mysql:5.7\n-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样\n\n### 启动容器\n执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器\n```bash\n$ docker start mysql001\n```\n或者将name修改为image_id，image_id可以通过 docker images命令去查看。\n\n## 访问mysql数据库\n- 方式一\n```bash\n$ mysql-cli -h 127.0.0.1 -u root -p root\n```\n- 方式二\n使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。\n\n### 删除容器\n删除容器必须要保证容器是stop的可以通过下面的命令查看\n- 查看正在运行的容器\n```bash\n$ docker ps \n```\n- 查看所有运行过的容器包括正在运行的容器\n```bash\n$ docker ps -a\n```\n根据上面的命令可以查找到容器id，执行命令删除容器\n```bash\n$ docker rm 容器id\n```\n\n\n","source":"_posts/docker/Docker-02-创建mysql容器.md","raw":"---\ntitle: Docker-02-创建mysql容器\ndate: 2019-03-10 17:45:22\ntags: [Docker,mysql]\ncategories: [Docker,mysql]\n---\n\n我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。\n个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。\n## 准备工作\n### 安装Docker\n无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。\n### 拉取mysql的镜像(这里使用mysql5.7)\n```bash\n$ docker pull mysql:5.7\n```\n\n## 启动mysql\n当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看\n```bash\n$ docker images \n```\n这个命令就列出了当前主机上已经下载的所有镜像。\n### 在宿主机上创建数据存储文件夹\n个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。\n例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录\n```bash\n$ mkdir /data/docker/mysql/mysql001\n```\n### 创建容器\n```bash\n$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7 \n\n```\n这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。\n- docker run \n这是启动一个容器\n- --name mysql001 \n启动的容器名称为mysql001，这个名称在后面操作可直接使用名称\n- -p 3306:3306\n映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口\n- -e MYSQL_ROOT_PASSWORD=root\n设置mysql的登录密码为root\n- -v /etc/localtime:/etc/localtime\n这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时\n- -v /data/docker/mysql/mysql001:/var/lib/mysql\n这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里\n- -d mysql:5.7\n-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样\n\n### 启动容器\n执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器\n```bash\n$ docker start mysql001\n```\n或者将name修改为image_id，image_id可以通过 docker images命令去查看。\n\n## 访问mysql数据库\n- 方式一\n```bash\n$ mysql-cli -h 127.0.0.1 -u root -p root\n```\n- 方式二\n使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。\n\n### 删除容器\n删除容器必须要保证容器是stop的可以通过下面的命令查看\n- 查看正在运行的容器\n```bash\n$ docker ps \n```\n- 查看所有运行过的容器包括正在运行的容器\n```bash\n$ docker ps -a\n```\n根据上面的命令可以查找到容器id，执行命令删除容器\n```bash\n$ docker rm 容器id\n```\n\n\n","slug":"docker/Docker-02-创建mysql容器","published":1,"updated":"2019-03-24T13:20:03.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjto60t210000cgus3ofs388z","content":"<p>我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。<br>个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><p>无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。</p>\n<h3 id=\"拉取mysql的镜像-这里使用mysql5-7\"><a href=\"#拉取mysql的镜像-这里使用mysql5-7\" class=\"headerlink\" title=\"拉取mysql的镜像(这里使用mysql5.7)\"></a>拉取mysql的镜像(这里使用mysql5.7)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动mysql\"><a href=\"#启动mysql\" class=\"headerlink\" title=\"启动mysql\"></a>启动mysql</h2><p>当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure></p>\n<p>这个命令就列出了当前主机上已经下载的所有镜像。</p>\n<h3 id=\"在宿主机上创建数据存储文件夹\"><a href=\"#在宿主机上创建数据存储文件夹\" class=\"headerlink\" title=\"在宿主机上创建数据存储文件夹\"></a>在宿主机上创建数据存储文件夹</h3><p>个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。<br>例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /data/docker/mysql/mysql001</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7</span><br></pre></td></tr></table></figure>\n<p>这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。</p>\n<ul>\n<li>docker run<br>这是启动一个容器</li>\n<li>–name mysql001<br>启动的容器名称为mysql001，这个名称在后面操作可直接使用名称</li>\n<li>-p 3306:3306<br>映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口</li>\n<li>-e MYSQL_ROOT_PASSWORD=root<br>设置mysql的登录密码为root</li>\n<li>-v /etc/localtime:/etc/localtime<br>这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时</li>\n<li>-v /data/docker/mysql/mysql001:/var/lib/mysql<br>这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里</li>\n<li>-d mysql:5.7<br>-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样</li>\n</ul>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><p>执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start mysql001</span><br></pre></td></tr></table></figure></p>\n<p>或者将name修改为image_id，image_id可以通过 docker images命令去查看。</p>\n<h2 id=\"访问mysql数据库\"><a href=\"#访问mysql数据库\" class=\"headerlink\" title=\"访问mysql数据库\"></a>访问mysql数据库</h2><ul>\n<li><p>方式一</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql-cli -h 127.0.0.1 -u root -p root</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式二<br>使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。</p>\n</li>\n</ul>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>删除容器必须要保证容器是stop的可以通过下面的命令查看</p>\n<ul>\n<li><p>查看正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有运行过的容器包括正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>根据上面的命令可以查找到容器id，执行命令删除容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm 容器id</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们在工作中会有需要在本机安装mysql，但是独立去安装mysql会耗费很大的内存以及磁盘空间，如果是在自己的电脑上时间久了可能会使电脑越来越卡。但是如果我们在电脑上安装了docker那就不一样了，或者我们购买了云主机，我们可以在主机上自己安装mysql，但是普通的按住步骤太繁琐，而且一般只能启用一个mysql，这时候Docker就站出来啦。<br>个人比较推荐使用docker，因为真的是太好用了，好用到爱不释手。嘻嘻~。我们不仅可以使用docker还可以安装很多实用的工具，你可以到dockerHub上去查找你需要的镜像。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><p>无论你是Windows还是Mac还是Linux，现在网上都有很多安装教程，你可以根据步骤进行安装，这里我们就当Docker已经安装完啦。</p>\n<h3 id=\"拉取mysql的镜像-这里使用mysql5-7\"><a href=\"#拉取mysql的镜像-这里使用mysql5-7\" class=\"headerlink\" title=\"拉取mysql的镜像(这里使用mysql5.7)\"></a>拉取mysql的镜像(这里使用mysql5.7)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动mysql\"><a href=\"#启动mysql\" class=\"headerlink\" title=\"启动mysql\"></a>启动mysql</h2><p>当我们从镜像仓库拉完mysql以后，本地或者服务器上就已经有了mysql的镜像，我们可以通过命令去查看<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker images</span><br></pre></td></tr></table></figure></p>\n<p>这个命令就列出了当前主机上已经下载的所有镜像。</p>\n<h3 id=\"在宿主机上创建数据存储文件夹\"><a href=\"#在宿主机上创建数据存储文件夹\" class=\"headerlink\" title=\"在宿主机上创建数据存储文件夹\"></a>在宿主机上创建数据存储文件夹</h3><p>个人比较推荐使用docker安装镜像之后对于数据要有规律的去保存，这样也方便以后删除镜像的时候能够轻易的找到数据一起删除。所有在这里我所有使用docker安装的镜像都会在/data/docker目录下，docker目录中暗中镜像再进行分类。<br>例如：这里我要使用docker启动一个mysql的容器 容器名称为mysql001，这样我就创建如下目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /data/docker/mysql/mysql001</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --name mysql001 -p 3306:3306  -e MYSQL_ROOT_PASSWORD=root -v /etc/localtime:/etc/localtime  -v /data/docker/mysql/mysql001:/var/lib/mysql -d mysql:5.7</span><br></pre></td></tr></table></figure>\n<p>这里我们对上面的命令进行拆解，清楚的了解每一步都是在做什么操作。</p>\n<ul>\n<li>docker run<br>这是启动一个容器</li>\n<li>–name mysql001<br>启动的容器名称为mysql001，这个名称在后面操作可直接使用名称</li>\n<li>-p 3306:3306<br>映射端口，前面一个端口是宿主机的端口，后面一个端口是mysql的端口，我们访问数据库是通过访问宿主机去访问，所以使用的是前面一个端口</li>\n<li>-e MYSQL_ROOT_PASSWORD=root<br>设置mysql的登录密码为root</li>\n<li>-v /etc/localtime:/etc/localtime<br>这个是这是启动容器的时区和宿主机一致，这个设置比较有用，不然会出现数据库中的时间比当前时间晚8小时</li>\n<li>-v /data/docker/mysql/mysql001:/var/lib/mysql<br>这个就是用刚刚创建的目录去存储mysql的数据了，我们在mysql中的所有数据都会存储在宿主器前面的目录里</li>\n<li>-d mysql:5.7<br>-d是开启Daemon模式即保护进程的方式运行。最后的这个是知道启动容器的版本 如果没有的话默认就是latest 和前面pull镜像时一样</li>\n</ul>\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><p>执行完上面的命令后容器并没有启动，我们可以通过执行以下命令去启动容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker start mysql001</span><br></pre></td></tr></table></figure></p>\n<p>或者将name修改为image_id，image_id可以通过 docker images命令去查看。</p>\n<h2 id=\"访问mysql数据库\"><a href=\"#访问mysql数据库\" class=\"headerlink\" title=\"访问mysql数据库\"></a>访问mysql数据库</h2><ul>\n<li><p>方式一</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql-cli -h 127.0.0.1 -u root -p root</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式二<br>使用mysql客户端如：mysqlworkbatch，navicat等客户端软件。</p>\n</li>\n</ul>\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><p>删除容器必须要保证容器是stop的可以通过下面的命令查看</p>\n<ul>\n<li><p>查看正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有运行过的容器包括正在运行的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>根据上面的命令可以查找到容器id，执行命令删除容器<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker rm 容器id</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Nginx中间件","date":"2018-03-31T17:23:16.000Z","_content":"# 1.Nginx中间件\n## 1.1 Nginx简述\nNginx是一个开源且高性能、可靠的HTTP中间件、代理服务。\n\n## 1.2 常见的HTTP服务\n- HTTPD - Apache基金会\n- IIS - 微软\n- GWS - Google Web Server\n从07年之后Nginx的市场占有率慢慢增加了。下面我将详细的介绍下为什么越来越多的企业选择使用Nginx。\n\n## 1.3 为什么选择Nginx\n我们为什么使用Nginx，肯定是因为它相比于其他的产品具有它独特的优势，下面呢我们就来谈谈具体的原因。\n- 原因一：IO多路复用epoll\n首先我们来了解下什么是io复用，其实io复用解决的就是一个并发性的问题，比如我们都去请求某宝购物，这时候对于服务端后台而言就会产生多个请求，处理多个并发请求，对于中间件就要产生多个IO流对系统进行读写\n- 原因二\n\n- 元\n","source":"_posts/nginx/Nginx中间件.md","raw":"---\ntitle: Nginx中间件\ndate: 2018-04-01 01:23:16\ntags: [nginx]\ncategories: [nginx]\n---\n# 1.Nginx中间件\n## 1.1 Nginx简述\nNginx是一个开源且高性能、可靠的HTTP中间件、代理服务。\n\n## 1.2 常见的HTTP服务\n- HTTPD - Apache基金会\n- IIS - 微软\n- GWS - Google Web Server\n从07年之后Nginx的市场占有率慢慢增加了。下面我将详细的介绍下为什么越来越多的企业选择使用Nginx。\n\n## 1.3 为什么选择Nginx\n我们为什么使用Nginx，肯定是因为它相比于其他的产品具有它独特的优势，下面呢我们就来谈谈具体的原因。\n- 原因一：IO多路复用epoll\n首先我们来了解下什么是io复用，其实io复用解决的就是一个并发性的问题，比如我们都去请求某宝购物，这时候对于服务端后台而言就会产生多个请求，处理多个并发请求，对于中间件就要产生多个IO流对系统进行读写\n- 原因二\n\n- 元\n","slug":"nginx/Nginx中间件","published":1,"updated":"2019-03-25T15:23:56.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzn3pmj00005pus8dnes9ur","content":"<h1 id=\"1-Nginx中间件\"><a href=\"#1-Nginx中间件\" class=\"headerlink\" title=\"1.Nginx中间件\"></a>1.Nginx中间件</h1><h2 id=\"1-1-Nginx简述\"><a href=\"#1-1-Nginx简述\" class=\"headerlink\" title=\"1.1 Nginx简述\"></a>1.1 Nginx简述</h2><p>Nginx是一个开源且高性能、可靠的HTTP中间件、代理服务。</p>\n<h2 id=\"1-2-常见的HTTP服务\"><a href=\"#1-2-常见的HTTP服务\" class=\"headerlink\" title=\"1.2 常见的HTTP服务\"></a>1.2 常见的HTTP服务</h2><ul>\n<li>HTTPD - Apache基金会</li>\n<li>IIS - 微软</li>\n<li>GWS - Google Web Server<br>从07年之后Nginx的市场占有率慢慢增加了。下面我将详细的介绍下为什么越来越多的企业选择使用Nginx。</li>\n</ul>\n<h2 id=\"1-3-为什么选择Nginx\"><a href=\"#1-3-为什么选择Nginx\" class=\"headerlink\" title=\"1.3 为什么选择Nginx\"></a>1.3 为什么选择Nginx</h2><p>我们为什么使用Nginx，肯定是因为它相比于其他的产品具有它独特的优势，下面呢我们就来谈谈具体的原因。</p>\n<ul>\n<li>原因一：IO多路复用epoll<br>首先我们来了解下什么是io复用，其实io复用解决的就是一个并发性的问题，比如我们都去请求某宝购物，这时候对于服务端后台而言就会产生多个请求，处理多个并发请求，对于中间件就要产生多个IO流对系统进行读写</li>\n<li><p>原因二</p>\n</li>\n<li><p>元</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-Nginx中间件\"><a href=\"#1-Nginx中间件\" class=\"headerlink\" title=\"1.Nginx中间件\"></a>1.Nginx中间件</h1><h2 id=\"1-1-Nginx简述\"><a href=\"#1-1-Nginx简述\" class=\"headerlink\" title=\"1.1 Nginx简述\"></a>1.1 Nginx简述</h2><p>Nginx是一个开源且高性能、可靠的HTTP中间件、代理服务。</p>\n<h2 id=\"1-2-常见的HTTP服务\"><a href=\"#1-2-常见的HTTP服务\" class=\"headerlink\" title=\"1.2 常见的HTTP服务\"></a>1.2 常见的HTTP服务</h2><ul>\n<li>HTTPD - Apache基金会</li>\n<li>IIS - 微软</li>\n<li>GWS - Google Web Server<br>从07年之后Nginx的市场占有率慢慢增加了。下面我将详细的介绍下为什么越来越多的企业选择使用Nginx。</li>\n</ul>\n<h2 id=\"1-3-为什么选择Nginx\"><a href=\"#1-3-为什么选择Nginx\" class=\"headerlink\" title=\"1.3 为什么选择Nginx\"></a>1.3 为什么选择Nginx</h2><p>我们为什么使用Nginx，肯定是因为它相比于其他的产品具有它独特的优势，下面呢我们就来谈谈具体的原因。</p>\n<ul>\n<li>原因一：IO多路复用epoll<br>首先我们来了解下什么是io复用，其实io复用解决的就是一个并发性的问题，比如我们都去请求某宝购物，这时候对于服务端后台而言就会产生多个请求，处理多个并发请求，对于中间件就要产生多个IO流对系统进行读写</li>\n<li><p>原因二</p>\n</li>\n<li><p>元</p>\n</li>\n</ul>\n"},{"_content":"了解历史\n内存结构 内存溢出\n垃圾回收机制\n性能监控工具\n性能调优案例实战\n认识类的文件结构\n类加载机制\n字节码执行引擎\n虚拟机编译及运行时优化\nJava线程高级","source":"_posts/jvm/深入理解java虚拟机.md","raw":"了解历史\n内存结构 内存溢出\n垃圾回收机制\n性能监控工具\n性能调优案例实战\n认识类的文件结构\n类加载机制\n字节码执行引擎\n虚拟机编译及运行时优化\nJava线程高级","slug":"jvm/深入理解java虚拟机","published":1,"date":"2019-03-25T15:24:12.669Z","updated":"2019-03-25T15:29:50.353Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjtzn3pmn00015pusz9ild4lq","content":"<p>了解历史<br>内存结构 内存溢出<br>垃圾回收机制<br>性能监控工具<br>性能调优案例实战<br>认识类的文件结构<br>类加载机制<br>字节码执行引擎<br>虚拟机编译及运行时优化<br>Java线程高级</p>\n","site":{"data":{}},"excerpt":"","more":"<p>了解历史<br>内存结构 内存溢出<br>垃圾回收机制<br>性能监控工具<br>性能调优案例实战<br>认识类的文件结构<br>类加载机制<br>字节码执行引擎<br>虚拟机编译及运行时优化<br>Java线程高级</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjtmxtdkk0006zns6g53rbhm3","category_id":"cjtmxtdkr0008zns60js17ryq","_id":"cjtmxtdkw000dzns6htqu24z0"},{"post_id":"cjtmxtdkp0007zns66ytoyuy7","category_id":"cjtmxtdku000azns6i53qro3k","_id":"cjtmxtdkw000fzns60ealfz8k"},{"post_id":"cjto60t210000cgus3ofs388z","category_id":"cjtmxtdkr0008zns60js17ryq","_id":"cjto60t2k0005cgusyu6gchbq"},{"post_id":"cjto60t210000cgus3ofs388z","category_id":"cjto60t2g0002cgusgvqodgaz","_id":"cjto60t2l0006cgusnsxuxbl0"},{"post_id":"cjtzn3pmj00005pus8dnes9ur","category_id":"cjtzn3pmr00025pus7ey4zdef","_id":"cjtzn3pmv00055pusovdw1hjo"}],"PostTag":[{"post_id":"cjtmxtdkk0006zns6g53rbhm3","tag_id":"cjtmxtdks0009zns63u48hnf2","_id":"cjtmxtdkv000czns6w4w5jrtm"},{"post_id":"cjtmxtdkp0007zns66ytoyuy7","tag_id":"cjtmxtdku000bzns6m6flrucg","_id":"cjtmxtdkw000ezns6ms1kw1x2"},{"post_id":"cjto60t210000cgus3ofs388z","tag_id":"cjtmxtdks0009zns63u48hnf2","_id":"cjto60t2j0003cgusjvhkt5by"},{"post_id":"cjto60t210000cgus3ofs388z","tag_id":"cjto60t2f0001cgusuiw08wal","_id":"cjto60t2k0004cgus6xu3bt7f"},{"post_id":"cjtzn3pmj00005pus8dnes9ur","tag_id":"cjtzn3pmt00035pusp08b3pry","_id":"cjtzn3pmu00045pus7fjg16sy"}],"Tag":[{"name":"Docker","_id":"cjtmxtdks0009zns63u48hnf2"},{"name":"UML","_id":"cjtmxtdku000bzns6m6flrucg"},{"name":"mysql","_id":"cjto60t2f0001cgusuiw08wal"},{"name":"nginx","_id":"cjtzn3pmt00035pusp08b3pry"}]}}